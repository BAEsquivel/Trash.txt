(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{221:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.meta=void 0;var o=p(t(2)),a=t(528),s=p(t(529)),i=p(t(531)),l=p(t(530)),r=p(t(833)),d=p(t(832));function p(n){return n&&n.__esModule?n:{default:n}}var c=e.meta={title:"Loader",toc:["Пример","Свойства  <Loader />"]},m=o.default.createElement(i.default,{code:r.default}),u=o.default.createElement(l.default,{code:d.default});e.default=function(n){var e=n.components,t=function(n,e){var t={};for(var o in n)e.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t}(n,["components"]);return o.default.createElement(a.MDXTag,{name:"wrapper",Layout:(0,s.default)(c)(function(n){return n.children}),layoutProps:t,components:e},o.default.createElement(a.MDXTag,{name:"h3",components:e},"Пример"),m,o.default.createElement(a.MDXTag,{name:"h3",components:e},"Свойства ",o.default.createElement(a.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<Loader />")),u)}},832:function(n,e){n.exports="import React, {PureComponent} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport Spinner from '../Spinner'\nimport {injectSheet} from '../theme'\n\n@injectSheet(\n  theme => ({\n    loader: {\n      position: 'relative',\n      width: '100%',\n      minHeight: '100%'\n    },\n    overlay: {\n      position: 'absolute',\n      background: theme.loader.color,\n      transitionProperty: 'opacity',\n      pointerEvents: 'none',\n      transitionDuration: theme.loader.animationDuration,\n      opacity: 0,\n      zIndex: -1,\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    },\n    isLoading: {\n      '&$overlay': {\n        opacity: 0.7,\n        zIndex: 'initial'\n      },\n      '&$loader': {\n        pointerEvents: 'none'\n      }\n    },\n    blur: {\n      filter: 'blur(1px)'\n    }\n  }),\n  {name: 'Loader'}\n)\nexport default class Loader extends PureComponent {\n  static propTypes = {\n    /**\n     * CSS-класс\n     */\n    className: PropTypes.string,\n    /**\n     * CSS-класс состояния загрузки\n     */\n    loadingClassName: PropTypes.string,\n    /**\n     * CSS-класс полупрозрачного оверлея\n     */\n    overlayClassName: PropTypes.string,\n    /**\n     * Inline-стили\n     */\n    style: PropTypes.object,\n    /**\n     * CSS-класс спиннера\n     */\n    spinnerClassName: PropTypes.string,\n    /**\n     * Цвет спиннера\n     */\n    spinnerColor: PropTypes.string,\n    /**\n     * Состояние загрузки, либо Boolean, либо Promise\n     */\n    loading: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n    /**\n     * Контент\n     */\n    children: PropTypes.node,\n    /**\n     * Скрытие контента во время загрузки\n     */\n    hideContent: PropTypes.bool,\n    /**\n     * Блюрить контент во время загрузки\n     */\n    blurContent: PropTypes.bool\n  }\n\n  static defaultProps = {\n    loading: false,\n    hideContent: false,\n    blurContent: false\n  }\n\n  state = {\n    loading: false\n  }\n\n  componentDidMount() {\n    this.updateLoading(this.props.loading)\n  }\n\n  componentWillReceiveProps({loading}) {\n    this.updateLoading(loading)\n  }\n\n  updateLoading(loading) {\n    if (typeof loading === 'boolean') {\n      this.setState({\n        loading\n      })\n    } else {\n      this.setState({\n        loading: true\n      })\n\n      loading.then(() => {\n        this.setState({\n          loading: false\n        })\n      })\n    }\n  }\n\n  render() {\n    const {loading} = this.state\n\n    const {\n      className,\n      loadingClassName,\n      overlayClassName,\n      style,\n      classes,\n      spinnerClassName,\n      spinnerColor,\n      children,\n      hideContent,\n      blurContent\n    } = this.props\n\n    return (\n      <div\n        style={style}\n        className={classnames(\n          classes.loader,\n          className,\n          loading && classnames(loadingClassName, classes.isLoading)\n        )}>\n        {!(loading && hideContent) &&\n          (blurContent ? (\n            <div className={classnames(loading && blurContent && classes.blur)}>\n              {children}\n            </div>\n          ) : (\n            children\n          ))}\n        <div\n          className={classnames(\n            classes.overlay,\n            overlayClassName,\n            loading && classes.isLoading\n          )}\n        />\n        {loading && (\n          <Spinner\n            className={classnames(classes.spinner, spinnerClassName)}\n            color={spinnerColor}\n          />\n        )}\n      </div>\n    )\n  }\n}\n"},833:function(n,e){n.exports="import React, {Component} from 'react'\nimport Loader from 'rambler-ui/Loader'\nimport Button from 'rambler-ui/Button'\n\nexport default class LoaderExample extends Component {\n  state = {\n    loading: false,\n    buttonLoading: false\n  }\n\n  load = () => {\n    const loading = new Promise(resolve => {\n      setTimeout(() => {\n        this.setState({\n          buttonLoading: false\n        })\n\n        resolve()\n      }, 3000)\n    })\n\n    this.setState({\n      loading,\n      buttonLoading: true\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <div style={{height: 200, position: 'relative'}}>\n            <Loader loading={this.state.loading}>\n              Hello world\n              <Button\n                type=\"secondary\"\n                style={{\n                  position: 'absolute',\n                  left: 0,\n                  bottom: 0\n                }}\n                loading={this.state.buttonLoading}\n                onClick={this.load}>\n                Загрузить\n              </Button>\n            </Loader>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n"}}]);