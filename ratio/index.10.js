(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{208:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.meta=void 0;var s=p(t(2)),i=t(528),o=p(t(529)),a=p(t(531)),l=p(t(530)),r=p(t(797)),m=p(t(796)),d=p(t(795));function p(n){return n&&n.__esModule?n:{default:n}}var c=e.meta={title:"TagsInput",toc:["Пример","Свойства  <TagsInput />","Свойства  <TagsInputItem />"]},u=s.default.createElement(a.default,{code:r.default}),h=s.default.createElement(l.default,{code:m.default}),f=s.default.createElement(l.default,{code:d.default});e.default=function(n){var e=n.components,t=function(n,e){var t={};for(var s in n)e.indexOf(s)>=0||Object.prototype.hasOwnProperty.call(n,s)&&(t[s]=n[s]);return t}(n,["components"]);return s.default.createElement(i.MDXTag,{name:"wrapper",Layout:(0,o.default)(c)(function(n){return n.children}),layoutProps:t,components:e},s.default.createElement(i.MDXTag,{name:"h3",components:e},"Пример"),u,s.default.createElement(i.MDXTag,{name:"h3",components:e},"Свойства ",s.default.createElement(i.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<TagsInput />")),h,s.default.createElement(i.MDXTag,{name:"h3",components:e},"Свойства ",s.default.createElement(i.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<TagsInputItem />")),f)}},795:function(n,e){n.exports="/**\n * Компонент TagsInputItem\n */\nimport React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {isolateMixin} from '../utils/mixins'\nimport {injectSheet} from '../theme'\nimport ClearIcon from './ClearIcon'\n\nconst iconStyle = {\n  fill: null\n}\n\n@injectSheet(\n  theme => ({\n    root: {\n      extend: isolateMixin,\n      display: 'inline-flex',\n      fontSize: theme.tagsInput.fontSize,\n      lineHeight: theme.tagsInput.height + 'px',\n      color: theme.tagsInput.colors.default.text,\n      whiteSpace: 'nowrap',\n      pointerEvents: 'none'\n    },\n    text: {\n      flex: '0 1 auto',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis'\n    },\n    icon: {\n      flex: 'none',\n      fontSize: 15,\n      width: '1em',\n      height: '1em',\n      alignSelf: 'center',\n      color: theme.tagsInput.colors.default.icon,\n      fill: 'currentColor',\n      cursor: 'pointer',\n      pointerEvents: 'auto',\n      '&:hover , &:active': {\n        color: theme.tagsInput.colors.hover.icon\n      }\n    },\n    isDisabled: {\n      color: theme.tagsInput.colors.disabled.text,\n      '&& $icon': {\n        color: theme.tagsInput.colors.disabled.icon,\n        cursor: 'not-allowed'\n      }\n    }\n  }),\n  {name: 'TagsInputItem'}\n)\nclass TagsInputItem extends Component {\n  static propTypes = {\n    /**\n     * Дополнительный CSS-класс (автоматически проставляется компонентом `<TagsInput/>`)\n     */\n    className: PropTypes.string,\n    /**\n     * Inline-стили\n     */\n    style: PropTypes.object,\n    /**\n     * Значение тега, по-умолчанию считается, что это примитив\n     */\n    value: PropTypes.any.isRequired,\n    /**\n     * Контент тега\n     */\n    children: PropTypes.string.isRequired,\n    /**\n     * Коллбек клика на тег, в качестве аргументов принимает объект события и value (автоматически проставляется компонентом `<TagsInput/>`)\n     */\n    onClick: PropTypes.func,\n    /**\n     * Коллбек для получения ссылки на элемент, принимает ref в качестве аргумента (автоматически проставляется компонентом `<TagsInput/>`)\n     */\n    nodeRef: PropTypes.func,\n    /**\n     * Отключить элемент (автоматически проставляется компонентом `<TagsInput/>`)\n     */\n    disabled: PropTypes.bool\n  }\n\n  handleClick = event => {\n    const {value, onClick} = this.props\n    onClick(event, value)\n  }\n\n  handleMouseDown = event => {\n    event.preventDefault()\n  }\n\n  render() {\n    const {\n      className,\n      style,\n      disabled,\n      nodeRef,\n      children,\n      onClick,\n      classes,\n      theme, // eslint-disable-line no-unused-vars\n      value, // eslint-disable-line no-unused-vars\n      ...other\n    } = this.props\n    return (\n      <div\n        {...other}\n        className={classnames(\n          className,\n          classes.root,\n          disabled && classes.isDisabled\n        )}\n        style={style}\n        ref={nodeRef}>\n        <span className={classes.text}>{children}</span>\n        {onClick && (\n          <ClearIcon\n            className={classes.icon}\n            size={null}\n            style={iconStyle}\n            onClick={disabled ? undefined : this.handleClick}\n            onMouseDown={disabled ? undefined : this.handleMouseDown}\n            role={disabled ? undefined : 'button'}\n          />\n        )}\n      </div>\n    )\n  }\n}\nTagsInputItem.displayName = 'ruiTagsInputItem'\n\nexport default TagsInputItem\n"},796:function(n,e){n.exports="/**\n * Компонент TagsInput\n */\nimport React, {PureComponent, cloneElement} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {injectSheet} from '../theme'\nimport {isolateMixin} from '../utils/mixins'\nimport windowEvents from '../hoc/window-events'\n\n@injectSheet(\n  theme => ({\n    root: {\n      extend: isolateMixin,\n      fontSize: theme.tagsInput.fontSize,\n      fontFamily: theme.fontFamily,\n      fontWeight: 400,\n      userSelect: 'none',\n      overflow: 'hidden'\n    },\n    items: {\n      display: 'flex',\n      marginLeft: -theme.tagsInput.sideMargin,\n      '$isDisabled &': {\n        pointerEvents: 'none'\n      }\n    },\n    ...['medium', 'small'].reduce(\n      (result, size) => ({\n        ...result,\n        [size]: {\n          '& $items': {\n            minHeight:\n              theme.tagsInput.height +\n              theme.tagsInput.sizes[size].verticalMargin,\n            marginTop: -theme.tagsInput.sizes[size].verticalMargin\n          },\n          '& $item': {\n            marginTop: theme.tagsInput.sizes[size].verticalMargin\n          }\n        }\n      }),\n      {}\n    ),\n    isExpanded: {\n      '& $items': {\n        flexWrap: 'wrap'\n      }\n    },\n    item: {\n      '&&': {\n        flex: 'none',\n        alignSelf: 'flex-start',\n        whiteSpace: 'nowrap',\n        maxWidth: `calc(100% - ${theme.tagsInput.sideMargin}px)`,\n        marginLeft: theme.tagsInput.sideMargin,\n        lineHeight: theme.tagsInput.height + 'px'\n      }\n    },\n    more: {\n      composes: '$item',\n      color: theme.tagsInput.colors.default.more,\n      '$isDisabled &&': {\n        color: theme.tagsInput.colors.disabled.more\n      }\n    },\n    isClickable: {\n      cursor: 'pointer',\n      pointerEvents: 'auto',\n      '&:hover, &:active': {\n        color: theme.tagsInput.colors.hover.more\n      }\n    },\n    isHidden: {\n      '&&': {\n        order: 1,\n        visibility: 'hidden'\n      }\n    },\n    isDisabled: {}\n  }),\n  {name: 'TagsInput'}\n)\n@windowEvents('resize')\nexport default class TagsInput extends PureComponent {\n  static propTypes = {\n    /**\n     *  Элементы инпута, обязаны быть компонентами типа <TagsInputItem />\n     */\n    children: PropTypes.node,\n    /**\n     * Задизэйблить\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Размер\n     */\n    size: PropTypes.oneOf(['small', 'medium']),\n    /**\n     * Класс контейнера\n     */\n    className: PropTypes.string,\n    /**\n     * Открыт/Закрыт список элементов\n     */\n    isExpanded: PropTypes.bool,\n    /**\n     * Переопределение стилей контейнера\n     */\n    style: PropTypes.object,\n    /**\n     * Коллбек вызывающийся при изменении состояния\n     */\n    onChange: PropTypes.func,\n    /**\n     * Коллбек вызывающийся при нажатии на кнопку \"еще\"\n     */\n    onMoreClick: PropTypes.func\n  }\n\n  static defaultProps = {\n    size: 'medium'\n  }\n\n  state = {\n    visibleItemsCount: null,\n    containerWidth: null\n  }\n  items = []\n  container = null\n  moreButton = null\n\n  componentDidMount() {\n    this.props.windowEvents.on('resize', this.handleWindowResize, false)\n    if (!this.props.isExpanded) this.setVisibleItemsCount()\n  }\n\n  componentWillUpdate(nextProps) {\n    if (React.Children.count(nextProps.children) === 0) this.items = []\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.shouldVisibleItemsCountReset(\n        this.state,\n        prevState,\n        this.props,\n        prevProps\n      )\n    )\n      this.setVisibleItemsCount()\n  }\n\n  componentWillUnmount() {\n    this.props.windowEvents.removeListener(\n      'resize',\n      this.handleWindowResize,\n      false\n    )\n  }\n\n  handleWindowResize = () => {\n    this.setState({\n      containerWidth: Math.floor(this.container.getBoundingClientRect().width)\n    })\n  }\n\n  shouldVisibleItemsCountReset(state, prevState, props, prevProps) {\n    if (props.isExpanded) return false\n    if (props.isExpanded !== prevProps.isExpanded) return true\n    if (state.containerWidth !== prevState.containerWidth) return true\n    const items = React.Children.toArray(props.children)\n    const prevItems = React.Children.toArray(prevProps.children)\n    let itemsCount = items.length\n    if (itemsCount !== prevItems.length) return true\n    while (itemsCount--)\n      if (\n        items[itemsCount].props.children !==\n        prevItems[itemsCount].props.children\n      )\n        return true\n    return false\n  }\n\n  setVisibleItemsCount() {\n    const items = this.items.filter(item => item)\n    const itemsCount = items.length\n    if (itemsCount < 1) {\n      this.setState({visibleItemsCount: null})\n      return\n    }\n    const containerWidth = Math.ceil(\n      this.container.getBoundingClientRect().width\n    )\n    const moreButtonWidth =\n      Math.ceil(this.moreButton.getBoundingClientRect().width) + 20\n    let firstLineItemsCount = 0\n    let itemsWidthSum = 0\n    const itemsWidths = []\n    while (firstLineItemsCount < itemsCount) {\n      const itemWidth =\n        Math.ceil(\n          this.items[firstLineItemsCount].getBoundingClientRect().width\n        ) + 20\n      if (itemsWidthSum + itemWidth > containerWidth) break\n      itemsWidths.push(itemWidth)\n      itemsWidthSum += itemWidth\n      firstLineItemsCount += 1\n    }\n    if (firstLineItemsCount < itemsCount) {\n      let availableSpace = containerWidth - itemsWidthSum\n      while (availableSpace < moreButtonWidth) {\n        const itemWidth = itemsWidths[firstLineItemsCount]\n        availableSpace += itemWidth\n        firstLineItemsCount -= 1\n      }\n    }\n    this.setState({\n      visibleItemsCount:\n        firstLineItemsCount < itemsCount ? firstLineItemsCount : null\n    })\n  }\n\n  saveItemsRefs = (ref, index, length) => {\n    this.items.length = length\n    this.items[index] = ref\n  }\n\n  saveContainerRef = ref => {\n    this.container = ref\n  }\n\n  saveMoreButtonRef = ref => {\n    this.moreButton = ref\n  }\n\n  onItemClick = (event, value) => {\n    if (this.props.disabled) return\n    event.stopPropagation()\n    const values = React.Children.toArray(this.props.children).map(\n      item => item.props.value\n    )\n    this.props.onChange(values.filter(item => item !== value))\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      style,\n      disabled,\n      classes,\n      isExpanded,\n      onMoreClick,\n      size,\n      theme: {i18n},\n      onChange,\n      windowEvents, // eslint-disable-line no-unused-vars\n      ...other\n    } = this.props\n\n    const {visibleItemsCount} = this.state\n    const resultClassName = classnames(\n      className,\n      classes.root,\n      classes[size],\n      disabled && classes.isDisabled,\n      isExpanded && classes.isExpanded\n    )\n    const count = React.Children.count(children)\n    const items = React.Children.map(children, (child, index) => {\n      if (!child.type || child.type.displayName !== 'ruiTagsInputItem')\n        throw new Error(\n          'Child component should be instance of <TagsInputItem />'\n        )\n      return cloneElement(child, {\n        nodeRef: ref => {\n          this.saveItemsRefs(ref, index, count)\n        },\n        className: classnames(\n          classes.item,\n          visibleItemsCount !== null &&\n            visibleItemsCount <= index &&\n            !isExpanded &&\n            classes.isHidden\n        ),\n        key: child.props.children,\n        onClick: onChange ? this.onItemClick : undefined,\n        disabled\n      })\n    })\n    const moreCount =\n      visibleItemsCount === null ? 0 : items.length - visibleItemsCount\n\n    return (\n      <div className={resultClassName} style={style} {...other}>\n        <div ref={this.saveContainerRef} className={classes.items}>\n          {items}\n          {!isExpanded && (\n            <div\n              className={classnames(\n                classes.more,\n                onMoreClick && classes.isClickable,\n                moreCount === 0 && classes.isHidden\n              )}\n              role={onMoreClick ? 'button' : undefined}\n              ref={this.saveMoreButtonRef}\n              onClick={onMoreClick}>\n              + {i18n.tagsInput.more} {moreCount}\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n"},797:function(n,e){n.exports="import React, {Component} from 'react'\nimport {TagsInput, TagsInputItem} from 'rambler-ui/TagsInput'\nimport Checkbox from 'rambler-ui/Checkbox'\nimport {ApplyTheme} from 'rambler-ui/theme'\n\nconst exampleItems = [\n  'Чехия',\n  'Мальта',\n  'Нидерланды',\n  'Германия',\n  'Гватемала',\n  'США',\n  'Люксембург',\n  'Канада',\n  'Австралия'\n]\n\nexport default class TagsInputExample extends Component {\n  state = {\n    items: exampleItems.slice(2, 6)\n  }\n\n  toggleValue = (value, checked) => {\n    this.setState({\n      items: checked\n        ? this.state.items.concat(value)\n        : this.state.items.filter(el => el !== value)\n    })\n  }\n\n  changeValue = items => {\n    this.setState({items})\n  }\n\n  render() {\n    const items = this.state.items.map(item => (\n      <TagsInputItem value={item} key={item}>\n        {item}\n      </TagsInputItem>\n    ))\n    return (\n      <ApplyTheme>\n        <div>\n          {exampleItems.map(item => (\n            <Checkbox\n              checked={this.state.items.indexOf(item) > -1}\n              style={{marginRight: 20}}\n              onCheck={(e, checked) => {\n                this.toggleValue(item, checked)\n              }}\n              key={item}>\n              {item}\n            </Checkbox>\n          ))}\n          <div style={{marginTop: 40, maxWidth: 300, border: '1px solid'}}>\n            <TagsInput onChange={this.changeValue} onMoreClick={() => {}}>\n              {items}\n            </TagsInput>\n          </div>\n          <div style={{marginTop: 10, maxWidth: 300, border: '1px solid'}}>\n            <TagsInput onChange={this.changeValue} isExpanded={true}>\n              {items}\n            </TagsInput>\n          </div>\n          <div style={{marginTop: 40, maxWidth: 240, border: '1px solid'}}>\n            <TagsInput onChange={this.changeValue} size=\"small\">\n              {items}\n            </TagsInput>\n          </div>\n          <div style={{marginTop: 10, maxWidth: 240, border: '1px solid'}}>\n            <TagsInput\n              onChange={this.changeValue}\n              onMoreClick={() => {}}\n              size=\"small\"\n              isExpanded={true}>\n              {items}\n            </TagsInput>\n          </div>\n          <div style={{marginTop: 40, maxWidth: 240, border: '1px solid'}}>\n            <TagsInput\n              onChange={this.changeValue}\n              onMoreClick={() => {}}\n              size=\"small\"\n              disabled={true}>\n              {items}\n            </TagsInput>\n          </div>\n          <div style={{marginTop: 10, maxWidth: 240, border: '1px solid'}}>\n            <TagsInput\n              onChange={this.changeValue}\n              onMoreClick={() => {}}\n              size=\"small\"\n              isExpanded={true}\n              disabled={true}>\n              {items}\n            </TagsInput>\n          </div>\n\n          <div style={{marginTop: 40}}>\n            this.state.items: <b>{this.state.items.join(', ')}</b>\n          </div>\n        </div>\n      </ApplyTheme>\n    )\n  }\n}\n"}}]);