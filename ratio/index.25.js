(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{223:function(n,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.meta=void 0;var t=p(o(2)),r=o(528),s=p(o(529)),i=p(o(531)),l=p(o(530)),a=p(o(839)),c=p(o(838));function p(n){return n&&n.__esModule?n:{default:n}}var u=e.meta={title:"IconButton",toc:["Пример","Свойства  <IconButton />"]},m=t.default.createElement(i.default,{code:a.default}),d=t.default.createElement(l.default,{code:c.default});e.default=function(n){var e=n.components,o=function(n,e){var o={};for(var t in n)e.indexOf(t)>=0||Object.prototype.hasOwnProperty.call(n,t)&&(o[t]=n[t]);return o}(n,["components"]);return t.default.createElement(r.MDXTag,{name:"wrapper",Layout:(0,s.default)(u)(function(n){return n.children}),layoutProps:o,components:e},t.default.createElement(r.MDXTag,{name:"h3",components:e},"Пример"),m,t.default.createElement(r.MDXTag,{name:"h3",components:e},"Свойства ",t.default.createElement(r.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<IconButton />")),d)}},838:function(n,e){n.exports="/**\n * Компонент кнопки-иконки\n * Скетч: https://zpl.io/ZTWunL\n */\n\nimport React, {PureComponent, cloneElement, isValidElement} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport Spinner from '../Spinner'\nimport {injectSheet} from '../theme'\nimport {isolateMixin, ifMobile, focusSourceMixin} from '../utils/mixins'\nimport '../utils/focus-source'\n\n@injectSheet(\n  theme => ({\n    button: {\n      extend: isolateMixin,\n      cursor: 'pointer',\n      boxSizing: 'border-box',\n      borderRadius: theme.iconButton.borderRadius,\n      outline: 'none',\n      position: 'relative',\n      display: 'inline-block',\n      border: 'none !important',\n      userSelect: 'none',\n      verticalAlign: 'middle',\n      '&, & *': {\n        transition: 'background-color .2s, border .2s, box-shadow .2s'\n      },\n      '&:before, &:after': {\n        content: '\"\"',\n        display: 'block',\n        position: 'absolute',\n        pointerEvents: 'none',\n        borderRadius: theme.iconButton.borderRadius,\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        border: '1px solid transparent',\n        transition: 'all .2s'\n      },\n      '&[disabled]': {\n        pointerEvents: 'none'\n      },\n      '&::-moz-focus-inner': {\n        border: 'none !important',\n        outline: 'none !important'\n      }\n    },\n    overlay: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      zIndex: 1,\n      opacity: 0,\n      width: '100%',\n      cursor: 'pointer'\n    },\n    icon: {\n      flex: 'none',\n      fontSize: theme.iconButton.iconPercentSize + '%',\n      width: '1em',\n      height: '1em',\n      margin: 'auto',\n      transition: 'fill .2s',\n      '$size-medium &, $size-small &': {\n        fontSize: theme.iconButton.sizes.icon,\n        ...ifMobile({\n          fontSize: theme.iconButton.mobile.sizes.icon\n        })\n      }\n    },\n    iconWithStandardColor: {},\n    isLoading: {\n      pointerEvents: 'none',\n      opacity: 0\n    },\n    loader: {\n      fontSize: 3,\n      ...ifMobile({\n        fontSize: 4\n      })\n    },\n    content: {\n      display: 'flex',\n      width: '1em',\n      height: '1em'\n    },\n    'size-medium': {\n      fontSize: theme.iconButton.sizes.medium,\n      ...ifMobile({\n        fontSize: theme.iconButton.mobile.sizes.medium\n      })\n    },\n    'size-small': {\n      fontSize: theme.iconButton.sizes.small,\n      ...ifMobile({\n        fontSize: theme.iconButton.mobile.sizes.small\n      })\n    },\n    ...['primary', 'secondary', 'outline', 'flat', 'danger'].reduce(\n      (result, type) => {\n        const conf = theme.button.types[type]\n        const offset = conf.outlineOffset || 0\n\n        const setThemeForSelector = (colors, outlineOffset) => ({\n          background: colors.background,\n          '&:before': {\n            ...(colors.border && {\n              borderColor: colors.border\n            })\n          },\n          '&:after': {\n            ...(colors.outline && {\n              left: -outlineOffset,\n              right: -outlineOffset,\n              top: -outlineOffset,\n              bottom: -outlineOffset,\n              borderColor: colors.outline\n            })\n          },\n          '& $iconWithStandardColor': {\n            color: colors.icon\n          }\n        })\n\n        return {\n          ...result,\n          [`type-${type}`]: {\n            ...setThemeForSelector(conf.colors.default, offset),\n            '&:hover': setThemeForSelector(conf.colors.hover, offset),\n            '&:active': setThemeForSelector(conf.colors.active, offset),\n            '&[disabled]': setThemeForSelector(conf.colors.disabled, offset),\n            ...focusSourceMixin(\n              'other',\n              '&:focus',\n              setThemeForSelector(conf.colors.focus, offset)\n            ),\n            '& $loader': {\n              color: conf.colors.default.loader\n            }\n          }\n        }\n      },\n      {}\n    )\n  }),\n  {name: 'IconButton'}\n)\nexport default class IconButton extends PureComponent {\n  static propTypes = {\n    /**\n     * Тип стиля кнопки\n     */\n    type: PropTypes.oneOf([\n      'primary',\n      'secondary',\n      'outline',\n      'flat',\n      'danger'\n    ]),\n    /**\n     * Если указан href, то кнопка будет ссылкой\n     */\n    href: PropTypes.string,\n    /**\n     * Атрибут target для ссылки, если указан атрибут href\n     */\n    target: PropTypes.string,\n    /**\n     * Css-класс\n     */\n    className: PropTypes.string,\n    /**\n     * Inline-стили\n     */\n    style: PropTypes.object,\n    /**\n     * Контент для кнопки\n     */\n    children: PropTypes.node,\n    /**\n     * Размер кнопки - small/medium или размер в пикселях\n     */\n    size: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.oneOf(['small', 'medium'])\n    ]),\n    /**\n     * Обработчик клика\n     */\n    onClick: PropTypes.func,\n    /**\n     * Элемент, который содержит контент, например `<Link />`\n     * в случае с `react-router`\n     */\n    container: PropTypes.element,\n    /**\n     * Элемент, который прозрачно накладывается на кнопку (Например `<input type=\"file\" />`)\n     */\n    overlay: PropTypes.element,\n    /**\n     * Отключаем кнопку/ссылку\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Тип кнопки\n     */\n    buttonType: PropTypes.string,\n    /**\n     * Показывать индикатор загрузки\n     */\n    loading: PropTypes.bool\n  }\n\n  static defaultProps = {\n    type: 'primary',\n    size: 'medium',\n    buttonType: 'button'\n  }\n\n  renderIcon(icon) {\n    if (!icon) return null\n\n    const {type, disabled, classes} = this.props\n    const initialProps = icon.props || {}\n    const isStandardColor =\n      type === 'primary' ||\n      type === 'danger' ||\n      disabled ||\n      !initialProps.hasOwnProperty('color')\n\n    const iconProps = {\n      size: null\n    }\n    if (isStandardColor) iconProps.color = 'currentColor'\n\n    const className = classnames(\n      initialProps.className,\n      classes.icon,\n      isStandardColor && classes.iconWithStandardColor\n    )\n    const resultProps = {...initialProps, ...iconProps, className}\n    return cloneElement(icon, resultProps)\n  }\n\n  render() {\n    const {\n      children,\n      type,\n      href,\n      container,\n      buttonType,\n      disabled,\n      className,\n      overlay,\n      width,\n      loading,\n      size,\n      style = {},\n      classes,\n      theme, // eslint-disable-line no-unused-vars\n      ...other\n    } = this.props\n\n    const iconEl = this.renderIcon(children)\n\n    const isStandardSize = typeof this.props.size !== 'number'\n\n    const resultStyle = {\n      width,\n      fontSize: isStandardSize ? null : size,\n      ...style\n    }\n\n    const resultClassName = classnames(\n      className,\n      classes.button,\n      classes[`type-${type}`],\n      isStandardSize && classes[`size-${size}`]\n    )\n\n    const resultChildren = (\n      <span\n        className={classnames(classes.content, loading && classes.isLoading)}>\n        {iconEl}\n        {overlay && cloneElement(overlay, {className: classes.overlay})}\n      </span>\n    )\n\n    const resultProps = {\n      ...other,\n      style: resultStyle,\n      className: resultClassName,\n      disabled: disabled ? 'disabled' : null\n    }\n\n    const resultContainer = isValidElement(container) ? (\n      container\n    ) : href ? (\n      <a href={href} />\n    ) : overlay ? (\n      <div />\n    ) : (\n      <button type={buttonType} />\n    )\n\n    return cloneElement(\n      resultContainer,\n      resultProps,\n      resultChildren,\n      loading && <Spinner className={classes.loader} color={null} />\n    )\n  }\n}\n"},839:function(n,e){n.exports="import IconButton from 'rambler-ui/IconButton'\nimport React from 'react'\nimport RamblerMailIcon from 'rambler-ui/icons/services/RamblerMailIcon'\nimport GoogleIcon from 'rambler-ui/icons/profiles/GoogleIcon'\nimport {ApplyTheme} from 'rambler-ui/theme'\n\nconst types = ['primary', 'danger', 'secondary', 'outline', 'flat']\n\nexport default function IconButtonExample() {\n  return (\n    <ApplyTheme>\n      <div>\n        {types.map(type => (\n          <div key={type}>\n            <IconButton style={{margin: 15}} type={type}>\n              <RamblerMailIcon />\n            </IconButton>\n            <IconButton style={{margin: 15}} type={type} loading={true}>\n              <RamblerMailIcon />\n            </IconButton>\n            <IconButton style={{margin: 15}} type={type} disabled={true}>\n              <RamblerMailIcon />\n            </IconButton>\n            <IconButton style={{margin: 15}} type={type} size=\"small\">\n              <GoogleIcon />\n            </IconButton>\n            <IconButton\n              style={{margin: 15}}\n              type={type}\n              size=\"small\"\n              disabled={true}>\n              <GoogleIcon />\n            </IconButton>\n            <IconButton\n              style={{margin: 15}}\n              type={type}\n              size=\"small\"\n              loading={true}>\n              <GoogleIcon />\n            </IconButton>\n          </div>\n        ))}\n      </div>\n    </ApplyTheme>\n  )\n}\n"}}]);