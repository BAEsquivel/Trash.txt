(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{217:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.meta=void 0;var o=c(t(2)),s=t(528),i=c(t(529)),p=c(t(531)),l=c(t(530)),a=c(t(824)),r=c(t(823)),u=c(t(822));function c(n){return n&&n.__esModule?n:{default:n}}var d=e.meta={title:"Popup",toc:["Пример","Пример с декоратором","Свойства  <Popup />"]},m=o.default.createElement(p.default,{code:a.default}),h=o.default.createElement(p.default,{code:r.default}),f=o.default.createElement(l.default,{code:u.default});e.default=function(n){var e=n.components,t=function(n,e){var t={};for(var o in n)e.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t}(n,["components"]);return o.default.createElement(s.MDXTag,{name:"wrapper",Layout:(0,i.default)(d)(function(n){return n.children}),layoutProps:t,components:e},o.default.createElement(s.MDXTag,{name:"h3",components:e},"Пример"),m,o.default.createElement(s.MDXTag,{name:"h3",components:e},"Пример с декоратором"),h,o.default.createElement(s.MDXTag,{name:"h3",components:e},"Свойства ",o.default.createElement(s.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<Popup />")),f)}},822:function(n,e){n.exports="/**\n * Компонент попапа\n * Скетч: * https://zpl.io/ZTWunL\n */\n\nimport React, {PureComponent} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport ClearIcon from '../icons/forms/ClearIcon'\nimport VisibilityAnimation from '../VisibilityAnimation'\nimport OnClickOutside from '../OnClickOutside'\nimport renderToLayer from '../hoc/render-to-layer'\nimport zIndexStack from '../hoc/z-index-stack'\nimport {ESCAPE} from '../constants/keys'\nimport {POPUP_ZINDEX} from '../constants/z-indexes'\nimport {injectSheet} from '../theme'\nimport {isolateMixin, middleMixin, ifDesktop} from '../utils/mixins'\n\n@zIndexStack(POPUP_ZINDEX)\n@renderToLayer\n@injectSheet(\n  theme => ({\n    backdrop: {\n      extend: [isolateMixin, middleMixin],\n      fontFamily: theme.fontFamily,\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      paddingTop: 20,\n      paddingBottom: 20,\n      textAlign: 'center',\n      overflowY: 'auto',\n      overflowX: 'hidden',\n      marginTop: -10,\n      opacity: 0,\n      transitionDuration: theme.popup.animationDuration,\n      transitionProperty: 'margin-top, opacity'\n    },\n    'backdrop-black': {\n      backgroundColor: theme.popup.colors.backdrop.default\n    },\n    'backdrop-blue': {\n      backgroundColor: theme.popup.colors.backdrop.blue\n    },\n    isVisible: {\n      marginTop: 0,\n      opacity: 1\n    },\n    popup: {\n      position: 'relative',\n      display: 'inline-block',\n      boxSizing: 'border-box',\n      borderRadius: theme.popup.borderRadius,\n      boxShadow: theme.popup.boxShadow,\n      padding: 25,\n      color: theme.popup.colors.text,\n      minWidth: 300,\n      maxWidth: 'calc(100% - 20px)',\n      marginLeft: 10,\n      marginRight: 10,\n      backgroundColor: theme.popup.colors.background,\n      fontSize: theme.popup.text.fontSize,\n      lineHeight: `${theme.popup.text.lineHeight}px`,\n      textAlign: 'left',\n      ...ifDesktop({\n        minWidth: 350,\n        maxWidth: 'auto'\n      })\n    },\n    title: {\n      marginBottom: 20,\n      paddingRight: 25,\n      fontSize: theme.popup.title.fontSize,\n      lineHeight: `${theme.popup.title.lineHeight}px`,\n      fontWeight: 500\n    },\n    close: {\n      position: 'absolute',\n      top: 25,\n      right: 25,\n      border: 0,\n      margin: 0,\n      padding: 0,\n      width: 15,\n      height: 15,\n      background: 'transparent',\n      outline: 0,\n      color: theme.popup.colors.close.default,\n      cursor: 'pointer',\n      '&:hover': {\n        color: theme.popup.colors.close.hover\n      }\n    },\n    buttons: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      marginTop: 30,\n      '& > *': {\n        flexGrow: 1,\n        width: '50%'\n      },\n      '& > * + *': {\n        marginLeft: 10,\n        ...ifDesktop({\n          marginLeft: 20\n        })\n      }\n    }\n  }),\n  {name: 'Popup'}\n)\nexport default class Popup extends PureComponent {\n  static propTypes = {\n    /**\n     * Css-класс\n     */\n    className: PropTypes.string,\n    /**\n     * Inline-стили\n     */\n    style: PropTypes.object,\n    /**\n     * Css-класс для фонового слоя\n     */\n    backdropClassName: PropTypes.string,\n    /**\n     * Inline-стили для фонового слоя\n     */\n    backdropStyle: PropTypes.object,\n    /**\n     * Цвет фонового слоя\n     */\n    backdropColor: PropTypes.oneOf(['black', 'blue']),\n    /**\n     * Контент для попапа\n     */\n    children: PropTypes.node,\n    /**\n     * Заголовок\n     */\n    title: PropTypes.node,\n    /**\n     * Css-класс для заголовка\n     */\n    titleClassName: PropTypes.string,\n    /**\n     * Inline-стили для заголовка\n     */\n    titleStyle: PropTypes.object,\n    /**\n     * Css-класс блока с кнопками\n     */\n    buttonsContainerClassName: PropTypes.string,\n    /**\n     * Inline-стили блока с кнопками\n     */\n    buttonsContainerStyle: PropTypes.object,\n    /**\n     * Контролирует видимость попапа\n     */\n    isOpened: PropTypes.bool,\n    /**\n     * Кнопка успешного действия (если она одна, то будет расятнута на все ширину)\n     */\n    okButton: PropTypes.node,\n    /**\n     * Кнопка отмены\n     */\n    cancelButton: PropTypes.node,\n    /**\n     * Кнопка закрытия попапа\n     */\n    showClose: PropTypes.bool,\n    /**\n     * Закрытие попапа кнопкой esc\n     */\n    closeOnEsc: PropTypes.bool,\n    /**\n     * Закрытие попапа по клику вне него\n     */\n    closeOnClickOutside: PropTypes.bool,\n    /**\n     * Коллбек вызывающийся после открытия попапа\n     */\n    onOpen: PropTypes.func,\n    /**\n     * Коллбек вызывающийся при нажатии на крестик (автоматически проставляется, если используется `@providePopup`)\n     */\n    onRequestClose: PropTypes.func,\n    /**\n     * Коллбек вызывающийся после закрытия попапа\n     */\n    onClose: PropTypes.func\n  }\n\n  static defaultProps = {\n    isOpened: false,\n    showClose: true,\n    closeOnEsc: true,\n    closeOnClickOutside: true,\n    backdropColor: 'black',\n    onOpen: () => {},\n    onRequestClose: () => {},\n    onClose: () => {}\n  }\n\n  componentWillUnmount() {\n    this.onWillInvisible()\n  }\n\n  onWillVisible = () => {\n    if (this.props.closeOnEsc)\n      window.addEventListener('keydown', this.onKeyDown)\n  }\n\n  onWillInvisible = () => {\n    if (this.props.closeOnEsc)\n      window.removeEventListener('keydown', this.onKeyDown)\n  }\n\n  onKeyDown = event => {\n    if (event.keyCode === ESCAPE) this.props.onRequestClose()\n  }\n\n  renderContent() {\n    const {\n      children,\n      className,\n      style,\n      title,\n      titleStyle,\n      titleClassName,\n      buttonsContainerStyle,\n      buttonsContainerClassName,\n      classes,\n      showClose,\n      okButton,\n      cancelButton,\n      onRequestClose,\n      closeOnClickOutside\n    } = this.props\n\n    const content = (\n      <div style={style} className={classnames(classes.popup, className)}>\n        {showClose && (\n          <button className={classes.close} onClick={onRequestClose}>\n            <ClearIcon size={15} color=\"currentColor\" />\n          </button>\n        )}\n        {title && (\n          <header\n            style={titleStyle}\n            className={classnames(classes.title, titleClassName)}>\n            {title}\n          </header>\n        )}\n        {children}\n        {(okButton || cancelButton) && (\n          <footer\n            style={buttonsContainerStyle}\n            className={classnames(classes.buttons, buttonsContainerClassName)}>\n            {okButton}\n            {cancelButton}\n          </footer>\n        )}\n      </div>\n    )\n\n    if (closeOnClickOutside)\n      return <OnClickOutside handler={onRequestClose}>{content}</OnClickOutside>\n\n    return content\n  }\n\n  render() {\n    const {\n      isOpened,\n      backdropClassName,\n      backdropStyle,\n      backdropColor,\n      theme,\n      classes,\n      onOpen,\n      onClose\n    } = this.props\n\n    return (\n      <VisibilityAnimation\n        isVisible={isOpened}\n        activeClassName={classes.isVisible}\n        animationDuration={theme.popup.animationDuration}\n        onWillVisible={this.onWillVisible}\n        onVisible={onOpen}\n        onWillInvisible={this.onWillInvisible}\n        onInvisible={onClose}>\n        <div\n          ref={el => {\n            this.backdrop = el\n          }}\n          style={backdropStyle}\n          className={classnames(\n            classes.backdrop,\n            classes[`backdrop-${backdropColor}`],\n            backdropClassName\n          )}>\n          {this.renderContent()}\n        </div>\n      </VisibilityAnimation>\n    )\n  }\n}\n"},823:function(n,e){n.exports="import React, {Component} from 'react'\nimport Button from 'rambler-ui/Button'\nimport {Popup, providePopup} from 'rambler-ui/Popup'\n\nclass WithPopup extends Component {\n  state = {\n    latestEvent: 'none'\n  }\n\n  openAlert = () => {\n    this.alertPopup = this.props.openPopup(resolve => (\n      <Popup\n        title=\"Ошибка\"\n        showClose\n        okButton={\n          <Button type=\"primary\" size=\"small\" onClick={resolve}>\n            Ок\n          </Button>\n        }>\n        При удалении почты произошла ошибка\n      </Popup>\n    ))\n\n    this.alertPopup.opened.then(() => {\n      this.setState({\n        latestEvent: 'alert opened'\n      })\n    })\n\n    this.alertPopup.closed.then(\n      () => {\n        this.setState({\n          latestEvent: 'alert closed'\n        })\n      },\n      () => {\n        this.setState({\n          latestEvent: 'alert closed'\n        })\n      }\n    )\n  }\n\n  openConfirm = () => {\n    this.confirmPopup = this.props.openPopup((resolve, reject) => (\n      <Popup\n        title=\"Удаление почты\"\n        showClose\n        okButton={\n          <Button type=\"primary\" size=\"small\" onClick={resolve}>\n            Ок\n          </Button>\n        }\n        cancelButton={\n          <Button type=\"flat\" size=\"small\" onClick={reject}>\n            Нет\n          </Button>\n        }>\n        Вы готовы удалить почту\n      </Popup>\n    ))\n\n    this.confirmPopup.opened.then(() => {\n      this.setState({\n        latestEvent: 'confirm opened'\n      })\n    })\n\n    this.confirmPopup.closed.then(\n      () => {\n        this.setState({\n          latestEvent: 'confirm closed with resolve'\n        })\n      },\n      () => {\n        this.setState({\n          latestEvent: 'confirm closed with reject'\n        })\n      }\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={{marginBottom: 20}}>\n          <Button onClick={this.openAlert}>Алерт</Button>\n          <Button\n            type=\"outline\"\n            style={{marginLeft: 20}}\n            onClick={this.openConfirm}>\n            Подтверждение\n          </Button>\n        </div>\n        <div>\n          this.state.latestEvent: <b>{this.state.latestEvent}</b>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst WithProvidedPopup = providePopup(WithPopup)\n\nexport default function PopupDecoratorExample() {\n  return <WithProvidedPopup />\n}\n"},824:function(n,e){n.exports="import React, {Component} from 'react'\nimport Button from 'rambler-ui/Button'\nimport Input from 'rambler-ui/Input'\nimport {Popup} from 'rambler-ui/Popup'\n\nexport default class PopupExample extends Component {\n  state = {\n    inputValue: 'foo@ramber.ru',\n    baseIsOpened: false,\n    customIsOpened: false\n  }\n\n  openPopup = type => {\n    this.setState({\n      [`${type}IsOpened`]: true\n    })\n  }\n\n  closePopup = () => {\n    this.setState({\n      baseIsOpened: false,\n      customIsOpened: false\n    })\n  }\n\n  updateValue = (e, value) => {\n    this.setState({\n      inputValue: value\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <Popup\n          title=\"Удаление почты\"\n          showClose\n          isOpened={this.state.baseIsOpened}\n          okButton={\n            <Button type=\"primary\" size=\"small\" onClick={this.closePopup}>\n              Ок\n            </Button>\n          }\n          cancelButton={\n            <Button type=\"flat\" size=\"small\" onClick={this.closePopup}>\n              Нет\n            </Button>\n          }\n          onRequestClose={this.closePopup}>\n          Вы готовы удалить почту\n        </Popup>\n\n        <Popup\n          title=\"Укажите почту\"\n          showClose\n          isOpened={this.state.customIsOpened}\n          backdropColor=\"blue\"\n          okButton={\n            <Button type=\"primary\" size=\"small\" onClick={this.closePopup}>\n              Ок\n            </Button>\n          }\n          cancelButton={\n            <Button type=\"flat\" size=\"small\" onClick={this.closePopup}>\n              Отмена\n            </Button>\n          }\n          onRequestClose={this.closePopup}>\n          <div style={{width: 400}}>\n            <Input\n              type=\"password\"\n              autoFocus\n              value={this.state.inputValue}\n              onChange={this.updateValue}\n            />\n          </div>\n        </Popup>\n\n        <div style={{marginBottom: 20}}>\n          <Button onClick={() => this.openPopup('base')}>Базовый попап</Button>\n          <Button\n            type=\"secondary\"\n            style={{marginLeft: 20}}\n            onClick={() => this.openPopup('custom')}>\n            Попап произвольной ширины\n          </Button>\n        </div>\n\n        <div>\n          this.state.baseIsOpened:{' '}\n          <b>{this.state.baseIsOpened ? 'true' : 'false'}</b>\n        </div>\n        <div>\n          this.state.customIsOpened:{' '}\n          <b>{this.state.customIsOpened ? 'true' : 'false'}</b>\n        </div>\n        <div>\n          this.state.inputValue: <b>{this.state.inputValue}</b>\n        </div>\n      </div>\n    )\n  }\n}\n"}}]);