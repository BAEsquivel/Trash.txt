(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{218:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.meta=void 0;var a=p(t(2)),o=t(528),r=p(t(529)),i=p(t(531)),s=p(t(530)),c=p(t(826)),g=p(t(825));function p(n){return n&&n.__esModule?n:{default:n}}var u=e.meta={title:"Pagination",toc:["Пример","Свойства  <Pagination />"]},l=a.default.createElement(i.default,{code:c.default}),m=a.default.createElement(s.default,{code:g.default});e.default=function(n){var e=n.components,t=function(n,e){var t={};for(var a in n)e.indexOf(a)>=0||Object.prototype.hasOwnProperty.call(n,a)&&(t[a]=n[a]);return t}(n,["components"]);return a.default.createElement(o.MDXTag,{name:"wrapper",Layout:(0,r.default)(u)(function(n){return n.children}),layoutProps:t,components:e},a.default.createElement(o.MDXTag,{name:"h3",components:e},"Пример"),l,a.default.createElement(o.MDXTag,{name:"h3",components:e},"Свойства ",a.default.createElement(o.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<Pagination />")),m)}},825:function(n,e){n.exports="/**\n * Компонент пагинации\n */\nimport React, {Component, cloneElement} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {injectSheet} from '../theme'\nimport {isolateMixin} from '../utils/mixins'\n\nconst inactiveElement = <span />\nconst buttonContainer = () => <button type=\"button\" />\n\n@injectSheet(\n  theme => ({\n    root: {\n      extend: isolateMixin,\n      display: 'inline-flex',\n      flexWrap: 'wrap',\n      justifyContent: 'center',\n      fontFamily: theme.fontFamily,\n      userSelect: 'none',\n      color: theme.pagination.colors.default.text\n    },\n    item: {\n      extend: isolateMixin,\n      display: 'inline-block',\n      flex: 'none',\n      height: theme.pagination.size,\n      lineHeight: theme.pagination.size + 'px',\n      border: 0,\n      outline: 'none !important',\n      background: 'none',\n      fontSize: theme.pagination.fontSize,\n      whiteSpace: 'nowrap',\n      textAlign: 'center',\n      cursor: 'default',\n      'button&::-moz-focus-inner': {\n        border: 'none !important',\n        outline: 'none !important'\n      }\n    },\n    page: {\n      composes: '$item',\n      minWidth: theme.pagination.size,\n      padding: '0 5px',\n      borderRadius: theme.pagination.size / 2,\n      cursor: 'pointer',\n      background: theme.pagination.colors.default.background,\n      transitionDuration: theme.tabs.animationDuration,\n      transitionProperty: 'color, background-color',\n      '&&': {\n        color: theme.pagination.colors.default.text,\n        fontWeight: 400\n      },\n      '&$isSelected': {\n        color: theme.pagination.colors.selected.text,\n        fontWeight: 500\n      },\n      '&:focus': {\n        color: theme.pagination.colors.focus.text\n      },\n      '&:hover': {\n        color: theme.pagination.colors.hover.text\n      },\n      '&:active': {\n        color: theme.pagination.colors.active.text,\n        background: theme.pagination.colors.active.background\n      },\n      '&$isDisabled': {\n        color: theme.pagination.colors.disabled.text,\n        background: 'none'\n      }\n    },\n    arrow: {\n      composes: '$item',\n      position: 'relative',\n      width: theme.pagination.size,\n      cursor: 'pointer',\n      overflow: 'hidden',\n      paddingLeft: theme.pagination.size,\n      '&&': {\n        transitionDuration: theme.tabs.animationDuration,\n        transitionProperty: 'fill',\n        color: theme.pagination.colors.default.arrow\n      },\n      '&&:focus': {\n        color: theme.pagination.colors.focus.arrow\n      },\n      '&&:hover': {\n        color: theme.pagination.colors.hover.arrow\n      },\n      '&&:active': {\n        color: theme.pagination.colors.active.arrow\n      },\n      '&$isDisabled': {\n        color: theme.pagination.colors.disabled.arrow + '!important'\n      },\n      '&:before': {\n        boxSizing: 'border-box',\n        position: 'absolute',\n        top: 6,\n        left: 13,\n        content: '\"\"',\n        width: 11,\n        height: 11,\n        border: 'solid',\n        borderWidth: '0 0 2px 2px',\n        transform: 'rotate(45deg)',\n        transformOrigin: 'left bottom'\n      }\n    },\n    prevArrow: {\n      composes: '$arrow',\n      marginRight: 7\n    },\n    nextArrow: {\n      composes: '$arrow',\n      marginLeft: 7,\n      transform: 'scaleX(-1)'\n    },\n    dots: {\n      composes: '$item',\n      width: theme.pagination.size\n    },\n    isDisabled: {\n      cursor: 'not-allowed'\n    },\n    isSelected: {}\n  }),\n  {name: 'Pagination'}\n)\nexport default class Pagination extends Component {\n  static propTypes = {\n    /**\n     * Количество страниц\n     */\n    pagesCount: PropTypes.number,\n    /**\n     * Выбранная страница\n     */\n    currentPage: PropTypes.number,\n    /**\n     * Дополнительный класс контейнера\n     */\n    className: PropTypes.string,\n    /**\n     * CSS-стили корневого элемента\n     */\n    style: PropTypes.object,\n    /**\n     * Функция, возвращающая React-элемент, `function (pageNumber: number) {}`\n     */\n    pageContainer: PropTypes.func,\n    /**\n     * Функция, вызывающая при изменении значения `function (event: object, newValue: number) {}`\n     */\n    onChange: PropTypes.func\n  }\n\n  static defaultProps = {\n    currentPage: 1\n  }\n\n  get pageContainer() {\n    return this.props.pageContainer || buttonContainer\n  }\n\n  handleChange = event => {\n    const {onChange, currentPage} = this.props\n    if (!onChange) return\n    event.preventDefault()\n    const pageNumber = +event.currentTarget.textContent\n    if (!pageNumber || currentPage === pageNumber) return\n    onChange(event, pageNumber)\n  }\n\n  renderPages() {\n    const {classes, pagesCount, currentPage, onChange} = this.props\n\n    const dots = '...'\n    const edgePages = 3\n    const aroundPages = 2\n\n    const leftPageNum = currentPage - aroundPages\n    const rightPageNum = currentPage + aroundPages\n    const startRange = edgePages\n    const endRange = pagesCount - edgePages + 1\n\n    let pages = []\n    for (let i = 1; i <= pagesCount; i++)\n      if (\n        // первая страница\n        i === 1 ||\n        // последняя страница\n        i === pagesCount ||\n        // в диапозоне `aroundPages` страниц до и после текущей страницы\n        (i >= leftPageNum && i <= rightPageNum) ||\n        // в диапозоне `edgePages` страниц с начала списка и при условии нахождения текущей страницы в этом диапозоне\n        (i <= startRange && currentPage <= startRange) ||\n        // в диапозоне `edgePages` страниц с конца списка и при условии нахождения текущей страницы в этом диапозоне\n        (i >= endRange && currentPage >= endRange)\n      )\n        pages.push(i)\n\n    // Если пропуск более 1 страницы, заполняем строкой `dots`, иначе номером пропущенной страницы\n    pages = pages.reduce((accumulator, pageNumber, index) => {\n      const prevPageNumber = index > 0 ? pages[index - 1] : null\n      if (!prevPageNumber || prevPageNumber + 1 === pageNumber)\n        return accumulator.concat(pageNumber)\n      if (prevPageNumber + 2 === pageNumber)\n        return accumulator.concat(pageNumber - 1, pageNumber)\n      return accumulator.concat(dots, pageNumber)\n    }, [])\n\n    let dotsCount = 0\n    return pages.map(pageNumber => {\n      const isPage = pageNumber !== dots\n      const isCurrentPage = currentPage === pageNumber\n      return cloneElement(\n        isPage ? this.pageContainer(pageNumber) : inactiveElement,\n        {\n          key: isPage ? pageNumber : dotsCount--,\n          className: classnames(\n            isPage ? classes.page : classes.dots,\n            isCurrentPage && classes.isSelected\n          ),\n          onClick: onChange ? this.handleChange : undefined\n        },\n        pageNumber\n      )\n    })\n  }\n\n  renderArrow(pageNumber, className, isDisabled, key) {\n    const {onChange, classes} = this.props\n    return cloneElement(\n      isDisabled ? inactiveElement : this.pageContainer(pageNumber),\n      {\n        onClick: onChange && !isDisabled ? this.handleChange : undefined,\n        className: classnames(className, isDisabled && classes.isDisabled),\n        key\n      },\n      !isDisabled && onChange ? pageNumber : null\n    )\n  }\n\n  render() {\n    const {\n      className,\n      classes,\n      currentPage,\n      pagesCount,\n      pageContainer, // eslint-disable-line no-unused-vars\n      onChange, // eslint-disable-line no-unused-vars\n      theme, // eslint-disable-line no-unused-vars\n      ...other\n    } = this.props\n\n    if (!(pagesCount > 1)) return null\n\n    const pages = this.renderPages()\n    const prevPageArrow = this.renderArrow(\n      currentPage - 1,\n      classes.prevArrow,\n      currentPage <= 1,\n      'prev'\n    )\n    const nextPageArrow = this.renderArrow(\n      currentPage + 1,\n      classes.nextArrow,\n      currentPage >= pagesCount,\n      'next'\n    )\n\n    return (\n      <div className={classnames(className, classes.root)} {...other}>\n        {prevPageArrow}\n        {pages}\n        {nextPageArrow}\n      </div>\n    )\n  }\n}\n"},826:function(n,e){n.exports="import Pagination from 'rambler-ui/Pagination'\nimport React, {Component} from 'react'\n\nexport default class PaginationExample extends Component {\n  state = {\n    page: 1\n  }\n\n  handleChange = (event, page) => {\n    this.setState({page})\n  }\n\n  render() {\n    return (\n      <div>\n        <h4>default</h4>\n        {[...Array(15)].map((item, index) => (\n          <div style={{marginBottom: 10}} key={index}>\n            <Pagination pagesCount={15} currentPage={index + 1} />\n          </div>\n        ))}\n        <div style={{marginTop: 40}}>\n          <h4>\n            pageContainer:{' '}\n            <code>{'(pageNumber) => <a href={`#${pageNumber}`} />'}</code>\n          </h4>\n          <Pagination\n            pagesCount={9999}\n            currentPage={this.state.page}\n            onChange={this.handleChange}\n            pageContainer={pageNumber => <a href={`#${pageNumber}`} />}\n          />\n        </div>\n        <div style={{marginTop: 40}}>\n          this.state.page: <b>{this.state.page}</b>\n        </div>\n      </div>\n    )\n  }\n}\n"}}]);