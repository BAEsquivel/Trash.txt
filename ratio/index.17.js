(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{215:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.meta=void 0;var s=d(t(2)),i=t(528),a=d(t(529)),l=d(t(531)),o=d(t(530)),r=d(t(818)),u=d(t(817)),c=d(t(618));function d(n){return n&&n.__esModule?n:{default:n}}var p=e.meta={title:"Select",toc:["Пример","Свойства  <Select />","Свойства  <MenuItem />"]},h=s.default.createElement(l.default,{code:r.default}),m=s.default.createElement(o.default,{code:u.default}),v=s.default.createElement(o.default,{code:c.default});e.default=function(n){var e=n.components,t=function(n,e){var t={};for(var s in n)e.indexOf(s)>=0||Object.prototype.hasOwnProperty.call(n,s)&&(t[s]=n[s]);return t}(n,["components"]);return s.default.createElement(i.MDXTag,{name:"wrapper",Layout:(0,a.default)(p)(function(n){return n.children}),layoutProps:t,components:e},s.default.createElement(i.MDXTag,{name:"h3",components:e},"Пример"),h,s.default.createElement(i.MDXTag,{name:"h3",components:e},"Свойства ",s.default.createElement(i.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<Select />")),m,s.default.createElement(i.MDXTag,{name:"h3",components:e},"Свойства ",s.default.createElement(i.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<MenuItem />")),v)}},618:function(n,e){n.exports="import React, {PureComponent} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {ENTER} from '../constants/keys'\nimport {injectSheet} from '../theme'\nimport {isolateMixin} from '../utils/mixins'\nimport EventEmitter from 'events'\nimport uuid from '../utils/uuid'\nimport {MENU_ITEM_CONTEXT} from '../constants/context'\n\n@injectSheet(\n  theme => ({\n    root: {\n      extend: isolateMixin,\n      fontFamily: theme.fontFamily,\n      boxSizing: 'border-box',\n      display: 'flex',\n      alignItems: 'center',\n      flexWrap: 'wrap',\n      paddingLeft: theme.menu.padding,\n      paddingRight: theme.menu.padding,\n      outline: 0,\n      fontSize: theme.menu.fontSize,\n      lineHeight: theme.menu.lineHeight + 'px'\n    },\n    ...['medium', 'small'].reduce(\n      (result, size) => ({\n        ...result,\n        [size]: {\n          minHeight: theme.menu.sizes[size].height,\n          paddingTop:\n            (theme.menu.sizes[size].height - theme.menu.lineHeight) / 2,\n          paddingBottom:\n            (theme.menu.sizes[size].height - theme.menu.lineHeight) / 2\n        }\n      }),\n      {}\n    ),\n    isEnabled: {\n      color: theme.menu.colors.default.text,\n      backgroundColor: theme.menu.colors.default.background,\n      cursor: 'pointer',\n      '&:hover': {\n        color: theme.menu.colors.hover.text,\n        backgroundColor: theme.menu.colors.hover.background\n      },\n      '&:focus': {\n        color: theme.menu.colors.focus.text,\n        background: theme.menu.colors.focus.background\n      },\n      '&:active': {\n        color: theme.menu.colors.active.text,\n        background: theme.menu.colors.active.background\n      }\n    },\n    isSelected: {\n      color: theme.menu.colors.selected.text\n    },\n    isDisabled: {\n      color: theme.menu.colors.disabled.text,\n      background: theme.menu.colors.disabled.background,\n      cursor: 'not-allowed'\n    }\n  }),\n  {name: 'MenuItem'}\n)\nclass MenuItem extends PureComponent {\n  static propTypes = {\n    /**\n     * Дополнительный CSS-класс\n     */\n    className: PropTypes.string,\n    /**\n     * Inline-стили\n     */\n    style: PropTypes.object,\n    /**\n     * Значение опции, по-умолчанию считается, что это примитив\n     */\n    value: PropTypes.any.isRequired,\n    /**\n     * Контент опции\n     */\n    children: PropTypes.node.isRequired\n  }\n\n  static contextTypes = {\n    [MENU_ITEM_CONTEXT]: PropTypes.shape({\n      /**\n       * Проверка, выбрано ли значение (args: value)\n       */\n      isValueSelected: PropTypes.func,\n      /**\n       * Проверка, в фокусе ли значение (args: key)\n       */\n      isItemFocused: PropTypes.func,\n      /**\n       * Проверка, не активно ли меню\n       */\n      isMenuDisabled: PropTypes.func,\n      /**\n       * Получение размера меню\n       */\n      getMenuSize: PropTypes.func,\n      /**\n       * Шина событий\n       * onPropsChange - изменение значений props в Menu, влияющих на отображение опций\n       * onItemSelect - клик по MenuItem (args: value)\n       * onItemFocus - фокус на MenuItem (args: id)\n       * onItemMount - добавление и обновление MenuItem (args: id, componentInstanseRef)\n       * onItemUnmount - удаление MenuItem (args: id)\n       */\n      events: PropTypes.instanceOf(EventEmitter)\n    })\n  }\n\n  id = uuid()\n\n  get ctx() {\n    return this.context[MENU_ITEM_CONTEXT]\n  }\n\n  componentDidMount() {\n    this.ctx.events.on('onPropsChange', this.handlePropsChange)\n    this.ctx.events.emit('onItemMount', this.id, this)\n    if (this.ctx.isItemFocused(this.id)) this.item.focus()\n  }\n\n  componentDidUpdate() {\n    if (this.ctx.isItemFocused(this.id)) this.item.focus()\n  }\n\n  componentWillUnmount() {\n    this.ctx.events.removeListener('onPropsChange', this.handlePropsChange)\n    this.ctx.events.emit('onItemUnmount', this.id)\n  }\n\n  handlePropsChange = () => {\n    const {props, ctx} = this\n    if (\n      ctx.isValueSelected(props.value) !== this.isSelected ||\n      ctx.isItemFocused(this.id) !== this.isFocused ||\n      ctx.isMenuDisabled() !== this.disabled ||\n      ctx.getMenuSize() !== this.size\n    )\n      this.forceUpdate()\n  }\n\n  handleFocus = () => {\n    this.ctx.events.emit('onItemFocus', this.id)\n  }\n\n  handleSelect = () => {\n    this.ctx.events.emit('onItemSelect', this.props.value)\n  }\n\n  handlePressKey = event => {\n    if (event.keyCode === ENTER) {\n      event.stopPropagation()\n      this.item.focus()\n      this.handleSelect()\n    }\n  }\n\n  saveRef = ref => {\n    this.item = ref\n  }\n\n  render() {\n    const {\n      className,\n      style,\n      value,\n      classes,\n      children,\n      theme, // eslint-disable-line no-unused-vars\n      ...other\n    } = this.props\n    this.isSelected = this.ctx.isValueSelected(value)\n    this.isFocused = this.ctx.isItemFocused(this.id)\n    this.disabled = this.ctx.isMenuDisabled()\n    this.size = this.ctx.getMenuSize()\n\n    return (\n      <div\n        {...other}\n        ref={this.saveRef}\n        style={style}\n        className={classnames(\n          className,\n          classes.root,\n          this.size && classes[this.size],\n          this.disabled ? classes.isDisabled : classes.isEnabled,\n          this.isSelected && classes.isSelected\n        )}\n        tabIndex={this.disabled ? null : 0}\n        onFocus={this.disabled ? null : this.handleFocus}\n        onClick={this.disabled ? null : this.handleSelect}\n        onKeyDown={this.disabled ? null : this.handlePressKey}\n        data-menu-item-id={this.id}>\n        {children}\n      </div>\n    )\n  }\n}\n\nMenuItem.displayName = 'ruiMenuItem'\n\nexport default MenuItem\n"},817:function(n,e){n.exports="import React, {PureComponent, createElement, cloneElement} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport Menu from '../Menu/Menu'\nimport Input from '../Input'\nimport {TagsInput, TagsInputItem} from '../TagsInput'\nimport Dropdown from '../Dropdown'\nimport OnClickOutside from '../OnClickOutside'\nimport {\n  TAB,\n  UP,\n  DOWN,\n  ESCAPE,\n  BACKSPACE,\n  DELETE,\n  ENTER\n} from '../constants/keys'\nimport {injectSheet} from '../theme'\nimport {isolateMixin, placeholderMixin} from '../utils/mixins'\nimport {ios, android} from '../utils/browser'\nimport ClearIconSmall from './ClearIconSmall'\n\nconst isNativeSelectAllowed = ios || android\n\nconst emptyArr = []\nconst noop = () => {}\n\nconst absolutePosition = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  right: 0,\n  bottom: 0\n}\n\n/* Prevent strange behaviour of onChange event in multiple select */\n/* http://stackoverflow.com/questions/34660500/mobile-safari-multi-select-bug */\nconst multipleSelectFix = <optgroup disabled hidden />\n\n@injectSheet(\n  theme => ({\n    root: {\n      extend: isolateMixin,\n      position: 'relative',\n      '&:hover, &$isFocused': {\n        '& $arrow': {\n          color: theme.field.colors.focus.arrow\n        }\n      },\n      '&$isDisabled': {\n        cursor: 'not-allowed',\n        '& $input': {\n          pointerEvents: 'none'\n        },\n        '& $arrow': {\n          color: theme.field.colors.disabled.arrow + '!important',\n          pointerEvents: 'none'\n        }\n      },\n      ...placeholderMixin(\n        '&$isReadonly:not($lightPlaceholder):not($isDisabled) $input input',\n        {\n          opacity: 1,\n          color: theme.field.colors.default.text\n        }\n      ),\n      ...placeholderMixin(\n        '&:not($isFocused):not($lightPlaceholder):not($isDisabled) $input input',\n        {\n          opacity: 1,\n          color: theme.field.colors.default.text\n        }\n      )\n    },\n    dropdownContainer: {\n      '&&': {\n        display: 'block'\n      },\n      '$isMultipleWithoutSearch &': {\n        extend: absolutePosition,\n        bottom: null\n      }\n    },\n    icon: {\n      '$isMultipleWithoutSearch &': {\n        top: 'auto',\n        bottom: 'auto',\n        margin: 0,\n        transform: 'translateY(-50%)'\n      }\n    },\n    arrow: {\n      cursor: 'pointer',\n      textAlign: 'center',\n      lineHeight: 0,\n      color: theme.field.colors.default.arrow,\n      '&:empty': {\n        '&:after': {\n          height: 8,\n          width: 8,\n          position: 'absolute',\n          borderStyle: 'solid',\n          borderWidth: '0 0 1px 1px',\n          content: '\"\"',\n          pointerEvents: 'none',\n          transform: 'rotate(-45deg) translateY(50%)'\n        }\n      },\n      '& svg': {\n        extend: absolutePosition,\n        margin: 'auto',\n        maxWidth: '100%',\n        maxHeight: '100%'\n      }\n    },\n    input: {\n      '$withCustom &': absolutePosition\n    },\n    field: {\n      '$isReadonly &': {\n        cursor: 'pointer',\n        userSelect: 'none'\n      },\n      '$withSearch &': {\n        cursor: 'text'\n      },\n      '$withCustom &&': {\n        extend: absolutePosition,\n        height: '100%'\n      }\n    },\n    withCustom: {\n      position: 'relative'\n    },\n    custom: {\n      position: 'relative',\n      pointerEvents: 'none'\n    },\n    options: {\n      composes: '$custom'\n    },\n    dropdown: {\n      '&&': {\n        boxShadow: 'none',\n        border: `1px solid ${theme.field.colors.default.outline}`,\n        borderBottom: 0,\n        '&$isMultipleDropdown': {\n          transitionProperty: 'opacity',\n          top: '0 !important'\n        }\n      }\n    },\n    selected: {\n      borderBottom: `1px solid ${theme.field.colors.default.outline}`,\n      cursor: 'default'\n    },\n    menu: {\n      borderBottom: `1px solid ${theme.field.colors.default.outline}`,\n      '$medium &': {\n        maxHeight: theme.menu.sizes.medium.height * 4 + 2\n      },\n      '$small &': {\n        maxHeight: theme.menu.sizes.small.height * 4 + 2\n      }\n    },\n    clear: {\n      flex: 'none',\n      alignSelf: 'center',\n      color: theme.field.icon.colors.default,\n      fill: 'currentColor',\n      marginTop: 1,\n      marginLeft: 1,\n      cursor: 'pointer',\n      pointerEvents: 'auto',\n      '&:hover , &:active': {\n        color: theme.field.icon.colors.active\n      }\n    },\n    ...['medium', 'small'].reduce(\n      (result, size) => ({\n        ...result,\n        [size]: {\n          '&$isMultipleWithoutSearch': {\n            height: theme.field.sizes[size].height\n          },\n          '&$isMultipleWithoutSearch $icon': {\n            top: theme.field.sizes[size].height / 2\n          },\n          '& $withCustom': {\n            minHeight: theme.field.sizes[size].height\n          },\n          '& $arrow': {\n            '&:before': {\n              display: 'block',\n              content: '\" \"',\n              position: 'absolute',\n              top: -Math.floor(\n                (theme.field.sizes[size].height -\n                  theme.field.sizes[size].icon) /\n                  2\n              ),\n              bottom: -Math.floor(\n                (theme.field.sizes[size].height -\n                  theme.field.sizes[size].icon) /\n                  2\n              ),\n              left: -10,\n              right: -10\n            },\n            '&:empty:after': {\n              top: size === 'small' ? -2 : -1,\n              left: size === 'small' ? 1 : 1\n            }\n          },\n          '&$isOpened $arrow:empty:after': {\n            transform: 'rotate(45deg) translateY(-50%) scaleY(-1)',\n            top: size === 'small' ? 9 : 9,\n            left: size === 'small' ? 1 : 1\n          },\n          '& $custom': {\n            paddingRight: theme.input.sizes[size].padding + 1,\n            paddingLeft: theme.input.sizes[size].padding + 1\n          },\n          '&$withLeftIcon $custom': {\n            paddingLeft: theme.field.sizes[size].withIconPadding + 1\n          },\n          '&$withRightIcon $custom': {\n            paddingRight: theme.field.sizes[size].withIconPadding + 1\n          },\n          '& $options': {\n            paddingTop:\n              (theme.field.sizes[size].height - theme.tagsInput.height) / 2,\n            paddingBottom:\n              (theme.field.sizes[size].height - theme.tagsInput.height) / 2\n          },\n          '& $selected': {\n            padding: `${(theme.field.sizes[size].height -\n              theme.tagsInput.height) /\n              2 -\n              1}px ${theme.input.sizes[size].padding - 1}px`\n          }\n        }\n      }),\n      {}\n    ),\n    isNative: {\n      '& $icon': {\n        pointerEvents: 'none'\n      }\n    },\n    nativeSelect: {\n      extend: [isolateMixin, absolutePosition],\n      width: '100%',\n      height: '100%',\n      opacity: 0,\n      overflow: 'hidden',\n      outline: 0\n    },\n    isFocused: {},\n    isOpened: {},\n    isReadonly: {},\n    isDisabled: {},\n    isMultipleWithoutSearch: {},\n    isMultipleDropdown: {},\n    withSearch: {},\n    withLeftIcon: {},\n    withRightIcon: {},\n    lightPlaceholder: {}\n  }),\n  {name: 'Select'}\n)\nexport default class Select extends PureComponent {\n  static propTypes = {\n    /**\n     * Дополнительный CSS-класс поля\n     */\n    className: PropTypes.string,\n    /**\n     * Inline-стили поля\n     */\n    style: PropTypes.object,\n    /**\n     * Дополнительный CSS-класс `<Dropdown />`\n     */\n    dropdownClassName: PropTypes.string,\n    /**\n     * Inline-стили `<Dropdown />`\n     */\n    dropdownStyle: PropTypes.object,\n    /**\n     * Дополнительный CSS-класс `<Menu />`\n     */\n    menuClassName: PropTypes.string,\n    /**\n     * Inline-стили `<Menu />`\n     */\n    menuStyle: PropTypes.object,\n    /**\n     * Множественный выбор\n     */\n    multiple: PropTypes.bool,\n    /**\n     * Показывать кнопку очистки инпута\n     */\n    clearIcon: PropTypes.bool,\n    /**\n     * Дополнительный CSS-класс кнопки со стрелкой\n     */\n    arrowClassName: PropTypes.string,\n    /**\n     * Inline-стили кнопки со стрелкой\n     */\n    arrowStyle: PropTypes.object,\n    /**\n     * Выбранное значение, по-умолчанию считается, что это примитив. В случае множественного выбора - массив выбранных значений.\n     */\n    value: PropTypes.any,\n    /**\n     * Проверка равенства значений, задается, если\n     * значением является объект. Ожидается, что возвращает `Boolean`\n     */\n    valuesEquality: PropTypes.func,\n    /**\n     * Функция рендера выбранного значения в поле, задается, если\n     * значением является объект. Ожидается, что возвращает `String`\n     */\n    inputValueRenderer: PropTypes.func,\n    /**\n     * Плэйсхолдер\n     */\n    placeholder: PropTypes.string,\n    /**\n     * Светлый плейсхолдер, как в компоненте `<Input />`\n     */\n    lightPlaceholderColor: PropTypes.bool,\n    /**\n     * Доступность элемента\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Опции поля, массив элементов\n     */\n    children: PropTypes.arrayOf(PropTypes.element),\n    /**\n     * Иконка\n     */\n    icon: PropTypes.node,\n    /**\n     * Иконка стрелки\n     */\n    arrowIcon: PropTypes.node,\n    /**\n     * Размер\n     */\n    size: PropTypes.oneOf(['small', 'medium']),\n    /**\n     * Разновидность инпута\n     */\n    variation: PropTypes.oneOf(['regular', 'awesome', 'promo']),\n    /**\n     * Статусы валидации\n     */\n    status: PropTypes.oneOf(['error', 'warning', 'success', 'filled', null]),\n    /**\n     * Вставлять ли dropdown внутри body\n     */\n    appendToBody: PropTypes.bool,\n    /**\n     * Коллбек вызывающийся при фокусе\n     */\n    onFocus: PropTypes.func,\n    /**\n     * Коллбек вызывающийся при блюре\n     */\n    onBlur: PropTypes.func,\n    /**\n     * Коллбек вызывающийся при изменении состояния\n     */\n    onChange: PropTypes.func,\n    /**\n     * Коллбек вызывающийся при изменении поискового запроса\n     */\n    onSearch: PropTypes.func,\n    /**\n     * Функция рендера кастомного элемента над input, получает `value` в качестве значения.\n     * Должна возвращать `reactElement`.\n     */\n    customElementRenderer: PropTypes.func,\n    /**\n     * Дополнительный CSS-класс корневого контейнера\n     */\n    rootClassName: PropTypes.string,\n    /**\n     * Inline-стили корневого контейнера\n     */\n    rootStyle: PropTypes.object,\n    /**\n     * Дополнительный CSS-класс контейнера кастомного элемента и `<Input>`\n     */\n    containerClassName: PropTypes.string,\n    /**\n     * Inline-стили контейнера кастомного элемента и `<Input>`\n     */\n    containerStyle: PropTypes.object,\n    /**\n     * Позволяет вводить произвольное значение в поле, ожидается, что `value` типа `String`\n     */\n    inputMode: PropTypes.bool,\n    /**\n     * Применить логику выбора опций нативного select'a на мобильных устройствах.\n     * При использовании `onSearch` - не применяется.\n     * `<MenuItem>` в качестве `children` должен принимать элемент типа `String`\n     */\n    native: PropTypes.bool\n  }\n\n  static defaultProps = {\n    value: null,\n    multiple: false,\n    clearIcon: false,\n    status: null,\n    size: 'medium',\n    variation: 'awesome',\n    disabled: false,\n    appendToBody: false,\n    inputMode: false,\n    valuesEquality: (a, b) => a === b,\n    inputValueRenderer: value => value,\n    onFocus: () => {},\n    onBlur: () => {},\n    onChange: () => {}\n  }\n\n  state = {\n    isOpened: false,\n    inputFocused: false,\n    searchText: '',\n    value: this.initialValue\n  }\n\n  get initialValue() {\n    const {multiple, value} = this.props\n    return multiple\n      ? Array.isArray(value)\n        ? value\n        : emptyArr\n      : value || undefined\n  }\n\n  get showArrow() {\n    const {children, clearIcon} = this.props\n    return children && children.length > 0 && !clearIcon\n  }\n\n  get showClearIcon() {\n    const {multiple, clearIcon} = this.props\n    return !multiple && clearIcon && !this.isValueEmpty(this.state.value)\n  }\n\n  componentWillReceiveProps({value}) {\n    this.setValue(value)\n  }\n\n  handleDropdownClose = () => {\n    if (this.state.isOpened || this.props.inputMode) return\n    this.setSearchText('')\n  }\n\n  setValue(value) {\n    const {valuesEquality, multiple} = this.props\n    const oldValue = this.state.value\n    if (multiple) {\n      const currValue = Array.isArray(oldValue) ? oldValue : emptyArr\n      const nextValue = Array.isArray(value) ? value : emptyArr\n      if (\n        nextValue.length === currValue.length &&\n        nextValue.every((item, index) => valuesEquality(item, currValue[index]))\n      )\n        return\n    } else if (valuesEquality(value, oldValue)) {\n      return\n    }\n    this.setState({\n      value\n    })\n  }\n\n  setSearchText(searchText) {\n    if (this.state.searchText === searchText) return\n    this.setState({\n      searchText\n    })\n    if (this.props.onSearch) this.props.onSearch(searchText)\n  }\n\n  requestItems = event => {\n    this.setState({\n      isOpened: true\n    })\n    this.setSearchText(event.target.value)\n  }\n\n  changeValue = value => {\n    const {multiple, inputMode, onChange} = this.props\n    if (!multiple) this.setState({isOpened: false})\n    if (inputMode) this.setSearchText(value || '')\n    this.setValue(value)\n    onChange(value)\n    if (!inputMode && !multiple) this.input.focus()\n  }\n\n  focusInput = event => {\n    this.setState({\n      inputFocused: true\n    })\n    if (!this.state.isOpened) this.props.onFocus(event)\n  }\n\n  blurInput = event => {\n    if (!this.state.inputFocused) return\n    const {inputMode, onBlur} = this.props\n    this.setState({\n      isOpened: false,\n      inputFocused: false\n    })\n    if (inputMode) this.changeValue(this.state.searchText)\n    onBlur(event)\n  }\n\n  preventBlurInput = event => {\n    event.preventDefault()\n  }\n\n  preventSelect = event => {\n    event.preventDefault()\n    event.stopPropagation()\n  }\n\n  open = () => {\n    if (this.props.disabled || this.state.isOpened) return\n    this.setState({isOpened: true})\n    setTimeout(() => {\n      this.input.focus()\n    }, 0)\n  }\n\n  close = () => {\n    if (!this.state.isOpened) return\n    this.setState({isOpened: false})\n  }\n\n  openOnArrowClick = () => {\n    const {isOpened} = this.state\n    if (isOpened) this.close()\n    else this.open()\n  }\n\n  openOnArrowKey(event) {\n    event.preventDefault()\n\n    if (!this.state.isOpened)\n      this.setState({\n        isOpened: true\n      })\n\n    setTimeout(() => {\n      this.setState({\n        inputFocused: false\n      })\n    }, 0)\n  }\n\n  onClear = () => {\n    this.setSearchText('')\n    this.changeValue(null)\n  }\n\n  clearValueOnBackspace() {\n    const {searchText, inputFocused} = this.state\n    if (this.props.onSearch && inputFocused && searchText === '')\n      this.changeValue(null)\n  }\n\n  closeOnEsc = event => {\n    if (!this.state.isOpened) return\n    event.stopPropagation()\n    this.setState({\n      isOpened: false\n    })\n    this.input.focus()\n  }\n\n  saveInputRef = ref => {\n    this.input = ref\n  }\n\n  closeOnClickOutside = event => {\n    const {isOpened, inputFocused} = this.state\n    if (!isOpened || inputFocused) return\n    this.setState({\n      isOpened: false,\n      inputFocused: false\n    })\n    this.props.onBlur(event)\n  }\n\n  keyDown = event => {\n    const code = event.keyCode\n    const {inputMode, multiple, customElementRenderer} = this.props\n    if (code === ESCAPE) this.closeOnEsc(event)\n    else if (code === TAB)\n      this.setState({\n        isOpened: false\n      })\n    else if (code === UP || code === DOWN) this.openOnArrowKey(event)\n    else if (inputMode && code === ENTER)\n      this.changeValue(this.state.searchText)\n    else if (\n      !multiple &&\n      !customElementRenderer &&\n      (code === DELETE || code === BACKSPACE)\n    )\n      this.clearValueOnBackspace(event)\n  }\n\n  isValueEmpty(value) {\n    return value == null || value === ''\n  }\n\n  getInputProps() {\n    const {\n      /* eslint-disable no-unused-vars */\n      className,\n      style,\n      placeholder,\n      icon,\n      onSearch,\n      dropdownClassName,\n      dropdownStyle,\n      menuClassName,\n      menuStyle,\n      valuesEquality,\n      children,\n      value,\n      appendToBody,\n      classes,\n      onFocus,\n      onBlur,\n      onChange,\n      inputValueRenderer,\n      customElementRenderer,\n      multiple,\n      theme,\n      arrowClassName,\n      arrowStyle,\n      arrowIcon,\n      containerStyle,\n      containerClassName,\n      rootStyle,\n      rootClassName,\n      native,\n      clearIcon,\n      inputMode,\n      lightPlaceholderColor,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props\n    return props\n  }\n\n  Arrow = props => {\n    const {arrowStyle, arrowClassName, arrowIcon, classes} = this.props\n    const {\n      className,\n      size, // eslint-disable-line no-unused-vars\n      color, // eslint-disable-line no-unused-vars\n      ...otherProps\n    } = props\n    return (\n      <div\n        style={arrowStyle}\n        className={classnames(className, classes.arrow, arrowClassName)}\n        {...otherProps}>\n        {arrowIcon}\n      </div>\n    )\n  }\n\n  Clear = () => (\n    <ClearIconSmall\n      className={this.props.classes.clear}\n      size={15}\n      color=\"currentColor\"\n      onMouseDown={this.preventBlurInput}\n      onClick={this.onClear}\n    />\n  )\n\n  renderSelectedItems() {\n    const selected = Array.isArray(this.props.value)\n      ? this.props.value\n      : emptyArr\n    return selected.map(item => {\n      const text = this.props.inputValueRenderer(item)\n      return (\n        <TagsInputItem value={item} key={text}>\n          {text}\n        </TagsInputItem>\n      )\n    })\n  }\n\n  renderInput() {\n    const {value, searchText, isOpened, inputFocused} = this.state\n\n    const {\n      className,\n      style,\n      classes,\n      placeholder,\n      icon,\n      onSearch,\n      multiple,\n      inputValueRenderer,\n      customElementRenderer,\n      inputMode\n    } = this.props\n\n    const focusedInput = inputFocused || isOpened\n\n    if (inputMode && value != null && typeof value !== 'string')\n      throw new Error('In `inputMode` value of <Select /> should be a string')\n\n    let resultInputValue = ''\n    if ((onSearch || inputMode) && focusedInput && isOpened) {\n      resultInputValue = searchText\n    } else if (!multiple && !customElementRenderer) {\n      const inputValue = inputValueRenderer(value)\n      resultInputValue = this.isValueEmpty(inputValue) ? '' : inputValue\n    }\n\n    let resultPlaceholder = ''\n    if (customElementRenderer) {\n      if (this.isValueEmpty(value) || (isOpened && !!onSearch))\n        resultPlaceholder = placeholder\n    } else if (multiple) {\n      const withValue = Array.isArray(value) && value.length > 0\n      if ((isOpened && onSearch) || !withValue) resultPlaceholder = placeholder\n    } else {\n      const inputValue = inputValueRenderer(value)\n      resultPlaceholder =\n        this.isValueEmpty(inputValue) || (inputMode && searchText === '')\n          ? placeholder\n          : onSearch && !inputMode && focusedInput && searchText === ''\n            ? inputValue\n            : ''\n    }\n\n    const canBeModified =\n      (inputMode || !!onSearch) &&\n      ((!customElementRenderer && !multiple) ||\n        (customElementRenderer && (isOpened || this.isValueEmpty(value))) ||\n        (multiple && (isOpened || !Array.isArray(value) || value.length === 0)))\n\n    const rightIcon = this.showClearIcon\n      ? createElement(this.Clear)\n      : this.showArrow &&\n        createElement(this.Arrow, {\n          role: 'button',\n          onMouseDown: this.preventBlurInput,\n          onClick: this.openOnArrowClick\n        })\n\n    return (\n      <Input\n        {...this.getInputProps()}\n        inputStyle={style}\n        className={classes.input}\n        iconLeft={icon}\n        iconRight={rightIcon}\n        iconRightClassName={classes.icon}\n        onKeyDown={this.keyDown}\n        onClick={this.open}\n        onFocus={this.focusInput}\n        onBlur={this.blurInput}\n        onTouchStart={onSearch ? undefined : this.open}\n        onTouchEnd={onSearch ? undefined : this.preventSelect}\n        inputClassName={classnames(className, classes.field)}\n        placeholder={resultPlaceholder}\n        readOnly={!canBeModified}\n        value={resultInputValue}\n        onChange={this.requestItems}\n        inputRef={this.saveInputRef}\n      />\n    )\n  }\n\n  renderSelect() {\n    const {value, inputFocused, isOpened} = this.state\n\n    const {\n      dropdownStyle,\n      dropdownClassName,\n      containerStyle,\n      containerClassName,\n      rootStyle,\n      rootClassName,\n      customElementRenderer,\n      menuStyle,\n      menuClassName,\n      valuesEquality,\n      onSearch,\n      inputMode,\n      children,\n      appendToBody,\n      multiple,\n      disabled,\n      size,\n      icon,\n      classes,\n      lightPlaceholderColor\n    } = this.props\n\n    const focusedInput = inputFocused || isOpened\n    const multipleWithValue =\n      multiple && Array.isArray(value) && value.length > 0\n    const options = multipleWithValue ? this.renderSelectedItems() : null\n    const canBeModified = !!onSearch || inputMode\n\n    const resultClassName = classnames(\n      rootClassName,\n      classes.root,\n      !disabled && !canBeModified && classes.isReadonly,\n      !disabled && canBeModified && classes.withSearch,\n      icon && classes.withLeftIcon,\n      this.showArrow && classes.withRightIcon,\n      size && classes[size],\n      disabled && classes.isDisabled,\n      isOpened && classes.isOpened,\n      focusedInput && classes.isFocused,\n      lightPlaceholderColor && classes.lightPlaceholder,\n      multiple && !onSearch && classes.isMultipleWithoutSearch\n    )\n\n    const dropdownResultClassName = classnames(\n      dropdownClassName,\n      classes.dropdown,\n      multiple && classes.isMultipleDropdown\n    )\n\n    let customElement = null\n    if (customElementRenderer) {\n      if (!this.isValueEmpty(value) && !(isOpened && onSearch))\n        customElement = cloneElement(customElementRenderer(value), {\n          className: classes.custom\n        })\n    } else if (multipleWithValue && (!isOpened || !onSearch)) {\n      customElement = (\n        <TagsInput\n          className={classes.options}\n          onChange={this.changeValue}\n          isExpanded={!isOpened || onSearch ? false : true}>\n          {options}\n        </TagsInput>\n      )\n    }\n\n    const dropdownAnchor = (\n      <div\n        className={classnames(\n          containerClassName,\n          (multiple || customElementRenderer) && classes.withCustom\n        )}\n        style={containerStyle}>\n        {this.renderInput()}\n        {customElement}\n      </div>\n    )\n\n    const resultIsOpened =\n      isOpened &&\n      (children.length > 0 ||\n        (multiple && Array.isArray(value) && value.length > 0))\n\n    return (\n      <OnClickOutside handler={this.closeOnClickOutside}>\n        <div className={resultClassName} style={rootStyle}>\n          <Dropdown\n            isOpened={resultIsOpened}\n            anchor={dropdownAnchor}\n            padding={false}\n            style={dropdownStyle}\n            className={dropdownResultClassName}\n            overlayClassName={classes.dropdownContainer}\n            appendToBody={appendToBody}\n            anchorFullWidth={true}\n            autoPositionY={false}\n            anchorPointY=\"bottom\"\n            contentPointY=\"top\"\n            closeOnClickOutside={false}\n            cachePositionOptions={false}\n            onClose={this.handleDropdownClose}>\n            {multipleWithValue &&\n              onSearch && (\n                <TagsInput\n                  className={classes.selected}\n                  onChange={this.changeValue}\n                  isExpanded={true}\n                  onMouseDown={this.preventBlurInput}\n                  size={size}>\n                  {options}\n                </TagsInput>\n              )}\n            {children.length > 0 && (\n              <Menu\n                style={menuStyle}\n                className={classnames(menuClassName, classes.menu)}\n                autoFocus={resultIsOpened && !inputFocused}\n                value={\n                  multiple ? (Array.isArray(value) ? value : emptyArr) : value\n                }\n                valuesEquality={valuesEquality}\n                onChange={this.changeValue}\n                onMouseDown={this.preventBlurInput}\n                onEscKeyDown={this.closeOnEsc}\n                multiple={multiple}\n                size={size}>\n                {children}\n              </Menu>\n            )}\n          </Dropdown>\n        </div>\n      </OnClickOutside>\n    )\n  }\n\n  handleNativeSelectChange = ({target}) => {\n    const nextValue = this.props.multiple\n      ? Array.prototype.map.call(\n        target.selectedOptions,\n        item => this.values[item.value]\n      )\n      : this.values[target.value]\n    this.setValue(nextValue)\n    this.props.onChange(nextValue)\n  }\n\n  renderNativeSelect() {\n    const {\n      placeholder,\n      disabled,\n      multiple,\n      children,\n      size,\n      icon,\n      valuesEquality,\n      inputValueRenderer,\n      className,\n      classes,\n      rootStyle,\n      rootClassName,\n      lightPlaceholderColor\n    } = this.props\n\n    const {value, inputFocused} = this.state\n\n    let resultValue = multiple ? [] : ''\n    this.values = []\n    const options = []\n    React.Children.forEach(children, (item, index) => {\n      const {children} = item.props\n      if (item.type.displayName !== 'ruiMenuItem')\n        throw new Error('Child component should be instance of <MenuItem />')\n      if (typeof children !== 'string')\n        throw new Error('Children of <MenuItem /> should be a string')\n      options[index] = (\n        <option key={children} value={index}>\n          {children}\n        </option>\n      )\n      this.values[index] = item.props.value\n      if (multiple) {\n        if (\n          value.some(selectedItem =>\n            valuesEquality(selectedItem, item.props.value)\n          )\n        )\n          resultValue.push(index)\n      } else if (valuesEquality(value, item.props.value)) {\n        resultValue = index\n      }\n    })\n\n    const selectedOptions =\n      multiple &&\n      Array.isArray(value) &&\n      value.length > 0 &&\n      this.renderSelectedItems()\n\n    const resultClassName = classnames(\n      rootClassName,\n      classes.root,\n      classes.isNative,\n      classes.withRightIcon,\n      icon && classes.withLeftIcon,\n      size && classes[size],\n      disabled && classes.isDisabled,\n      inputFocused && classes.isFocused,\n      multiple && classes.isMultipleWithoutSearch,\n      multiple && classes.withCustom,\n      lightPlaceholderColor && classes.lightPlaceholder\n    )\n\n    return (\n      <div className={resultClassName} style={rootStyle}>\n        <Input\n          className={classes.input}\n          inputClassName={classnames(className, classes.field)}\n          disabled={disabled}\n          onChange={noop}\n          value={multiple ? '' : inputValueRenderer(value) || ''}\n          iconLeft={icon}\n          iconRight={createElement(this.Arrow)}\n          iconRightClassName={classes.icon}\n          tabIndex={-1}\n          readOnly={true}\n          placeholder={selectedOptions ? null : placeholder}\n          isFocused={inputFocused}\n        />\n        {selectedOptions && (\n          <TagsInput className={classes.options} size={size}>\n            {selectedOptions}\n          </TagsInput>\n        )}\n        <select\n          {...this.getInputProps()}\n          className={classes.nativeSelect}\n          multiple={multiple}\n          value={resultValue}\n          onChange={this.handleNativeSelectChange}\n          onBlur={this.blurInput}\n          onFocus={this.focusInput}>\n          {placeholder ? (\n            <option disabled value=\"\">\n              {placeholder}\n            </option>\n          ) : (\n            multiple && multipleSelectFix\n          )}\n          {options}\n        </select>\n      </div>\n    )\n  }\n\n  render() {\n    return this.props.native && isNativeSelectAllowed && !this.props.onSearch\n      ? this.renderNativeSelect()\n      : this.renderSelect()\n  }\n}\n"},818:function(n,e){n.exports="import React, {Component} from 'react'\nimport Button from 'rambler-ui/Button'\nimport {Popup} from 'rambler-ui/Popup'\nimport Tooltip from 'rambler-ui/Tooltip'\nimport Loader from 'rambler-ui/Loader'\nimport Select from 'rambler-ui/Select'\nimport {MenuItem} from 'rambler-ui/Menu'\nimport PhoneIcon from 'rambler-ui/icons/forms/PhoneIcon'\nimport EllipsisIcon from 'rambler-ui/icons/forms/EllipsisIcon'\n\nconst data = [...Array(5)].map((item, i) => `Foo${i}`)\n\n/* eslint-disable no-useless-escape */\nconst regexEmail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n\nconst customData = ['Foo', 'Bar', 'Baz'].map(category => ({\n  category,\n  items: [...Array(5)].map((item, i) => `${category}${i}`)\n}))\n\nconst objectData = [...Array(15)].map((item, i) => ({\n  id: i,\n  key: `Baz${i}`\n}))\n\nconst objectCustomData = [...Array(15)].map((item, i) => ({\n  id: i,\n  str1: `Строка 1 элемента ${i}`,\n  str2: `Строка 2 элемента ${i}`,\n  str3: `Строка 3 элемента ${i}`\n}))\n\nexport default class SelectExample extends Component {\n  state = {\n    value1: null,\n    value2: 'Bar1',\n    value3: null,\n    value4: null,\n    value5: null,\n    value6: [customData[2].items[0]],\n    valueCustom: null,\n    data,\n    status: null,\n    objectData,\n    objectValue: null,\n    objectValue2: null,\n    asyncData: [],\n    asyncValue: null,\n    asyncValue2: null,\n    objectCustomData,\n    objectValue3: null,\n    objectValue4: null,\n    popupIsOpened: false\n  }\n\n  openPopup = () => {\n    this.setState({\n      popupIsOpened: true\n    })\n  }\n\n  closePopup = () => {\n    this.setState({\n      popupIsOpened: false\n    })\n  }\n\n  setValue = key => value => {\n    this.setState({\n      [key]: value\n    })\n  }\n\n  setCustomValue = value => {\n    if (value) {\n      if (!regexEmail.test(value)) {\n        if (this.state.status !== 'error')\n          this.setState({\n            status: 'error'\n          })\n      } else if (this.state.status !== 'success') {\n        this.setState({\n          status: 'success'\n        })\n      }\n    } else {\n      this.setState({\n        status: null\n      })\n    }\n\n    this.setState({\n      valueCustom: value\n    })\n  }\n\n  filterData = search => {\n    const filteredData =\n      search === ''\n        ? data\n        : data.filter(item => search !== '' && item.indexOf(search) > -1)\n\n    this.setState({\n      data: filteredData\n    })\n  }\n\n  filterObjectData = search => {\n    const filteredData =\n      search === ''\n        ? objectData\n        : objectData.filter(\n          item => search !== '' && item.key.indexOf(search) > -1\n        )\n\n    this.setState({\n      objectData: filteredData\n    })\n  }\n\n  filterObjectCustomData = search => {\n    const filteredData =\n      search === ''\n        ? objectCustomData\n        : objectCustomData.filter(\n          item => search !== '' && item.str1.indexOf(search) > -1\n        )\n\n    this.setState({\n      objectCustomData: filteredData\n    })\n  }\n\n  requestData = search => {\n    this.setState({\n      asyncData: []\n    })\n\n    clearTimeout(this.requestTimeout)\n\n    this.requestTimeout = setTimeout(() => {\n      if (search === '') return\n\n      this.setState({\n        asyncData: new Promise(resolve => {\n          setTimeout(() => {\n            this.setState({\n              asyncData: [\n                search,\n                `${search}${search}`,\n                `${search}${search}${search}`\n              ]\n            })\n\n            resolve()\n          }, 500)\n        })\n      })\n    }, 250)\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={{width: '50%', marginBottom: 15}}>\n          <h3>С плэйсхолдером и статусом</h3>\n          <Select\n            placeholder=\"Select...\"\n            status=\"success\"\n            value={this.state.value1}\n            onChange={this.setValue('value1')}>\n            {[...Array(5)].map((item, i) => (\n              <MenuItem value={`Foo${i}`} key={i}>\n                Foo\n                {i}\n              </MenuItem>\n            ))}\n          </Select>\n        </div>\n\n        <div style={{width: '33%', marginBottom: 15}}>\n          <h3>С иконкой и начальным значением</h3>\n          <Select\n            size=\"small\"\n            icon={<PhoneIcon />}\n            value={this.state.value2}\n            onChange={this.setValue('value2')}>\n            {[...Array(15)].map((item, i) => (\n              <MenuItem value={`Bar${i}`} key={i}>\n                Bar\n                {i}\n              </MenuItem>\n            ))}\n          </Select>\n        </div>\n\n        <div style={{width: '50%', marginBottom: 15}}>\n          <h3>С поиском</h3>\n          <Select\n            placeholder=\"Type something...\"\n            lightPlaceholderColor={true}\n            value={this.state.value1}\n            onChange={this.setValue('value1')}\n            onSearch={this.filterData}>\n            {this.state.data.map(item => (\n              <MenuItem value={item} key={item}>\n                {item}\n              </MenuItem>\n            ))}\n          </Select>\n        </div>\n\n        <div style={{width: '50%', marginBottom: 15}}>\n          <h3>Асинхронный</h3>\n          <Loader loading={!!this.state.asyncData.then}>\n            <Select\n              placeholder=\"Type something...\"\n              value={this.state.asyncValue}\n              onChange={this.setValue('asyncValue')}\n              onSearch={this.requestData}>\n              {this.state.asyncData.then\n                ? []\n                : this.state.asyncData.map(item => (\n                  <MenuItem value={item} key={item}>\n                    {item}\n                  </MenuItem>\n                ))}\n            </Select>\n          </Loader>\n        </div>\n\n        <div style={{width: '45%', marginBottom: 15}}>\n          <h3>Со значениями-объектами и кастомной стрелкой</h3>\n          <Select\n            placeholder=\"Type something...\"\n            value={this.state.objectValue}\n            arrowIcon={<EllipsisIcon size={12} color=\"currentColor\" />}\n            inputValueRenderer={value => value && value.key}\n            valuesEquality={(a, b) => a === b || (a && b && a.id === b.id)}\n            onChange={this.setValue('objectValue')}\n            onSearch={this.filterObjectData}>\n            {this.state.objectData.map(item => (\n              <MenuItem value={item} key={item.id}>\n                <PhoneIcon /> {item.key}\n              </MenuItem>\n            ))}\n          </Select>\n        </div>\n\n        <div style={{width: '66%', marginBottom: 15}}>\n          <h3>Disabled</h3>\n          <Select\n            disabled={true}\n            placeholder=\"Disabled\"\n            value={this.state.value3}\n            onChange={this.setValue('value3')}>\n            {[...Array(5)].map((item, i) => (\n              <MenuItem value={`Baz${i}`} key={i}>\n                Baz\n                {i}\n              </MenuItem>\n            ))}\n          </Select>\n        </div>\n\n        <div style={{width: '50%', marginBottom: 15}}>\n          <h3>С кнопкой удаления</h3>\n          <Select\n            placeholder=\"Type something...\"\n            size=\"small\"\n            variation=\"regular\"\n            clearIcon={true}\n            value={this.state.value1}\n            onChange={this.setValue('value1')}\n            onSearch={this.filterData}>\n            {this.state.data.map(item => (\n              <MenuItem value={item} key={item}>\n                {item}\n              </MenuItem>\n            ))}\n          </Select>\n        </div>\n\n        <div style={{width: '50%', marginBottom: 55}}>\n          <h3>С поддержкой ввода произвольного значения</h3>\n          <Tooltip\n            content={\n              this.state.status === 'error'\n                ? 'This is not an email!'\n                : 'This is a correct email!'\n            }\n            position=\"right\"\n            status={this.state.status === 'error' ? 'error' : 'success'}\n            isOpened={this.state.status !== null}>\n            <Select\n              placeholder=\"Type something short...\"\n              style={{width: 400}}\n              size=\"small\"\n              variation=\"regular\"\n              clearIcon={true}\n              inputMode={true}\n              value={this.state.valueCustom}\n              status={this.state.status}\n              onChange={this.setCustomValue}\n              onSearch={this.filterData}>\n              {this.state.data.map(item => (\n                <MenuItem value={item} key={item}>\n                  {item}\n                </MenuItem>\n              ))}\n            </Select>\n          </Tooltip>\n        </div>\n\n        <div style={{maxWidth: 300, marginBottom: 15}}>\n          <h3>Множественный выбор</h3>\n          <Select\n            multiple={true}\n            placeholder=\"Select...\"\n            value={this.state.value4}\n            onChange={this.setValue('value4')}>\n            {this.state.data.map(item => (\n              <MenuItem value={item} key={item}>\n                {item}\n              </MenuItem>\n            ))}\n          </Select>\n        </div>\n\n        <div style={{maxWidth: 300, marginBottom: 15}}>\n          <h3>Множественный выбор c поиском</h3>\n          <Select\n            size=\"small\"\n            multiple={true}\n            placeholder=\"Type something...\"\n            value={this.state.value5}\n            onChange={this.setValue('value5')}\n            onSearch={this.filterData}>\n            {this.state.data.map(item => (\n              <MenuItem value={item} key={item}>\n                {item}\n              </MenuItem>\n            ))}\n          </Select>\n        </div>\n\n        <div style={{maxWidth: 300, marginBottom: 15}}>\n          <h3>Множественный выбор асинхронный</h3>\n          <Loader loading={!!this.state.asyncData.then}>\n            <Select\n              multiple={true}\n              placeholder=\"Type something...\"\n              value={this.state.asyncValue2}\n              onChange={this.setValue('asyncValue2')}\n              onSearch={this.requestData}>\n              {this.state.asyncData.then\n                ? []\n                : this.state.asyncData.map(item => (\n                  <MenuItem value={item} key={item}>\n                    {item}\n                  </MenuItem>\n                ))}\n            </Select>\n          </Loader>\n        </div>\n\n        <div style={{maxWidth: 300, marginBottom: 55}}>\n          <h3>Множественный выбор со значениями-объектами</h3>\n          <Select\n            multiple={true}\n            placeholder=\"Type something...\"\n            value={this.state.objectValue2}\n            inputValueRenderer={value => value && value.key}\n            valuesEquality={(a, b) => a === b || (a && b && a.id === b.id)}\n            onChange={this.setValue('objectValue2')}\n            onSearch={this.filterObjectData}>\n            {this.state.objectData.map(item => (\n              <MenuItem value={item} key={item.id}>\n                <PhoneIcon /> {item.key}\n              </MenuItem>\n            ))}\n          </Select>\n        </div>\n\n        <div style={{maxWidth: 300, marginBottom: 15}}>\n          <h3>\n            Кастомизированный с customElementRenderer, containerStyle и\n            variation: regular\n          </h3>\n          <Select\n            variation=\"regular\"\n            valuesEquality={(a, b) => a === b || (a && b && a.id === b.id)}\n            value={this.state.objectValue3}\n            menuStyle={{maxHeight: 74 * 4 + 2}}\n            containerStyle={{minHeight: 74}}\n            customElementRenderer={value => (\n              <div\n                style={{\n                  paddingTop: 11,\n                  paddingBottom: 11,\n                  lineHeight: '14px'\n                }}>\n                <div style={{fontSize: 13}}>{value.str1}</div>\n                <div style={{fontSize: 11, marginTop: 5}}>{value.str2}</div>\n                <div style={{fontSize: 11, marginTop: 5}}>{value.str3}</div>\n              </div>\n            )}\n            placeholder=\"Select...\"\n            onChange={this.setValue('objectValue3')}>\n            {objectCustomData.map(item => (\n              <MenuItem\n                value={item}\n                key={item.id}\n                style={{\n                  paddingTop: 11,\n                  paddingBottom: 11,\n                  lineHeight: '14px'\n                }}>\n                <div style={{width: '100%', flex: 'none', fontSize: 13}}>\n                  {item.str1}\n                </div>\n                <div\n                  style={{\n                    width: '100%',\n                    flex: 'none',\n                    fontSize: 11,\n                    marginTop: 5\n                  }}>\n                  {item.str2}\n                </div>\n                <div\n                  style={{\n                    width: '100%',\n                    flex: 'none',\n                    fontSize: 11,\n                    marginTop: 5\n                  }}>\n                  {item.str3}\n                </div>\n              </MenuItem>\n            ))}\n          </Select>\n        </div>\n\n        <div style={{maxWidth: 300}}>\n          <h3>Кастомизированный с customElementRenderer и поиском</h3>\n          <Select\n            valuesEquality={(a, b) => a === b || (a && b && a.id === b.id)}\n            value={this.state.objectValue4}\n            customElementRenderer={value => (\n              <div\n                style={{\n                  paddingTop: 11,\n                  paddingBottom: 11,\n                  lineHeight: '14px'\n                }}>\n                <div style={{fontSize: 13}}>{value.str1}</div>\n                <div style={{fontSize: 11, marginTop: 5}}>{value.str2}</div>\n                <div style={{fontSize: 11, marginTop: 5}}>{value.str3}</div>\n              </div>\n            )}\n            placeholder=\"Type something...\"\n            onSearch={this.filterObjectCustomData}\n            onChange={this.setValue('objectValue4')}>\n            {this.state.objectCustomData.map(item => (\n              <MenuItem\n                value={item}\n                key={item.id}\n                style={{\n                  paddingTop: 11,\n                  paddingBottom: 11,\n                  lineHeight: '14px'\n                }}>\n                <div style={{width: '100%', flex: 'none', fontSize: 13}}>\n                  {item.str1}\n                </div>\n                <div\n                  style={{\n                    width: '100%',\n                    flex: 'none',\n                    fontSize: 11,\n                    marginTop: 5\n                  }}>\n                  {item.str2}\n                </div>\n                <div\n                  style={{\n                    width: '100%',\n                    flex: 'none',\n                    fontSize: 11,\n                    marginTop: 5\n                  }}>\n                  {item.str3}\n                </div>\n              </MenuItem>\n            ))}\n          </Select>\n        </div>\n\n        <div style={{maxWidth: 300, marginBottom: 55}}>\n          <h3>C кастомными MenuItem</h3>\n          <Select\n            multiple={true}\n            placeholder=\"Select...\"\n            value={this.state.value6}\n            onChange={this.setValue('value6')}>\n            {customData.map((category, index) => (\n              <div\n                style={{borderTop: index ? '1px solid #ddd' : null}}\n                key={category.category}>\n                <h4 style={{margin: 0, padding: 13}}>{category.category}</h4>\n                {category.items.map(item => (\n                  <MenuItem value={item} key={item}>\n                    {item}\n                  </MenuItem>\n                ))}\n              </div>\n            ))}\n          </Select>\n        </div>\n\n        <Popup\n          title=\"Попап\"\n          showClose\n          isOpened={this.state.popupIsOpened}\n          okButton={\n            <Button type=\"primary\" size=\"small\" onClick={this.closePopup}>\n              Ок\n            </Button>\n          }\n          onRequestClose={this.closePopup}>\n          <Select\n            autoFocus={true}\n            value={this.state.value3}\n            onChange={this.setValue('value3')}>\n            {[...Array(5)].map((item, i) => (\n              <MenuItem value={`Baz${i}`} key={i}>\n                Baz\n                {i}\n              </MenuItem>\n            ))}\n          </Select>\n        </Popup>\n\n        <div style={{marginBottom: 15}}>\n          <h3>В попапе</h3>\n          <Button onClick={this.openPopup}>Открыть</Button>\n        </div>\n\n        <div>\n          this.state.value1: <b>{`${this.state.value1}`}</b>\n        </div>\n        <div>\n          this.state.value2: <b>{`${this.state.value2}`}</b>\n        </div>\n        <div>\n          this.state.value3: <b>{`${this.state.value3}`}</b>\n        </div>\n        <div>\n          this.state.value4: <b>{`${JSON.stringify(this.state.value4)}`}</b>\n        </div>\n        <div>\n          this.state.value5: <b>{`${JSON.stringify(this.state.value5)}`}</b>\n        </div>\n        <div>\n          this.state.valueCustom:{' '}\n          <b>{`${JSON.stringify(this.state.valueCustom)}`}</b>\n        </div>\n        <div>\n          this.state.objectValue1:{' '}\n          <b>{`${JSON.stringify(this.state.objectValue1)}`}</b>\n        </div>\n        <div>\n          this.state.objectValue2:{' '}\n          <b>{`${JSON.stringify(this.state.objectValue2)}`}</b>\n        </div>\n        <div>\n          this.state.objectValue3:{' '}\n          <b>{`${JSON.stringify(this.state.objectValue3)}`}</b>\n        </div>\n        <div>\n          this.state.objectValue4:{' '}\n          <b>{`${JSON.stringify(this.state.objectValue4)}`}</b>\n        </div>\n      </div>\n    )\n  }\n}\n"}}]);