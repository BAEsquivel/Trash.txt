(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{209:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.meta=void 0;var s=c(t(2)),a=t(528),o=c(t(529)),i=c(t(531)),l=c(t(530)),r=c(t(801)),m=c(t(800)),d=c(t(799)),p=c(t(798));function c(n){return n&&n.__esModule?n:{default:n}}var u=e.meta={title:"Tabs",toc:["Пример","Пример использования с  react-router","Свойства  <Tabs />","Свойства  <TabsItem />"]},b=s.default.createElement(i.default,{code:r.default}),h=s.default.createElement(i.default,{code:m.default,canEdit:!1,showPreview:!1}),f=s.default.createElement(l.default,{code:d.default}),T=s.default.createElement(l.default,{code:p.default});e.default=function(n){var e=n.components,t=function(n,e){var t={};for(var s in n)e.indexOf(s)>=0||Object.prototype.hasOwnProperty.call(n,s)&&(t[s]=n[s]);return t}(n,["components"]);return s.default.createElement(a.MDXTag,{name:"wrapper",Layout:(0,o.default)(u)(function(n){return n.children}),layoutProps:t,components:e},s.default.createElement(a.MDXTag,{name:"h3",components:e},"Пример"),b,s.default.createElement(a.MDXTag,{name:"h3",components:e},"Пример использования с ",s.default.createElement(a.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"react-router")),h,s.default.createElement(a.MDXTag,{name:"h3",components:e},"Свойства ",s.default.createElement(a.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<Tabs />")),f,s.default.createElement(a.MDXTag,{name:"h3",components:e},"Свойства ",s.default.createElement(a.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<TabsItem />")),T)}},798:function(n,e){n.exports="/**\n * Опция компонента таба\n */\nimport React, {Component, cloneElement, isValidElement} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {injectSheet} from '../theme'\nimport {isolateMixin} from '../utils/mixins'\n\nconst setThemeForSelector = colors => ({\n  borderColor: colors.border,\n  color: colors.text\n})\n\n@injectSheet(\n  theme => {\n    const {sizes, bottom, colors} = theme.tabs\n    return {\n      tab: {\n        extend: isolateMixin,\n        display: 'inline-block',\n        userSelect: 'none',\n        whiteSpace: 'nowrap',\n        cursor: 'pointer',\n        outline: 'none !important',\n        borderStyle: 'solid',\n        borderWidth: `0 0 ${theme.tabs.borderWidth}px`,\n        background: 'none',\n        fontWeight: 500,\n        transitionDuration: theme.tabs.animationDuration,\n        transitionProperty: 'color, border-color',\n        '&::-moz-focus-inner': {\n          border: 'none !important',\n          outline: 'none !important'\n        },\n        '&&': setThemeForSelector(colors.default),\n        '&$isEnabled$isSelected': setThemeForSelector(colors.selected),\n        '&$isEnabled:hover, &$isEnabled:focus': setThemeForSelector(\n          colors.hover\n        ),\n        '&$isEnabled:active': setThemeForSelector(colors.active),\n        '&$isDisabled': setThemeForSelector(colors.disabled),\n        '&$isDisabled$isSelected': setThemeForSelector(colors.disabledSelected)\n      },\n      tabBottom: {\n        borderWidth: `${theme.tabs.borderWidth}px 0 0`\n      },\n      'size-small': {\n        extend: sizes.small,\n        lineHeight: 1.36,\n        letterSpacing: 1.3,\n        textTransform: 'uppercase'\n      },\n      'size-medium': {\n        extend: sizes.medium,\n        lineHeight: 1.43\n      },\n      'size-small-bottom': {\n        extend: bottom.sizes.small,\n        lineHeight: 1.36,\n        letterSpacing: 1.3,\n        textTransform: 'uppercase'\n      },\n      'size-medium-bottom': {\n        extend: bottom.sizes.medium,\n        lineHeight: 1.43\n      },\n      isDisabled: {\n        cursor: 'not-allowed',\n        pointerEvents: 'none'\n      },\n      isEnabled: {},\n      isSelected: {}\n    }\n  },\n  {name: 'TabsItem'}\n)\nclass TabsItem extends Component {\n  static propTypes = {\n    /**\n     * Значение, соответствующее этому табу\n     */\n    value: PropTypes.any,\n    /**\n     * Css-класс компонента\n     */\n    className: PropTypes.string,\n    /**\n     * Стили таба\n     */\n    style: PropTypes.object,\n    /**\n     * Контент (обычно просто текст)\n     */\n    children: PropTypes.node,\n    /**\n     * Размер компонента (автоматически проставляется компонентом `<Tabs/>`)\n     */\n    size: PropTypes.oneOf(['small', 'medium']),\n    /**\n     * Выбран ли этот таб (автоматически проставляется компонентом `<Tabs/>`)\n     */\n    isSelected: PropTypes.bool,\n    /**\n     * Отключаем кнопку/ссылку (автоматически проставляется компонентом `<Tabs/>`)\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Элемент, который содержит контент, например `<Link />` в случае с `react-router`\n     */\n    container: PropTypes.element,\n    /**\n     * Колбек нажатия на элемент (автоматически проставляется компонентом `<Tabs/>`)\n     */\n    onPress: PropTypes.func\n  }\n\n  static defaultProps = {\n    size: 'small',\n    isSelected: false,\n    disabled: false\n  }\n\n  handleClick = event => {\n    const {props} = this\n    if (!props.onPress) return\n    props.onPress(event, props.value)\n  }\n\n  render() {\n    const {\n      href,\n      container,\n      children,\n      className,\n      isSelected,\n      disabled,\n      size,\n      position,\n      classes,\n      value, // eslint-disable-line no-unused-vars\n      theme, // eslint-disable-line no-unused-vars\n      onPress, // eslint-disable-line no-unused-vars\n      ...other\n    } = this.props\n\n    const isBottomPosition = position === 'bottom'\n\n    const resultClassName = classnames(\n      className,\n      classes.tab,\n      isBottomPosition && classes.tabBottom,\n      classes[`size-${size}${isBottomPosition ? '-bottom' : ''}`],\n      disabled ? classes.isDisabled : classes.isEnabled,\n      isSelected && classes.isSelected\n    )\n\n    const elemProps = {\n      ...other,\n      className: resultClassName,\n      onClick: this.handleClick\n    }\n\n    let element\n    let isLink\n    if (container && isValidElement(container)) {\n      element = container\n      if (typeof element.type !== 'string')\n        elemProps.activeClassName = classes.isSelected\n      isLink = true\n    } else if (href) {\n      element = <a href={href} />\n      isLink = true\n    } else {\n      element = <button type=\"button\" disabled={disabled} />\n    }\n\n    if (isLink) {\n      elemProps['aria-disabled'] = disabled\n      elemProps.tabIndex = disabled ? -1 : null\n    }\n\n    return cloneElement(element, elemProps, children)\n  }\n}\nTabsItem.displayName = 'ruiTabsItem'\n\nexport default TabsItem\n"},799:function(n,e){n.exports="/**\n * Компонент табов\n */\nimport React, {Component, cloneElement} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {injectSheet} from '../theme'\nimport {isolateMixin, topBorderMixin, bottomBorderMixin} from '../utils/mixins'\n\n@injectSheet(\n  theme => ({\n    tabs: {\n      extend: [\n        isolateMixin,\n        bottomBorderMixin(theme.tabs.colors.default.outline)\n      ],\n      display: 'inline-flex',\n      fontFamily: theme.fontFamily,\n      paddingLeft: theme.tabs.sidePadding,\n      paddingRight: theme.tabs.sidePadding\n    },\n    item: {\n      '&&': {\n        flex: 'none'\n      },\n      '&:nth-child(1n+2)': {\n        marginLeft: theme.tabs.betweenMargin\n      }\n    },\n    isDisabled: {\n      cursor: 'not-allowed'\n    },\n    isBottom: {\n      extend: [topBorderMixin(theme.tabs.colors.default.outline)]\n    }\n  }),\n  {name: 'Tabs'}\n)\nexport default class Tabs extends Component {\n  static propTypes = {\n    /**\n     * Выбранное значение табов\n     */\n    value: PropTypes.any,\n    /**\n     * Класс контейнера\n     */\n    className: PropTypes.string,\n    /**\n     * CSS-стили корневого элемента\n     */\n    style: PropTypes.object,\n    /**\n     * Опции переключателя, обязаны быть компонентами типа `<Tab />`\n     */\n    children: PropTypes.node,\n    /**\n     * Размер компонента\n     */\n    size: PropTypes.oneOf(['small', 'medium']),\n    /**\n     * Позиционирование табов\n     */\n    position: PropTypes.oneOf(['top', 'bottom']),\n    /**\n     * Перевод табов в состояние disabled\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Функция, вызывающая при изменении значения `function (event: object, newValue: any) {}`\n     */\n    onChange: PropTypes.func\n  }\n\n  static defaultProps = {\n    size: 'small',\n    position: 'top',\n    disabled: false\n  }\n\n  static childContextTypes = {\n    position: PropTypes.string\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      value: props.value\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setValue(nextProps.value)\n  }\n\n  getChildContext() {\n    return {\n      position: this.props.position\n    }\n  }\n\n  setValue(value) {\n    if (value === this.state.value) return\n    this.setState({value})\n  }\n\n  handleValueChange = (event, value) => {\n    this.setValue(value)\n    if (!this.props.onChange) return\n    this.props.onChange(event, value)\n  }\n\n  render() {\n    const {\n      children,\n      size,\n      position,\n      disabled,\n      className,\n      classes,\n      theme, // eslint-disable-line no-unused-vars\n      onChange, // eslint-disable-line no-unused-vars\n      value, // eslint-disable-line no-unused-vars\n      ...other\n    } = this.props\n    let i = 0\n    const tabs = React.Children.map(children, child => {\n      if (!child.type || child.type.displayName !== 'ruiTabsItem')\n        throw new Error('Child component should be instance of <Tab />')\n      const {className, value} = child.props\n      const hasValue = 'value' in child.props\n      return cloneElement(child, {\n        className: classnames(className, classes.item),\n        key:\n          child.key !== undefined\n            ? child.key\n            : typeof value === 'string' || typeof value === 'number'\n              ? value\n              : i++,\n        isSelected: hasValue && child.props.value === this.state.value,\n        onPress: hasValue && !disabled ? this.handleValueChange : null,\n        size,\n        disabled,\n        position\n      })\n    })\n\n    const isBottomPosition = position === 'bottom'\n\n    return (\n      <div\n        {...other}\n        className={classnames(\n          className,\n          classes.tabs,\n          disabled && classes.isDisabled,\n          isBottomPosition && classes.isBottom\n        )}>\n        {tabs}\n      </div>\n    )\n  }\n}\n"},800:function(n,e){n.exports="import {Tabs, TabsItem} from 'rambler-ui/Tabs'\nimport {Link} from 'react-router'\n\nexport default () => (\n  <div>\n    <Tabs>\n      <TabsItem container={<Link to=\"/home\" />}>Кнопка-ссылка</TabsItem>\n    </Tabs>\n  </div>\n)\n"},801:function(n,e){n.exports="import {Tabs, TabsItem} from 'rambler-ui/Tabs'\nimport React, {Component} from 'react'\n\nconst values = ['Day', 'Week', 'Month', 'Year']\n\nexport default class TabsExample extends Component {\n  state = {\n    value: values[1]\n  }\n\n  handleChange = (event, value) => {\n    this.setState({value})\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={{marginBottom: 40}}>\n          <h4>default</h4>\n          <Tabs value={this.state.value} onChange={this.handleChange}>\n            {values.map((item, index) => (\n              <TabsItem\n                value={item}\n                key={index}\n                className=\"customTabsItemClassName\">\n                {item}\n              </TabsItem>\n            ))}\n          </Tabs>\n        </div>\n        <div style={{marginBottom: 40}}>\n          <h4>default bottom</h4>\n          <Tabs\n            position=\"bottom\"\n            value={this.state.value}\n            onChange={this.handleChange}>\n            {values.map((item, index) => (\n              <TabsItem\n                value={item}\n                key={index}\n                className=\"customTabsItemClassName\">\n                {item}\n              </TabsItem>\n            ))}\n          </Tabs>\n        </div>\n        <div style={{marginBottom: 40}}>\n          <h4>size: medium, Tab with href prop</h4>\n          <Tabs\n            size=\"medium\"\n            value={this.state.value}\n            onChange={this.handleChange}>\n            {values.map((item, index) => (\n              <TabsItem href={'#/components/Tabs'} value={item} key={index}>\n                {item}\n              </TabsItem>\n            ))}\n          </Tabs>\n        </div>\n        <div style={{marginBottom: 40}}>\n          <h4>size: medium, position: bottom, Tab with href prop</h4>\n          <Tabs\n            size=\"medium\"\n            position=\"bottom\"\n            value={this.state.value}\n            onChange={this.handleChange}>\n            {values.map((item, index) => (\n              <TabsItem href={'#/components/Tabs'} value={item} key={index}>\n                {item}\n              </TabsItem>\n            ))}\n          </Tabs>\n        </div>\n        <div style={{marginBottom: 40}}>\n          <h4>disabled</h4>\n          <Tabs\n            disabled={true}\n            value={this.state.value}\n            onChange={this.handleChange}>\n            {values.map((item, index) => (\n              <TabsItem\n                href={index % 2 ? '#/components/Tabs' : null}\n                value={item}\n                key={index}>\n                {item}\n              </TabsItem>\n            ))}\n          </Tabs>\n        </div>\n        <div style={{marginBottom: 40}}>\n          <h4>disabled bottom</h4>\n          <Tabs\n            disabled={true}\n            position=\"bottom\"\n            value={this.state.value}\n            onChange={this.handleChange}>\n            {values.map((item, index) => (\n              <TabsItem\n                href={index % 2 ? '#/components/Tabs' : null}\n                value={item}\n                key={index}>\n                {item}\n              </TabsItem>\n            ))}\n          </Tabs>\n        </div>\n        <div>\n          this.state.value: <b>{this.state.value}</b>\n        </div>\n      </div>\n    )\n  }\n}\n"}}]);