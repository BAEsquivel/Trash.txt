(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{229:function(n,e,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.meta=void 0;var t=c(a(2)),o=a(528),r=c(a(529)),s=c(a(531)),i=c(a(530)),l=c(a(854)),d=c(a(853));function c(n){return n&&n.__esModule?n:{default:n}}var m=e.meta={title:"Calendar",toc:["Пример","Свойства  <Calendar />"]},h=t.default.createElement(s.default,{code:l.default}),p=t.default.createElement(i.default,{code:d.default});e.default=function(n){var e=n.components,a=function(n,e){var a={};for(var t in n)e.indexOf(t)>=0||Object.prototype.hasOwnProperty.call(n,t)&&(a[t]=n[t]);return a}(n,["components"]);return t.default.createElement(o.MDXTag,{name:"wrapper",Layout:(0,r.default)(m)(function(n){return n.children}),layoutProps:a,components:e},t.default.createElement(o.MDXTag,{name:"h3",components:e},"Пример"),h,t.default.createElement(o.MDXTag,{name:"h3",components:e},"Свойства ",t.default.createElement(o.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<Calendar />")),p)}},853:function(n,e){n.exports="import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {injectSheet} from '../theme'\nimport {isolateMixin} from '../utils/mixins'\n\n@injectSheet(\n  ({calendar}) => ({\n    root: {\n      display: 'inline-block',\n      width: 275,\n      padding: 15,\n      fontFamily: calendar.service.fontFamily,\n      backgroundColor: calendar.colors.default.background,\n      boxSizing: 'border-box'\n    },\n    headline: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      height: 15,\n      padding: '0 10px',\n      boxSizing: 'border-box'\n    },\n    month: {\n      position: 'relative',\n      top: 1,\n      lineHeight: calendar.month.size + 'px',\n      fontSize: calendar.month.fontSize,\n      fontWeight: calendar.month.fontWeight,\n      color: calendar.colors.default.text\n    },\n\n    item: {\n      extend: isolateMixin,\n      display: 'inline-block',\n      flex: 'none',\n      border: 0,\n      outline: 'none !important',\n      background: 'none',\n      whiteSpace: 'nowrap',\n      textAlign: 'center',\n      boxSizing: 'border-box',\n      'button&::-moz-focus-inner': {\n        border: 'none !important',\n        outline: 'none !important'\n      },\n      '$isSelectable &': {\n        transitionDuration: calendar.animationDuration,\n        transitionProperty: 'color, background-color'\n      }\n    },\n    day: {\n      composes: '$item',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: calendar.size\n    },\n\n    arrow: {\n      composes: '$item',\n      position: 'relative',\n      width: calendar.arrow.size,\n      height: calendar.arrow.size,\n      color: calendar.service.colors.default,\n      cursor: 'pointer',\n      overflow: 'hidden',\n      '&:before': {\n        boxSizing: 'border-box',\n        position: 'absolute',\n        top: -1,\n        left: 3,\n        content: '\"\"',\n        width: 9,\n        height: 9,\n        border: 'solid',\n        borderWidth: '0 0 1px 1px',\n        transform: 'rotate(45deg)',\n        transformOrigin: 'left bottom'\n      },\n      '&:hover': {\n        color: calendar.service.colors.hover\n      },\n      '&:focus': {\n        color: calendar.service.colors.hover\n      },\n      '$isMedia &': {\n        color: calendar.media.colors.default\n      },\n      '$isMedia &:hover': {\n        color: calendar.media.colors.hover\n      }\n    },\n    prev: {\n      composes: '$arrow'\n    },\n    next: {\n      composes: '$arrow',\n      transform: 'scaleX(-1)'\n    },\n\n    week: {\n      display: 'flex',\n      margin: '20px 0 11px'\n    },\n    weekDay: {\n      composes: '$day',\n      height: calendar.weekDay.size,\n      fontSize: calendar.weekDay.fontSize,\n      color: calendar.colors.default.weekDay\n    },\n\n    days: {\n      overflow: 'hidden',\n      '$isAnimate &': {\n        transitionDuration: calendar.animationDuration,\n        transitionProperty: 'height'\n      }\n    },\n    daysWrap: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      '$isAnimate &': {\n        transitionDuration: calendar.animationDuration,\n        transitionProperty: 'transform'\n      }\n    },\n    dateDay: {\n      composes: '$day',\n      height: calendar.date.size,\n      fontSize: calendar.date.fontSize,\n      color: calendar.colors.default.text,\n      backgroundColor: calendar.colors.default.background,\n      '$isSelectable &': {\n        cursor: 'pointer'\n      },\n      '$isSelectable &:hover': {\n        color: calendar.colors.hover.text\n      },\n      '$isSelectable &:focus': {\n        color: calendar.colors.hover.text\n      }\n    },\n\n    isMedia: {\n      fontFamily: calendar.media.fontFamily\n    },\n    isAnimate: {},\n\n    isSelectable: {\n      userSelect: 'none'\n    },\n    isWeekend: {\n      color: calendar.colors.weekend.text\n    },\n    isToday: {\n      fontWeight: 500,\n      color: calendar.colors.today.text,\n      '$isSelectable &:hover': {\n        color: calendar.colors.todayHover.text\n      },\n      '$isSelectable &$isUnavailable:hover': {\n        color: calendar.colors.disabled.text\n      },\n      '$isSelectable &:focus': {\n        color: calendar.colors.todayHover.text\n      },\n      '$isSelectable &$isUnavailable:focus': {\n        color: calendar.colors.disabled.text\n      }\n    },\n    isSelected: {\n      backgroundColor: calendar.colors.selected.background\n    },\n    isActive: {\n      color: calendar.colors.active.text,\n      backgroundColor: calendar.colors.active.background,\n      '$isSelectable &:hover': {\n        color: calendar.colors.active.text,\n        backgroundColor: calendar.colors.activeHover.background\n      },\n      '$isSelectable &$isUnavailable:hover': {\n        color: calendar.colors.disabled.text,\n        backgroundColor: calendar.colors.activeHover.background\n      },\n      '$isSelectable &:focus': {\n        color: calendar.colors.active.text,\n        backgroundColor: calendar.colors.activeHover.background\n      },\n      '$isSelectable &$isUnavailable:focus': {\n        color: calendar.colors.disabled.text,\n        backgroundColor: calendar.colors.activeHover.background\n      }\n    },\n    isUnavailable: {\n      color: calendar.colors.disabled.text\n    },\n    isDisableArrow: {\n      color: calendar.colors.disabled.text,\n      cursor: 'default',\n      '&:hover': {\n        color: calendar.colors.disabled.text,\n        cursor: 'default'\n      }\n    }\n  }),\n  {name: 'Calendar'}\n)\nexport default class Calendar extends Component {\n  static propTypes = {\n    /**\n     * CSS-класс контейнера\n     */\n    className: PropTypes.string,\n    /**\n     * Стили контейнера\n     */\n    style: PropTypes.object,\n    /**\n     * Тип календаря\n     */\n    variation: PropTypes.oneOf(['service', 'media']),\n    /**\n     *  Выбранная дата или период. Принимает объект Date\n     *  или массив, в случае с выбором периода\n     */\n    value: PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n      PropTypes.instanceOf(Date)\n    ]),\n    /**\n     * Отображаемый месяц при инициализации.\n     * Принимает объект Date\n     */\n    initDate: PropTypes.instanceOf(Date),\n    /**\n     * Текущая дата. Принимает объект Date\n     */\n    today: PropTypes.instanceOf(Date),\n    /**\n     * Возможность выбора периода\n     */\n    range: PropTypes.bool,\n    /**\n     * Минимальный год для отображения\n     */\n    minYear: PropTypes.number,\n    /**\n     * Максимальный год для отображения\n     */\n    maxYear: PropTypes.number,\n    /**\n     * Отображает год\n     */\n    showYear: PropTypes.bool,\n    /**\n     * Отображает переключатель месяцев\n     */\n    showMonthSwitch: PropTypes.bool,\n    /**\n     * Устанавливает подстветку выходных дней (сб и вс)\n     */\n    highlightWeekend: PropTypes.bool,\n    /**\n     * Функция, вызывающая при изменении значения `function (event: object, newValue: Date | Date[]) {}`.\n     * Возвращает объект Date или массив, в случае с выбором периода\n     */\n    onChange: PropTypes.func\n  }\n\n  static defaultProps = {\n    variation: 'service',\n    range: false,\n    minYear: 1900,\n    maxYear: 2200,\n    showYear: true,\n    showMonthSwitch: true,\n    highlightWeekend: false\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = this.getState(props)\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.initDate !== this.props.initDate) this.resetState()\n  }\n\n  resetState() {\n    this.setState(this.getState(this.props))\n  }\n\n  getState(props) {\n    const number =\n      this.dateToNumber(props.initDate) ||\n      this.dateToNumber(props.today) ||\n      this.dateToNumber(new Date())\n\n    return this.calculateDates({\n      displayMonth: Math.floor((number % 10000) / 100),\n      displayYear: Math.floor(number / 10000)\n    })\n  }\n\n  switchMonth({displayMonth, displayYear}) {\n    const {dates, first, last} = this.calculateDates({\n      displayMonth,\n      displayYear\n    })\n\n    this.setState(\n      {\n        animate: true,\n        displayMonth,\n        displayYear,\n        first,\n        last\n      },\n      () => {\n        setTimeout(() => {\n          this.setState({\n            dates,\n            animate: false\n          })\n        }, 210)\n      }\n    )\n  }\n\n  calculateDates = ({displayMonth, displayYear}) => {\n    const dates = []\n\n    const months = this.props.showMonthSwitch\n      ? [\n        displayMonth - 2,\n        displayMonth - 1,\n        displayMonth,\n        displayMonth + 1,\n        displayMonth + 2\n      ]\n      : [displayMonth - 1, displayMonth, displayMonth + 1]\n\n    let first\n    let last\n\n    months.map((m, index) => {\n      let month = m\n      let year = displayYear\n\n      if (m < 0) {\n        month = m + 12\n        year--\n      } else if (m > 11) {\n        month = m - 12\n        year++\n      }\n\n      let dateFrom = 1\n      let dateTo = new Date(year, month + 1, 0).getDate()\n\n      if (index === 0)\n        dateFrom = dateTo - (new Date(year, month + 1, 1).getDay() || 7) + 2\n      else if (index === months.length - 1)\n        dateTo = 8 - (new Date(year, month, 1).getDay() || 7)\n\n      if (month === displayMonth) {\n        first = this.toNumber(year, month, 1)\n        last = this.toNumber(year, month, dateTo)\n      }\n\n      let i\n\n      for (i = dateFrom; i <= dateTo; i++)\n        dates.push(this.toNumber(year, month, i))\n    })\n\n    return {\n      displayMonth,\n      displayYear,\n      dates,\n      first,\n      last\n    }\n  }\n\n  toNumber = (year, month, date) => year * 10000 + month * 100 + date\n\n  dateToNumber = date => {\n    if (date instanceof Date)\n      return this.toNumber(date.getFullYear(), date.getMonth(), date.getDate())\n\n    return null\n  }\n\n  numberToDate = number =>\n    new Date(\n      Math.floor(number / 10000),\n      Math.floor((number % 10000) / 100),\n      number % 100\n    )\n\n  onPrev = () => {\n    const {minYear} = this.props\n    let {displayMonth, displayYear} = this.state\n\n    if (\n      this.state.animate ||\n      (Number.isInteger(minYear) &&\n        minYear === displayYear &&\n        displayMonth === 0)\n    )\n      return\n\n    if (--displayMonth < 0) {\n      displayMonth = 11\n      displayYear--\n    }\n\n    this.switchMonth({displayMonth, displayYear})\n  }\n\n  onNext = () => {\n    const {maxYear} = this.props\n    let {displayMonth, displayYear} = this.state\n\n    if (\n      this.state.animate ||\n      (Number.isInteger(maxYear) &&\n        maxYear === displayYear &&\n        displayMonth === 11)\n    )\n      return\n\n    if (++displayMonth > 11) {\n      displayMonth = 0\n      displayYear++\n    }\n\n    this.switchMonth({displayMonth, displayYear})\n  }\n\n  onClick = (event, day) => {\n    const {range, value} = this.props\n\n    const [numberFrom, numberTo] = [].concat(value).map(this.dateToNumber)\n\n    if (numberFrom && numberFrom === day && range && !numberTo) return\n\n    if (range && numberFrom && !numberTo)\n      if (day < numberFrom) this.onSetNewDates(event, [day, numberFrom])\n      else this.onSetNewDates(event, [numberFrom, day])\n    else this.onSetNewDates(event, [day])\n  }\n\n  onSetNewDates(event, [numberFrom, numberTo = null]) {\n    const {range, onChange} = this.props\n\n    const dateFrom = numberFrom && this.numberToDate(numberFrom)\n    const dateTo = numberTo && this.numberToDate(numberTo)\n\n    const value = range ? [dateFrom, dateTo] : dateFrom\n\n    if (typeof onChange === 'function') onChange(event, value)\n  }\n\n  render() {\n    const {\n      className,\n      style,\n      variation,\n      value,\n      today,\n      range,\n      minYear,\n      maxYear,\n      showYear,\n      showMonthSwitch,\n      highlightWeekend,\n      onChange,\n      classes,\n      theme\n    } = this.props\n\n    const {animate, displayMonth, displayYear, dates, last, first} = this.state\n\n    const weeksBeforeVisible = Math.floor(dates.indexOf(first) / 7)\n    const weeksAfterVisible = Math.ceil(dates.indexOf(last) / 7)\n    const weeksVisible = weeksAfterVisible - weeksBeforeVisible\n\n    const numberToday = this.dateToNumber(today)\n\n    const [numberFrom, numberTo] = [].concat(value).map(this.dateToNumber)\n\n    return (\n      <div\n        className={classnames(className, classes.root, {\n          [classes.isAnimate]: animate,\n          [classes.isSelectable]: typeof onChange === 'function',\n          [classes.isMedia]: variation === 'media'\n        })}\n        style={style}>\n        <div className={classes.headline}>\n          {showMonthSwitch && (\n            <button\n              className={classnames(classes.prev, {\n                [classes.isDisableArrow]:\n                  Number.isInteger(minYear) &&\n                  minYear === displayYear &&\n                  displayMonth === 0\n              })}\n              type=\"button\"\n              tabIndex={-1}\n              onClick={this.onPrev}\n            />\n          )}\n\n          <div\n            className={classes.month}\n            children={\n              theme.i18n.months[displayMonth] +\n              (showYear ? ', ' + displayYear : '')\n            }\n          />\n\n          {showMonthSwitch && (\n            <button\n              className={classnames(classes.next, {\n                [classes.isDisableArrow]:\n                  Number.isInteger(maxYear) &&\n                  maxYear === displayYear &&\n                  displayMonth === 11\n              })}\n              type=\"button\"\n              tabIndex={-1}\n              onClick={this.onNext}\n            />\n          )}\n        </div>\n\n        <div className={classes.week}>\n          {theme.i18n.days.map((el, index) => (\n            <div\n              key={index}\n              className={classnames(classes.weekDay, {\n                [classes.isWeekend]:\n                  highlightWeekend && (index === 5 || index === 6)\n              })}\n              children={el}\n            />\n          ))}\n        </div>\n\n        <div\n          className={classes.days}\n          style={{height: theme.calendar.size * weeksVisible}}>\n          <div\n            className={classes.daysWrap}\n            style={{\n              transform: `translateY(${-1 *\n                theme.calendar.size *\n                weeksBeforeVisible}px)`\n            }}>\n            {dates.map((number, index) => {\n              const classNameDateday = classnames(classes.dateDay, {\n                [classes.isActive]:\n                  number === numberFrom || (range && number === numberTo),\n                [classes.isSelected]:\n                  range &&\n                  numberFrom &&\n                  numberTo &&\n                  number > numberFrom &&\n                  number < numberTo,\n                [classes.isToday]: number === numberToday,\n                [classes.isWeekend]:\n                  highlightWeekend &&\n                  ((index + 1) % 7 === 6 || (index + 1) % 7 === 0),\n                [classes.isUnavailable]: number < first || number > last\n              })\n\n              if (\n                index >= weeksBeforeVisible * 7 &&\n                index < weeksAfterVisible * 7\n              )\n                return (\n                  <button\n                    key={number}\n                    className={classNameDateday}\n                    type=\"button\"\n                    tabIndex={0}\n                    onClick={event => this.onClick(event, number)}\n                    children={number % 100}\n                  />\n                )\n\n              return (\n                <span\n                  key={number}\n                  className={classNameDateday}\n                  children={number % 100}\n                />\n              )\n            })}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n"},854:function(n,e){n.exports="import React, {Component} from 'react'\nimport Calendar from 'rambler-ui/Calendar'\n\nexport default class CalendarExample extends Component {\n  state = {\n    today: new Date(2018, 5, 15),\n    dateFrom: null,\n    dateTo: null\n  }\n\n  onChangeRange = (event, [dateFrom, dateTo]) => {\n    this.setState({\n      dateFrom,\n      dateTo\n    })\n  }\n\n  onChangeNotRange = (event, dateFrom) => {\n    this.setState({\n      dateFrom,\n      dateTo: null\n    })\n  }\n\n  render() {\n    const {today, dateFrom, dateTo} = this.state\n\n    return (\n      <div>\n        <Calendar\n          value={[dateFrom, dateTo]}\n          today={today}\n          range\n          onChange={this.onChangeRange}\n        />\n\n        <Calendar\n          variation=\"media\"\n          value={dateFrom}\n          today={today}\n          onChange={this.onChangeNotRange}\n        />\n\n        <Calendar\n          initDate={dateFrom || new Date(2018, 0)}\n          showMonthSwitch={false}\n          showYear={false}\n          highlightWeekend={true}\n        />\n      </div>\n    )\n  }\n}\n"}}]);