(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{203:function(n,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.meta=void 0;var t=u(o(2)),i=o(528),r=u(o(529)),l=u(o(531)),s=u(o(530)),c=u(o(784)),a=u(o(783)),p=u(o(782)),m=u(o(781));function u(n){return n&&n.__esModule?n:{default:n}}var d=e.meta={title:"Icons",toc:["Иконки форм","Иконки профилей","Иконки сервисов","Свойства  <SvgIcon />"]},y=t.default.createElement(l.default,{code:c.default}),f=t.default.createElement(l.default,{code:a.default}),T=t.default.createElement(l.default,{code:p.default}),h=t.default.createElement(s.default,{code:m.default});e.default=function(n){var e=n.components,o=function(n,e){var o={};for(var t in n)e.indexOf(t)>=0||Object.prototype.hasOwnProperty.call(n,t)&&(o[t]=n[t]);return o}(n,["components"]);return t.default.createElement(i.MDXTag,{name:"wrapper",Layout:(0,r.default)(d)(function(n){return n.children}),layoutProps:o,components:e},t.default.createElement(i.MDXTag,{name:"h3",components:e},"Иконки форм"),y,t.default.createElement(i.MDXTag,{name:"h3",components:e},"Иконки профилей"),f,t.default.createElement(i.MDXTag,{name:"h3",components:e},"Иконки сервисов"),T,t.default.createElement(i.MDXTag,{name:"h3",components:e},"Свойства ",t.default.createElement(i.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<SvgIcon />")),h)}},781:function(n,e){n.exports="import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class SvgIcon extends Component {\n  static propTypes = {\n    /**\n     * Дополнительный класс для иконки\n     */\n    className: PropTypes.string,\n    /**\n     * Дополнительные инлайновые стили для иконки\n     */\n    style: PropTypes.object,\n    /**\n     * Цвет иконки\n     */\n    color: PropTypes.string,\n    /**\n     * Элементы, которые отрисуются внутри svg-элемента,\n     * ожидается `ReactElement` или функция возвращающая его и получающая размер как аргумент `size => ReactElement`\n     */\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    /**\n     * Размер иконки. Может быть строкой или значением в пикселях\n     */\n    size: PropTypes.oneOfType([\n      PropTypes.oneOf(['small', 'medium', 'large']),\n      PropTypes.number,\n      PropTypes.string\n    ]),\n    /**\n     * Атрибут viewBox svg-элемента\n     */\n    viewBox: PropTypes.string\n  }\n\n  static defaultProps = {\n    viewBox: '0 0 20 20',\n    size: 'medium',\n    style: {},\n    color: 'black'\n  }\n\n  sizeMap = {\n    small: 15,\n    medium: 20,\n    large: 25\n  }\n\n  render() {\n    const {children, color, size, style, viewBox, ...other} = this.props\n    const resultSize = this.sizeMap[size] || size\n    const resultStyle = {\n      width: resultSize,\n      height: resultSize,\n      display: 'inline-block',\n      userSelect: 'none',\n      fill: color,\n      ...style\n    }\n\n    const resultChildren =\n      typeof children === 'function' ? children(resultSize) : children\n\n    return (\n      <svg {...other} viewBox={viewBox} style={resultStyle}>\n        {resultChildren}\n      </svg>\n    )\n  }\n}\n"},782:function(n,e){n.exports="import React from 'react'\nimport Tooltip from 'rambler-ui/Tooltip'\nimport {ApplyTheme} from 'rambler-ui/theme'\nimport * as icons from 'rambler-ui/icons/services'\n\nconst styles = {\n  display: 'inline-block',\n  margin: 10\n}\n\nexport default () => (\n  <ApplyTheme>\n    <div>\n      {Object.keys(icons).map(iconName => {\n        const Icon = icons[iconName]\n        return (\n          <div key={iconName} style={styles}>\n            <Tooltip content={`<${iconName} />`}>\n              <Icon />\n            </Tooltip>\n          </div>\n        )\n      })}\n    </div>\n  </ApplyTheme>\n)\n"},783:function(n,e){n.exports="import React from 'react'\nimport Tooltip from 'rambler-ui/Tooltip'\nimport {ApplyTheme} from 'rambler-ui/theme'\nimport * as icons from 'rambler-ui/icons/profiles'\n\nconst styles = {\n  display: 'inline-block',\n  margin: 10\n}\n\nexport default () => (\n  <ApplyTheme>\n    <div>\n      {Object.keys(icons).map(iconName => {\n        const Icon = icons[iconName]\n        return (\n          <div key={iconName} style={styles}>\n            <Tooltip content={`<${iconName} />`}>\n              <Icon />\n            </Tooltip>\n          </div>\n        )\n      })}\n      {Object.keys(icons).map(iconName => {\n        const Icon = icons[iconName]\n        return (\n          <div\n            key={iconName}\n            style={{\n              ...styles,\n              borderRadius: '50%',\n              backgroundColor: '#444',\n              lineHeight: 0\n            }}>\n            <Tooltip content={`<${iconName} />`}>\n              <Icon size={12} color=\"white\" style={{margin: 4}} />\n            </Tooltip>\n          </div>\n        )\n      })}\n    </div>\n  </ApplyTheme>\n)\n"},784:function(n,e){n.exports="import React from 'react'\nimport Tooltip from 'rambler-ui/Tooltip'\nimport {ApplyTheme} from 'rambler-ui/theme'\nimport * as icons from 'rambler-ui/icons/forms'\n\nconst styles = {\n  display: 'inline-block',\n  margin: 10\n}\n\nexport default () => (\n  <ApplyTheme>\n    <div>\n      {Object.keys(icons).map(iconName => {\n        const Icon = icons[iconName]\n        return (\n          <div key={iconName} style={styles}>\n            <Tooltip content={`<${iconName} />`}>\n              <Icon />\n            </Tooltip>\n          </div>\n        )\n      })}\n    </div>\n  </ApplyTheme>\n)\n"}}]);