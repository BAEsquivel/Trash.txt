(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{205:function(n,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.meta=void 0;var e=c(o(2)),i=o(528),s=c(o(529)),r=c(o(531)),a=c(o(530)),l=c(o(789)),p=c(o(788));function c(n){return n&&n.__esModule?n:{default:n}}var u=t.meta={title:"Tooltip",toc:["Пример","Свойства  <Tooltip />"]},m=e.default.createElement(r.default,{code:l.default}),d=e.default.createElement(a.default,{code:p.default});t.default=function(n){var t=n.components,o=function(n,t){var o={};for(var e in n)t.indexOf(e)>=0||Object.prototype.hasOwnProperty.call(n,e)&&(o[e]=n[e]);return o}(n,["components"]);return e.default.createElement(i.MDXTag,{name:"wrapper",Layout:(0,s.default)(u)(function(n){return n.children}),layoutProps:o,components:t},e.default.createElement(i.MDXTag,{name:"h3",components:t},"Пример"),m,e.default.createElement(i.MDXTag,{name:"h3",components:t},"Свойства ",e.default.createElement(i.MDXTag,{name:"inlineCode",components:t,parentName:"h3"},"<Tooltip />")),d)}},788:function(n,t){n.exports="import React, {PureComponent, cloneElement} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport OnClickOutside from '../OnClickOutside'\nimport VisibilityAnimation from '../VisibilityAnimation'\nimport {FixedOverlay} from '../Overlay'\nimport {injectSheet} from '../theme'\nimport {POINTS_Y} from '../constants/overlay'\nimport {isolateMixin, fontSmoothingMixin} from '../utils/mixins'\n\nconst containerNodeStyle = {'pointer-events': 'none'}\n\n@injectSheet(\n  theme => ({\n    content: {\n      extend: [isolateMixin, fontSmoothingMixin],\n      display: 'inline-block',\n      fontFamily: theme.fontFamily,\n      opacity: '0.01',\n      position: 'relative',\n      transitionDuration: `${theme.tooltip.animationDuration}ms`,\n      transitionProperty: 'opacity, top, left',\n      pointerEvents: 'none'\n    },\n    arrow: {\n      content: '\"\"',\n      position: 'absolute',\n      borderStyle: 'solid',\n      borderColor: 'transparent'\n    },\n    body: {\n      fontSize: theme.tooltip.fontSize,\n      color: theme.tooltip.colors.default.text,\n      padding: '8px 12px',\n      boxSizing: 'border-box',\n      lineHeight: 1.4,\n      borderRadius: theme.tooltip.borderRadius,\n      maxWidth: 320\n    },\n    isVisible: {\n      opacity: '1 !important',\n      '&$ytop$yabottom': {\n        top: '6px !important'\n      },\n      '&$ybottom$yatop': {\n        top: '-6px !important'\n      },\n      '&$xleft$xaright': {\n        left: '6px !important'\n      },\n      '&$xright$xaleft': {\n        left: '-6px !important'\n      }\n    },\n    ytop: {\n      '&$yabottom': {\n        '& $arrow': {\n          bottom: '100%',\n          left: '50%',\n          borderWidth: 5,\n          transform: 'translate(-5px, 3px)'\n        },\n        '&$xleft': {\n          top: 13,\n          left: -13\n        },\n        '&$xright': {\n          top: 13,\n          right: -13\n        },\n        '&$xcenter': {\n          top: 13\n        }\n      }\n    },\n    ybottom: {\n      '&$yatop': {\n        '& $arrow': {\n          top: '100%',\n          left: '50%',\n          borderWidth: 5,\n          transform: 'translate(-5px, -3px)'\n        },\n        '&$xleft': {\n          top: -13,\n          left: -13\n        },\n        '&$xright': {\n          top: -13,\n          right: -13\n        },\n        '&$xcenter': {\n          top: -13\n        }\n      }\n    },\n    xleft: {\n      '&$xaright': {\n        '& $arrow': {\n          bottom: '50%',\n          left: '0',\n          borderWidth: 5,\n          transform: 'translate(-7px, 5px)'\n        },\n        '&$ytop': {\n          top: -3,\n          left: 13\n        },\n        '&$ybottom': {\n          bottom: -3,\n          left: 13\n        },\n        '&$ycenter': {\n          left: 13\n        }\n      }\n    },\n    xright: {\n      '&$xaleft': {\n        '& $arrow': {\n          top: '50%',\n          left: '100%',\n          borderWidth: 5,\n          transform: 'translate(-3px, -5px)'\n        },\n        '&$ytop': {\n          top: -3,\n          left: -13\n        },\n        '&$ybottom': {\n          bottom: -3,\n          left: -13\n        },\n        '&$ycenter': {\n          left: -13\n        }\n      }\n    },\n    xcenter: {},\n    ycenter: {},\n    // anchor\n    xacenter: {},\n    yacenter: {},\n    xaleft: {},\n    xaright: {},\n    yatop: {},\n    yabottom: {},\n    ...['default', 'error', 'warning', 'success'].reduce(\n      (styles, type) => ({\n        ...styles,\n        [type]: {\n          '& $body': {background: theme.tooltip.colors[type].background},\n          '&$ytop$yabottom $arrow': {\n            borderBottomColor: theme.tooltip.colors[type].background\n          },\n          '&$ybottom$yatop $arrow': {\n            borderTopColor: theme.tooltip.colors[type].background\n          },\n          '&$xleft$xaright $arrow': {\n            borderRightColor: theme.tooltip.colors[type].background\n          },\n          '&$xright$xaleft $arrow': {\n            borderLeftColor: theme.tooltip.colors[type].background\n          }\n        }\n      }),\n      {}\n    )\n  }),\n  {name: 'TooltipContent'}\n)\nclass TooltipContent extends PureComponent {\n  static propTypes = {\n    style: PropTypes.object,\n    bodyClassName: PropTypes.string,\n    isVisible: PropTypes.bool.isRequired,\n    onBecomeVisible: PropTypes.func,\n    onClickOutside: PropTypes.func,\n    onBecomeInvisible: PropTypes.func,\n    pointY: PropTypes.oneOf(POINTS_Y),\n    children: PropTypes.node\n  }\n\n  render() {\n    const {\n      isVisible,\n      children,\n      className,\n      bodyClassName,\n      style,\n      pointY,\n      pointX,\n      anchorPointY,\n      anchorPointX,\n      anchorWidth,\n      anchorHeight,\n      theme,\n      classes,\n      status,\n      onClickOutside,\n      onBecomeVisible,\n      onBecomeInvisible\n    } = this.props\n    const resultClassName = classnames(\n      className,\n      classes.content,\n      classes['x' + pointX],\n      classes['y' + pointY],\n      classes['xa' + anchorPointX],\n      classes['ya' + anchorPointY],\n      classes[status]\n    )\n    const arrowStyle = {}\n\n    if (anchorWidth)\n      if (anchorPointX === 'left' && pointX === 'left') {\n        arrowStyle.left = anchorWidth / 2 + 13 + 'px'\n        arrowStyle.right = 'auto'\n      } else if (anchorPointX === 'right' && pointX === 'right') {\n        arrowStyle.left = 'auto'\n        arrowStyle.right = anchorWidth / 2 + 3 + 'px'\n      }\n\n    if (anchorHeight)\n      if (anchorPointY === 'top' && pointY === 'top') {\n        if (anchorPointX === 'left')\n          arrowStyle.top = anchorHeight / 2 + 3 + 'px'\n        if (anchorPointX === 'right')\n          arrowStyle.top = anchorHeight / 2 - 7 + 'px'\n        arrowStyle.bottom = 'auto'\n      } else if (anchorPointY === 'bottom' && pointY === 'bottom') {\n        arrowStyle.top = 'auto'\n        if (anchorPointX === 'left')\n          arrowStyle.bottom = anchorHeight / 2 - 7 + 'px'\n        if (anchorPointX === 'right')\n          arrowStyle.bottom = anchorHeight / 2 + 3 + 'px'\n      }\n\n    return (\n      <OnClickOutside handler={onClickOutside}>\n        <VisibilityAnimation\n          isVisible={isVisible}\n          activeClassName={classes.isVisible}\n          animationDuration={theme.tooltip.animationDuration}\n          onVisible={onBecomeVisible}\n          onInvisible={onBecomeInvisible}>\n          <div style={{padding: '3px'}} className={resultClassName}>\n            <div className={classes.arrow} style={arrowStyle} />\n            <div\n              style={style}\n              className={classnames(bodyClassName, classes.body)}>\n              {children}\n            </div>\n          </div>\n        </VisibilityAnimation>\n      </OnClickOutside>\n    )\n  }\n}\n\n@injectSheet(\n  () => ({\n    anchor: {\n      display: 'inline-block'\n    }\n  }),\n  {name: 'Tooltip'}\n)\nexport default class Tooltip extends PureComponent {\n  static propTypes = {\n    /**\n     * Контент тултипа\n     */\n    content: PropTypes.node,\n    /**\n     * Элемент вокруг тултипа\n     */\n    children: PropTypes.node.isRequired,\n    /**\n     * Css класс обертки тултипа\n     */\n    className: PropTypes.string,\n    /**\n     * Стили обертки тултипа\n     */\n    style: PropTypes.object,\n    /**\n     * Css класс контента тултипа\n     */\n    contentClassName: PropTypes.string,\n    /**\n     * Стили контента тултипа\n     */\n    contentStyle: PropTypes.object,\n    /**\n     * Сколько мс должен провисеть тултип, прежде чем исчезнуть\n     */\n    delay: PropTypes.number,\n    /**\n     * Статус тултипа\n     */\n    status: PropTypes.oneOf(['default', 'success', 'error', 'warning']),\n    /**\n     * Флаг показа тултипа.\n     * Если вы не указываете его, тултип будет показываться при hover\n     */\n    isOpened: PropTypes.bool,\n    /**\n     * Позиция тултипа\n     * top - сверху элемента, bottom - снизу элемента\n     */\n    position: PropTypes.oneOf(['top', 'bottom', 'left', 'right']),\n    /**\n     * Автоматическое позиционирование, если tooltip не помещается в указанной позиции на экране\n     */\n    autoPosition: PropTypes.bool,\n    /**\n     * Закрывать при клике вне тултипа\n     */\n    closeOnClickOutside: PropTypes.bool,\n    /**\n     * Скрывать при скролле страницы\n     */\n    closeOnScroll: PropTypes.bool\n  }\n\n  static defaultProps = {\n    position: 'top',\n    closeOnClickOutside: false,\n    closeOnScroll: true,\n    autoPosition: true,\n    status: 'default'\n  }\n\n  state = {\n    isOpened: false\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (\n      nextProps.isOpened !== undefined &&\n      nextProps.isOpened !== this.props.isOpened\n    )\n      if (nextProps.isOpened) this.show()\n      else this.hide()\n  }\n\n  componentWillMount() {\n    if (this.props.isOpened) this.show()\n  }\n\n  onMouseEnter = event => {\n    event.stopPropagation()\n    this.show()\n  }\n\n  onMouseLeave = () => {\n    this.hide()\n  }\n\n  clearDelayTimeout() {\n    if (this.delayTimeout) {\n      clearTimeout(this.delayTimeout)\n      this.delayTimeout = null\n    }\n  }\n\n  show() {\n    if (this.state.isOpened) return\n    this.clearDelayTimeout()\n    this.setState({isOpened: true})\n  }\n\n  hide() {\n    if (!this.state.isOpened) return\n    this.clearDelayTimeout()\n    if (!this.props.delay) this.setState({isOpened: false})\n    else\n      this.delayTimeout = setTimeout(() => {\n        this.setState({isOpened: false})\n      }, this.props.delay)\n  }\n\n  onContentClose = () => {\n    if (!this.state.isOpened) return\n    this.clearDelayTimeout()\n    this.setState({isOpened: false})\n  }\n\n  onClickOutside = () => {\n    if (!this.props.closeOnClickOutside) return\n    this.clearDelayTimeout()\n    this.setState({isOpened: false})\n  }\n\n  renderAnchor() {\n    const {className, style, children, classes} = this.props\n    const anchor = (\n      <span style={style} className={classnames(className, classes.anchor)}>\n        {children}\n      </span>\n    )\n    if (this.props.isOpened !== undefined) return anchor\n    return cloneElement(anchor, {\n      onMouseEnter: this.onMouseEnter,\n      onTouchStart: this.onMouseEnter,\n      onMouseLeave: this.onMouseLeave\n    })\n  }\n\n  render() {\n    if (!this.props.content) return this.renderAnchor()\n    const {\n      contentClassName,\n      contentStyle,\n      content,\n      position,\n      closeOnScroll,\n      status\n    } = this.props\n    return (\n      <FixedOverlay\n        isOpened={this.state.isOpened}\n        anchor={this.renderAnchor()}\n        content={\n          <TooltipContent\n            onClickOutside={this.onClickOutside}\n            bodyClassName={contentClassName}\n            status={status}\n            style={contentStyle}>\n            {content}\n          </TooltipContent>\n        }\n        autoPositionY={this.props.autoPosition}\n        autoPositionX={this.props.autoPosition}\n        anchorPointY={\n          position === 'top'\n            ? 'top'\n            : position === 'bottom'\n              ? 'bottom'\n              : 'center'\n        }\n        contentPointY={\n          position === 'top'\n            ? 'bottom'\n            : position === 'bottom'\n              ? 'top'\n              : 'center'\n        }\n        anchorPointX={\n          position === 'left'\n            ? 'left'\n            : position === 'right'\n              ? 'right'\n              : 'center'\n        }\n        contentPointX={\n          position === 'left'\n            ? 'right'\n            : position === 'right'\n              ? 'left'\n              : 'center'\n        }\n        cachePositionOptions={false}\n        closeOnScroll={this.props.isOpened === undefined && closeOnScroll}\n        onContentClose={this.onContentClose}\n        containerNodeStyle={containerNodeStyle}\n      />\n    )\n  }\n}\n"},789:function(n,t){n.exports='import React, {Component} from \'react\'\nimport Tooltip from \'rambler-ui/Tooltip\'\nimport Button from \'rambler-ui/Button\'\nimport IconButton from \'rambler-ui/IconButton\'\nimport Input from \'rambler-ui/Input\'\nimport FormGroup from \'rambler-ui/FormGroup\'\nimport AddIcon from \'rambler-ui/icons/forms/AddIcon\'\n\nexport default class TooltipExample extends Component {\n  state = {\n    value: \'Errored value\',\n    isTooltipOpened: false\n  }\n\n  onChange = (e, value) => {\n    this.setState({value})\n  }\n\n  openTooltip = () => {\n    this.setState({isTooltipOpened: true})\n  }\n\n  closeTooltip = () => {\n    this.setState({isTooltipOpened: false})\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <Tooltip content="Default tooltip" style={{marginRight: \'20px\'}}>\n            <Button type="secondary">Default</Button>\n          </Tooltip>\n          <Tooltip\n            content="Success tooltip"\n            style={{marginRight: \'20px\'}}\n            status="success">\n            <Button type="secondary">Success</Button>\n          </Tooltip>\n          <Tooltip\n            content="Error tooltip"\n            style={{marginRight: \'20px\'}}\n            status="error">\n            <Button type="secondary">Error</Button>\n          </Tooltip>\n          <Tooltip\n            content="Warn tooltip"\n            style={{marginRight: \'20px\'}}\n            status="warning">\n            <Button type="secondary">Warning</Button>\n          </Tooltip>\n        </div>\n        <div style={{marginTop: \'20px\'}}>\n          <Tooltip\n            style={{marginRight: \'20px\'}}\n            content={`\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                Nam tristique quis nisl quis fermentum.\n                Praesent lectus ligula, tincidunt a orci in, cursus fermentum leo.\n                Praesent egestas scelerisque consectetur.\n              `}>\n            <Button type="secondary">Large text</Button>\n          </Tooltip>\n          <Tooltip\n            position="right"\n            content={`\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                Nam tristique quis nisl quis fermentum.\n                Praesent lectus ligula, tincidunt a orci in, cursus fermentum leo.\n                Praesent egestas scelerisque consectetur.\n              `}>\n            <Button type="secondary">Large text right</Button>\n          </Tooltip>\n        </div>\n        <div style={{marginTop: \'20px\'}}>\n          <Tooltip\n            content="Top tooltip"\n            position="top"\n            style={{marginRight: \'20px\'}}>\n            <Button type="secondary">Top</Button>\n          </Tooltip>\n          <Tooltip\n            content="Bottom tooltip"\n            position="bottom"\n            style={{marginRight: \'20px\'}}\n            status="success">\n            <Button type="secondary">Bottom</Button>\n          </Tooltip>\n          <Tooltip\n            content="Left tooltip"\n            position="left"\n            style={{marginRight: \'20px\'}}\n            status="error">\n            <Button type="secondary">Left</Button>\n          </Tooltip>\n          <Tooltip\n            content="Right tooltip"\n            position="right"\n            style={{marginRight: \'20px\'}}\n            status="warning">\n            <Button type="secondary">Right</Button>\n          </Tooltip>\n        </div>\n        <div style={{marginTop: \'20px\'}}>\n          <Tooltip\n            content="Top tooltip"\n            position="top"\n            style={{marginRight: \'20px\'}}>\n            <IconButton size={22} type="secondary">\n              <AddIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip\n            content="Left tooltip"\n            position="left"\n            style={{marginRight: \'20px\'}}\n            status="success">\n            <IconButton size={22} type="secondary">\n              <AddIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip\n            content="Right tooltip"\n            position="right"\n            style={{marginRight: \'20px\'}}\n            status="error">\n            <IconButton size={22} type="secondary">\n              <AddIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip\n            content="Bottom tooltip"\n            position="bottom"\n            style={{marginRight: \'20px\'}}\n            status="warning">\n            <IconButton size={22} type="secondary">\n              <AddIcon />\n            </IconButton>\n          </Tooltip>\n        </div>\n        <div style={{marginTop: \'50px\'}}>\n          <FormGroup label="Tooltip on focus">\n            <Tooltip\n              position="right"\n              status="error"\n              content="Some error"\n              isOpened={this.state.isTooltipOpened}>\n              <Input\n                status="error"\n                type="text"\n                value={this.state.value}\n                onFocus={this.openTooltip}\n                onBlur={this.closeTooltip}\n                onChange={this.onChange}\n              />\n            </Tooltip>\n          </FormGroup>\n        </div>\n      </div>\n    )\n  }\n}\n'}}]);