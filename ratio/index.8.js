(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{206:function(e,n,o){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.meta=void 0;var t=c(o(2)),l=o(528),i=c(o(529)),s=c(o(531)),a=c(o(530)),r=c(o(792)),g=c(o(791)),d=c(o(790));function c(e){return e&&e.__esModule?e:{default:e}}var p=n.meta={title:"Toggle",toc:["Пример","Свойства  <Toggle />","Свойства  <ToggleOption />"]},h=t.default.createElement(s.default,{code:r.default}),m=t.default.createElement(a.default,{code:g.default}),u=t.default.createElement(a.default,{code:d.default});n.default=function(e){var n=e.components,o=function(e,n){var o={};for(var t in e)n.indexOf(t)>=0||Object.prototype.hasOwnProperty.call(e,t)&&(o[t]=e[t]);return o}(e,["components"]);return t.default.createElement(l.MDXTag,{name:"wrapper",Layout:(0,i.default)(p)(function(e){return e.children}),layoutProps:o,components:n},t.default.createElement(l.MDXTag,{name:"h3",components:n},"Пример"),h,t.default.createElement(l.MDXTag,{name:"h3",components:n},"Свойства ",t.default.createElement(l.MDXTag,{name:"inlineCode",components:n,parentName:"h3"},"<Toggle />")),m,t.default.createElement(l.MDXTag,{name:"h3",components:n},"Свойства ",t.default.createElement(l.MDXTag,{name:"inlineCode",components:n,parentName:"h3"},"<ToggleOption />")),u)}},790:function(e,n){e.exports="/**\n * Опция компонента переключателя\n */\nimport React, {Component, cloneElement} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {injectSheet} from '../theme'\nimport {isolateMixin, middleMixin} from '../utils/mixins'\n\n@injectSheet(\n  theme => ({\n    toggleOption: {\n      extend: [isolateMixin, middleMixin],\n      fontFamily: theme.fontFamily,\n      display: 'inline-block',\n      textAlign: 'center',\n      userSelect: 'none',\n      whiteSpace: 'nowrap',\n      cursor: 'pointer',\n      color: 'inherit',\n      outline: 'none !important',\n      background: 'transparent',\n      '&::-moz-focus-inner': {\n        border: 'none !important',\n        outline: 'none !important'\n      }\n    },\n    'size-small': {\n      fontSize: theme.toggle.sizes.small.fontSize,\n      height: theme.toggle.sizes.small.height,\n      lineHeight: theme.toggle.sizes.small.height - 2 + 'px',\n      padding: `0 ${theme.toggle.sizes.small.paddingHr}px`\n    },\n    'size-medium': {\n      fontSize: theme.toggle.sizes.medium.fontSize,\n      height: theme.toggle.sizes.medium.height,\n      lineHeight: theme.toggle.sizes.medium.height - 2 + 'px',\n      padding: `0 ${theme.toggle.sizes.medium.paddingHr}px`\n    },\n    icon: {\n      display: 'inline-block',\n      marginRight: 10\n    }\n  }),\n  {name: 'ToggleOption'}\n)\nclass ToggleOption extends Component {\n  static propTypes = {\n    /**\n     * Значение, соответствующее этой опции\n     */\n    value: PropTypes.any.isRequired,\n    /**\n     * Css-класс компонента\n     */\n    className: PropTypes.string,\n    /**\n     * Стили перелючателя\n     */\n    style: PropTypes.object,\n    /**\n     * Контент (обычно просто текст)\n     */\n    children: PropTypes.node,\n    /**\n     * Иконка\n     */\n    icon: PropTypes.node,\n    /**\n     * Размер компонента (автоматически проставляется компонентом `<Toggle/>`)\n     */\n    size: PropTypes.oneOf(['small', 'medium']),\n    /**\n     * Выбрана ли эта опция (автоматически проставляется компонентом `<Toggle/>`)\n     */\n    isSelected: PropTypes.bool,\n    /**\n     * Колбек нажатия на кнопку (автоматически проставляется компонентом `<Toggle/>`)\n     */\n    onPress: PropTypes.func,\n    /**\n     * Колбек, принимающий ссылку на ноду (автоматически проставляется компонентом `<Toggle/>`)\n     */\n    nodeRef: PropTypes.func\n  }\n\n  onClick = event => {\n    this.props.onPress(event, this.props.value)\n    if (this.props.onClick) this.props.onClick(event)\n  }\n\n  renderIcon(icon) {\n    if (icon) {\n      const {size, isSelected, theme, classes} = this.props\n      const iconProps = {\n        size: theme.toggle.sizes[size].icon,\n        color: isSelected ? theme.toggle.selectedColor : theme.toggle.color\n      }\n      const initialProps = icon.props || {}\n      const className = classnames(initialProps.className, classes.icon)\n      const resultProps = {...iconProps, ...initialProps, className}\n      return cloneElement(icon, resultProps)\n    }\n  }\n\n  render() {\n    const {\n      icon,\n      size,\n      children,\n      className,\n      nodeRef,\n      classes,\n      isSelected, // eslint-disable-line no-unused-vars\n      onPress, // eslint-disable-line no-unused-vars\n      theme, // eslint-disable-line no-unused-vars\n      ...other\n    } = this.props\n\n    const resultClassName = classnames(\n      classes.toggleOption,\n      classes[`size-${size}`],\n      className\n    )\n\n    return (\n      <button\n        type=\"button\"\n        tabIndex=\"0\"\n        {...other}\n        className={resultClassName}\n        onClick={this.onClick}\n        ref={nodeRef}>\n        {this.renderIcon(icon)}\n        {children}\n      </button>\n    )\n  }\n}\nToggleOption.displayName = 'ruiToggleOption'\nexport default ToggleOption\n"},791:function(e,n){e.exports="/**\n * Компонент переключателя\n */\nimport React, {Component, cloneElement} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {injectSheet} from '../theme'\nimport {isolateMixin, focusSourceMixin} from '../utils/mixins'\n\nconst whenDomReady = new Promise(resolve => {\n  if (document.readyState === 'complete') resolve()\n  else window.addEventListener('load', resolve)\n})\n\n@injectSheet(\n  theme => ({\n    toggle: {\n      extend: isolateMixin,\n      fontFamily: theme.fontFamily,\n      display: 'inline-block',\n      '&$block': {\n        display: 'flex'\n      },\n      '&, & *': {\n        transitionDuration: theme.toggle.animationDuration + 'ms',\n        transitionProperty: 'background, opacity, border, box-shadow'\n      }\n    },\n    option: {\n      '&&': {\n        fontFamily: theme.fontFamily,\n        textAlign: 'center',\n        borderStyle: 'solid',\n        color: theme.toggle.colors.default.text,\n        borderWidth: 1,\n        borderColor: theme.toggle.colors.default.border,\n        background: theme.toggle.colors.default.background,\n        cursor: 'pointer',\n        userSelect: 'none',\n        position: 'relative',\n        display: 'inline-block',\n        marginLeft: -1\n      },\n      '&:first-child': {\n        marginLeft: 0,\n        borderTopLeftRadius: theme.toggle.borderRadius,\n        borderBottomLeftRadius: theme.toggle.borderRadius\n      },\n      '&:last-child': {\n        borderWidth: 1,\n        borderTopRightRadius: theme.toggle.borderRadius,\n        borderBottomRightRadius: theme.toggle.borderRadius\n      },\n      '&:enabled:hover': {\n        zIndex: 1\n      },\n      '&:active': {\n        zIndex: 1\n      },\n      '&:disabled': {\n        color: theme.toggle.colors.disabled.text,\n        cursor: 'not-allowed'\n      }\n    },\n    isSelected: {\n      zIndex: 2,\n      '&:enabled:hover': {\n        zIndex: 3\n      }\n    },\n    regular: {\n      '& $option:disabled': {\n        borderColor: theme.toggle.colors.disabled.border\n      },\n      '& $option:enabled:hover': {\n        borderColor: theme.toggle.colors.hover.border,\n        // '&:before': borderMixin(theme.toggle.colors.hover.border),\n        color: theme.toggle.colors.checked.text\n      },\n      ...focusSourceMixin('other', '& $option:focus', {\n        color: theme.toggle.colors.focus.text\n      }),\n      '& $option:active': {\n        // '&:before': borderMixin(theme.toggle.colors.active.border),\n        color: theme.toggle.colors.active.text,\n        background: theme.toggle.colors.active.background\n      },\n      '& $isSelected:enabled': {\n        borderColor: theme.toggle.colors.checked.border,\n        color: theme.toggle.colors.checked.text\n      },\n      '& $isSelected:enabled:hover': {\n        borderColor: theme.toggle.colors.checkedHover.border,\n        color: theme.toggle.colors.checkedHover.text\n      },\n      '& $isSelected:disabled': {\n        background: theme.toggle.colors.checkedDisabled.background\n      }\n    },\n    transparent: {\n      '& $isSelected': {\n        background: theme.toggle.transparentColors.checked.background\n      },\n      '& $option:enabled:hover': {\n        background: theme.toggle.transparentColors.hover.background\n      },\n      ...focusSourceMixin('other', '& $option:focus', {\n        color: theme.toggle.colors.focus.text\n      }),\n      '& $option:disabled': {\n        borderColor: theme.toggle.transparentColors.disabled.border\n      }\n    },\n    block: {\n      flexDirection: 'row',\n      flexWrap: 'nowrap'\n    },\n    equalWidth: {\n      '& $option': {\n        flex: 1,\n        flexBasis: 0\n      }\n    },\n    'behavior-radio': {\n      '& $isSelected:enabled': {\n        cursor: 'default'\n      }\n    }\n  }),\n  {name: 'Toggle'}\n)\nexport default class Toggle extends Component {\n  static propTypes = {\n    /**\n     * Выбранное значение переключателя\n     */\n    value: PropTypes.any,\n    /**\n     * Функция, вызывающая при изменении значения `function (event: object, newValue: any) {}`\n     */\n    onChange: PropTypes.func,\n    /**\n     * Класс контейнера\n     */\n    className: PropTypes.string,\n    /**\n     * CSS-стили переключателя\n     */\n    style: PropTypes.object,\n    /**\n     * Опции переключателя, обязаны быть компонентами типа `<ToggleOption/>`\n     */\n    children: PropTypes.node,\n    /**\n     * Размер компонента\n     */\n    size: PropTypes.oneOf(['small', 'medium']),\n    /**\n     * Опция, определяющая, поведение переключателя:\n     * `radio` - кнопку нельзя отжать\n     * `toggle` - кнопку можно отжать\n     */\n    behavior: PropTypes.oneOf(['radio', 'toggle']),\n    /**\n     * Отображать переключатель как блочный элемент (т.е. он будет растянут на всю ширину родительского элемента)\n     */\n    block: PropTypes.bool,\n    /**\n     * Все опции переключателя должны быть одинаковой ширины\n     */\n    equalWidth: PropTypes.bool,\n    /**\n     * Перевод компонента в состояние disabled\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Разновидность компонента\n     */\n    variation: PropTypes.oneOf(['regular', 'transparent'])\n  }\n\n  static defaultProps = {\n    size: 'small',\n    behavior: 'radio',\n    block: false,\n    equalWidth: false,\n    disabled: false,\n    variation: 'regular'\n  }\n\n  state = {\n    value: null,\n    minWidth: 0\n  }\n\n  optionsElements = []\n  addElement = ref => {\n    this.optionsElements.push(ref)\n  }\n\n  onValueChange = (event, value) => {\n    if (value === this.value && this.props.behavior === 'toggle') value = null\n    this.setValue(value)\n    if (this.props.onChange) this.props.onChange(event, value)\n  }\n\n  componentWillMount() {\n    this.setValue(this.props.value)\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setValue(nextProps.value)\n  }\n\n  componentDidMount() {\n    // Делаем через таймаут т.к. при начально загрузки страницы jss добавляет стили асинхронно\n    if (this.shouldCalcMinWidth())\n      whenDomReady.then(() => {\n        this.setState({minWidth: this.calcMinWidth()})\n      })\n  }\n\n  calcMinWidth() {\n    return this.optionsElements.reduce(\n      (result, el) => Math.max(el ? el.offsetWidth : 0, result),\n      0\n    )\n  }\n\n  shouldCalcMinWidth() {\n    return this.props.equalWidth && !this.props.block\n  }\n\n  setValue(value) {\n    if (this.value !== value) {\n      this.value = value\n      this.setState({value})\n    }\n  }\n\n  render() {\n    const {\n      children,\n      size,\n      block,\n      equalWidth,\n      behavior,\n      disabled,\n      variation,\n      className,\n      classes,\n      theme, // eslint-disable-line no-unused-vars\n      ...other\n    } = this.props\n\n    this.optionsElements = []\n    let i = 0\n    const options = React.Children.map(children, child => {\n      if (!child.type || child.type.displayName !== 'ruiToggleOption')\n        throw new Error(\n          'Child component should be instance of <ToggleOption />'\n        )\n      const {value} = child.props\n      const isSelected = value === this.state.value\n      return cloneElement(child, {\n        size,\n        disabled,\n        isSelected,\n        'aria-pressed': isSelected,\n        key:\n          child.key !== undefined\n            ? child.key\n            : typeof value === 'string' || typeof value === 'number'\n              ? value\n              : i++,\n        onPress: this.onValueChange,\n        nodeRef: this.shouldCalcMinWidth() ? this.addElement : null,\n        className: classnames(\n          classes.option,\n          isSelected && classes.isSelected,\n          child.props.className\n        ),\n        style: {...child.props.style, minWidth: this.state.minWidth}\n      })\n    })\n\n    const resultClassName = classnames(\n      className,\n      classes.toggle,\n      classes[`behavior-${behavior}`],\n      block && classes.block,\n      classes[variation],\n      equalWidth && classes.equalWidth\n    )\n\n    return (\n      <div {...other} className={resultClassName}>\n        {options}\n      </div>\n    )\n  }\n}\n"},792:function(e,n){e.exports='import {Toggle, ToggleOption} from \'rambler-ui/Toggle\'\nimport React, {Component} from \'react\'\nimport {ApplyTheme} from \'rambler-ui/theme\'\n\nexport default class ToggleExample extends Component {\n  state = {\n    toggleValue: \'Rambler\'\n  }\n\n  onChange = (event, newValue) => {\n    this.setState({toggleValue: newValue})\n  }\n\n  render() {\n    return (\n      <ApplyTheme>\n        <div>\n          <div style={{width: 480, marginBottom: 20}}>\n            <h4>block, equalWidth</h4>\n            <Toggle\n              value={this.state.toggleValue}\n              className="toggle"\n              onChange={this.onChange}\n              block={true}\n              equalWidth={true}>\n              <ToggleOption value="Rambler">Rambler&Co</ToggleOption>\n              <ToggleOption value="Yandex">Yandex</ToggleOption>\n              <ToggleOption value="Mail">Mail.ru</ToggleOption>\n              <ToggleOption value="Google">Google</ToggleOption>\n            </Toggle>\n          </div>\n          <div style={{marginBottom: 20}}>\n            <h4>disabled, equalWidth</h4>\n            <Toggle\n              value={this.state.toggleValue}\n              onChange={this.onChange}\n              disabled={true}\n              equalWidth={true}>\n              <ToggleOption value="Google">Google</ToggleOption>\n              <ToggleOption value="Rambler">Rambler&Co</ToggleOption>\n              <ToggleOption value="Yandex">Yandex</ToggleOption>\n              <ToggleOption value="Mail">Mail.ru</ToggleOption>\n            </Toggle>\n          </div>\n          <div style={{marginBottom: 20}}>\n            <h4>size: medium, behavior: toggle</h4>\n            <Toggle\n              value={this.state.toggleValue}\n              onChange={this.onChange}\n              size="medium"\n              behavior="toggle">\n              <ToggleOption value="Yandex">Yandex</ToggleOption>\n              <ToggleOption value="Google">Google</ToggleOption>\n              <ToggleOption value="Mail">Mail.ru</ToggleOption>\n              <ToggleOption value="Rambler">Rambler&Co</ToggleOption>\n            </Toggle>\n          </div>\n          <div style={{marginBottom: 20}}>\n            <h4>variation: transparent</h4>\n            <Toggle\n              value={this.state.toggleValue}\n              onChange={this.onChange}\n              variation="transparent">\n              <ToggleOption value="Mail">Mail.ru</ToggleOption>\n              <ToggleOption value="Yandex">Yandex</ToggleOption>\n              <ToggleOption value="Rambler">Rambler&Co</ToggleOption>\n              <ToggleOption value="Google">Google</ToggleOption>\n            </Toggle>\n          </div>\n          <div style={{marginBottom: 20}}>\n            <h4>variation: transparent, disabled</h4>\n            <Toggle\n              value={this.state.toggleValue}\n              onChange={this.onChange}\n              disabled={true}\n              variation="transparent">\n              <ToggleOption value="Rambler">Rambler&Co</ToggleOption>\n              <ToggleOption value="Mail">Mail.ru</ToggleOption>\n              <ToggleOption value="Google">Google</ToggleOption>\n              <ToggleOption value="Yandex">Yandex</ToggleOption>\n            </Toggle>\n          </div>\n          <br />\n          <div>\n            this.state.toggleValue: <b>{this.state.toggleValue}</b>\n          </div>\n        </div>\n      </ApplyTheme>\n    )\n  }\n}\n'}}]);