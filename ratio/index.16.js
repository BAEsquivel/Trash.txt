(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{214:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.meta=void 0;var o=u(t(2)),a=t(528),i=u(t(529)),s=u(t(531)),r=u(t(530)),l=u(t(816)),c=u(t(815)),m=u(t(814)),d=u(t(813)),p=u(t(812));function u(n){return n&&n.__esModule?n:{default:n}}var v=e.meta={title:"SideNav",toc:["Пример","Пример со ссылками","Пример использования с  react-router","Свойства  <SideNav />","Свойства  <SideNavItem />"]},h=o.default.createElement(s.default,{code:l.default}),f=o.default.createElement(s.default,{code:c.default}),N=o.default.createElement(s.default,{code:m.default,canEdit:!1,showPreview:!1}),S=o.default.createElement(r.default,{code:d.default}),I=o.default.createElement(r.default,{code:p.default});e.default=function(n){var e=n.components,t=function(n,e){var t={};for(var o in n)e.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t}(n,["components"]);return o.default.createElement(a.MDXTag,{name:"wrapper",Layout:(0,i.default)(v)(function(n){return n.children}),layoutProps:t,components:e},o.default.createElement(a.MDXTag,{name:"h3",components:e},"Пример"),h,o.default.createElement(a.MDXTag,{name:"h3",components:e},"Пример со ссылками"),f,o.default.createElement(a.MDXTag,{name:"h3",components:e},"Пример использования с ",o.default.createElement(a.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"react-router")),N,o.default.createElement(a.MDXTag,{name:"h3",components:e},"Свойства ",o.default.createElement(a.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<SideNav />")),S,o.default.createElement(a.MDXTag,{name:"h3",components:e},"Свойства ",o.default.createElement(a.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<SideNavItem />")),I)}},812:function(n,e){n.exports="/**\n * Элемент компонента боковой навигации\n */\nimport React, {Component, cloneElement, isValidElement} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {injectSheet} from '../theme'\nimport {isolateMixin, middleMixin} from '../utils/mixins'\n\n@injectSheet(\n  theme => ({\n    sideNavItem: {\n      extend: [isolateMixin, middleMixin],\n      fontFamily: theme.fontFamily,\n      display: 'block',\n      textAlign: 'left',\n      userSelect: 'none',\n      whiteSpace: 'nowrap',\n      cursor: 'pointer',\n      position: 'relative',\n      textDecoration: 'none',\n      fontSize: theme.sideNav.fontSize,\n      height: theme.sideNav.height,\n      marginTop: theme.sideNav.betweenMargin,\n      marginBottom: theme.sideNav.betweenMargin,\n      color: theme.sideNav.colors.default.text,\n      '&:first-child': {\n        marginTop: 0\n      },\n      '&:last-child': {\n        marginBottom: 0\n      },\n      'a&:visited': {\n        color: theme.sideNav.colors.default.text\n      },\n      '&$isSelected, &:hover, a&:hover': {\n        color: theme.sideNav.colors.selected.text\n      }\n    },\n    icon: {\n      display: 'inline-block'\n    },\n    isSelected: {\n      cursor: 'default'\n    },\n    medium: {\n      '& $icon': {\n        marginRight: 10\n      }\n    }\n  }),\n  {name: 'SideNavItem'}\n)\nclass SideNavItem extends Component {\n  static propTypes = {\n    /**\n     * Css-класс компонента\n     */\n    className: PropTypes.string,\n    /**\n     * Стили перелючателя\n     */\n    style: PropTypes.object,\n    /**\n     * Контент\n     */\n    children: PropTypes.node,\n    /**\n     * Иконка\n     */\n    icon: PropTypes.node.isRequired,\n    /**\n     * Размер компонента (автоматически проставляется компонентом `<SideNav />`)\n     */\n    size: PropTypes.oneOf(['small', 'medium']),\n    /**\n     * Значение, соответствующее этому элементу\n     */\n    value: PropTypes.any,\n    /**\n     * Выбран ли элемент (автоматически проставляется компонентом `<SideNav />`)\n     */\n    isSelected: PropTypes.bool,\n    /**\n     * Если указан href, то элемент будет ссылкой\n     */\n    href: PropTypes.string,\n    /**\n     * Атрибут target для ссылки, если указан атрибут href\n     */\n    target: PropTypes.string,\n    /**\n     * Элемент, который содержит контент, например `<Link />` в случае с `react-router`\n     */\n    container: PropTypes.element,\n    /**\n     * Колбек нажатия на элемент (автоматически проставляется компонентом `<SideNav />`)\n     */\n    onPress: PropTypes.func\n  }\n\n  onClick = event => {\n    const {value, onClick, onPress} = this.props\n\n    if (onPress) onPress(event, value)\n\n    if (onClick) onClick(event)\n  }\n\n  renderIcon(icon) {\n    if (icon) {\n      const {classes} = this.props\n      return cloneElement(icon, {\n        color: 'currentColor',\n        ...icon.props,\n        className: classnames(icon.props.className, classes.icon)\n      })\n    }\n  }\n\n  render() {\n    const {\n      className,\n      children,\n      icon,\n      size,\n      isSelected,\n      href,\n      container,\n      classes,\n      theme, // eslint-disable-line no-unused-vars\n      onPress, // eslint-disable-line no-unused-vars\n      ...other\n    } = this.props\n\n    const mediumSize = size === 'medium'\n\n    const resultClassName = classnames(\n      classes.sideNavItem,\n      {\n        [classes.medium]: mediumSize,\n        [classes.isSelected]: isSelected && !container\n      },\n      className\n    )\n\n    const resultContainer = isValidElement(container) ? (\n      container\n    ) : href ? (\n      <a href={href} />\n    ) : (\n      <div />\n    )\n\n    const resultProps = {\n      ...other,\n      className: resultClassName,\n      onClick: this.onClick,\n      ...(container &&\n        typeof container.type !== 'string' && {\n          activeClassName: classes.isSelected\n        })\n    }\n\n    const resultChildren = [this.renderIcon(icon), mediumSize && children]\n\n    return cloneElement(resultContainer, resultProps, ...resultChildren)\n  }\n}\n\nSideNavItem.displayName = 'ruiSideNavItem'\n\nexport default SideNavItem\n"},813:function(n,e){n.exports="/**\n * Компонент боковой навигации\n */\nimport React, {Component, Children, cloneElement} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {injectSheet} from '../theme'\nimport {isolateMixin} from '../utils/mixins'\n\n@injectSheet(\n  theme => ({\n    sideNav: {\n      extend: isolateMixin,\n      fontFamily: theme.fontFamily,\n      display: 'inline-block',\n      '&, & *': {\n        transitionDuration: '.2s',\n        transitionProperty: 'background, opacity, border, box-shadow'\n      }\n    },\n    block: {\n      display: 'block'\n    }\n  }),\n  {name: 'SideNav'}\n)\nexport default class SideNav extends Component {\n  static propTypes = {\n    /**\n     * Класс контейнера\n     */\n    className: PropTypes.string,\n    /**\n     * CSS-стили навигации\n     */\n    style: PropTypes.object,\n    /**\n     * Элементы навигации, обязаны быть компонентами типа `<SideNavItem/>`\n     */\n    children: PropTypes.node,\n    /**\n     * Размер компонента:\n     * `small` - только иконки\n     * `medium` - иконки с текстом\n     */\n    size: PropTypes.oneOf(['small', 'medium']),\n    /**\n     * Выбранное значение навигации\n     */\n    value: PropTypes.any,\n    /**\n     * Отображать навигацию как блочный элемент (т.е. он будет растянут на всю ширину родительского элемента)\n     */\n    block: PropTypes.bool,\n    /**\n     * Функция, вызывающая при изменении значения `function (event: object, newValue: any) {}`\n     */\n    onChange: PropTypes.func\n  }\n\n  static defaultProps = {\n    value: null,\n    block: false,\n    size: 'medium'\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      value: props.value\n    }\n\n    this.value = props.value\n  }\n\n  componentWillReceiveProps({value}) {\n    this.setValue(value)\n  }\n\n  setValue(value) {\n    if (value !== this.value) {\n      this.value = value\n      this.setState({value})\n    }\n  }\n\n  onValueChange = (event, value) => {\n    this.setValue(value)\n\n    if (this.props.onChange) this.props.onChange(event, value)\n  }\n\n  render() {\n    const {\n      size,\n      block,\n      children,\n      className,\n      classes,\n      theme, // eslint-disable-line no-unused-vars\n      ...other\n    } = this.props\n\n    const resultChildren = Children.map(children, child => {\n      if (!child.type || child.type.displayName !== 'ruiSideNavItem')\n        throw new Error('Child component should be instance of <SideNavItem />')\n\n      const hasValue = 'value' in child.props\n      const isSelected = hasValue && child.props.value === this.state.value\n\n      return cloneElement(child, {\n        size,\n        isSelected,\n        ...(hasValue && {\n          onPress: this.onValueChange\n        })\n      })\n    })\n\n    const resultClassName = classnames(\n      classes.sideNav,\n      {\n        [classes.block]: block\n      },\n      className\n    )\n\n    return (\n      <div {...other} className={resultClassName}>\n        {resultChildren}\n      </div>\n    )\n  }\n}\n"},814:function(n,e){n.exports="import React from 'react'\nimport {Link} from 'react-router'\nimport {SideNav, SideNavItem} from 'rambler-ui/SideNav'\nimport {BookIcon, EmailIcon, PhoneIcon} from 'rambler-ui/icons/forms'\n\nexport default () => (\n  <div>\n    <SideNav>\n      <SideNavItem container={<Link to=\"/general\" />} icon={<BookIcon />}>\n        Личные данные\n      </SideNavItem>\n      <SideNavItem container={<Link to=\"/email\" />} icon={<EmailIcon />}>\n        Адреса электронной почты\n      </SideNavItem>\n      <SideNavItem container={<Link to=\"/phone\" />} icon={<PhoneIcon />}>\n        Телефонные номера\n      </SideNavItem>\n    </SideNav>\n  </div>\n)\n"},815:function(n,e){n.exports="import React, {Component} from 'react'\nimport {SideNav, SideNavItem} from 'rambler-ui/SideNav'\nimport {TickIcon} from 'rambler-ui/icons/forms'\nimport {FacebookIcon} from 'rambler-ui/icons/profiles'\nimport {RamblerAutoIcon} from 'rambler-ui/icons/services'\nimport {ApplyTheme} from 'rambler-ui/theme'\n\nexport default class SideNavExampleHref extends Component {\n  render() {\n    return (\n      <ApplyTheme>\n        <div>\n          <div style={{width: '300px', display: 'inline-block'}}>\n            <SideNav>\n              <SideNavItem href=\"#/components/icons/forms\" icon={<TickIcon />}>\n                Иконки форм\n              </SideNavItem>\n              <SideNavItem\n                href=\"#/components/icons/profiles\"\n                icon={<FacebookIcon />}>\n                Иконки профилей\n              </SideNavItem>\n              <SideNavItem\n                href=\"#/components/icons/services\"\n                icon={<RamblerAutoIcon />}>\n                Иконки сервисов\n              </SideNavItem>\n            </SideNav>\n          </div>\n        </div>\n      </ApplyTheme>\n    )\n  }\n}\n"},816:function(n,e){n.exports='import React, {Component} from \'react\'\nimport {SideNav, SideNavItem} from \'rambler-ui/SideNav\'\nimport {\n  BookIcon,\n  EmailIcon,\n  PhoneIcon,\n  CreditCardIcon,\n  WizardIcon\n} from \'rambler-ui/icons/forms\'\nimport {ApplyTheme} from \'rambler-ui/theme\'\n\nexport default class SideNavExample extends Component {\n  state = {\n    value: \'general\'\n  }\n\n  onChange = (event, newValue) => {\n    this.setState({value: newValue})\n  }\n\n  render() {\n    return (\n      <ApplyTheme>\n        <div>\n          <div\n            style={{width: \'300px\', marginBottom: 40, display: \'inline-block\'}}>\n            <SideNav value={this.state.value} onChange={this.onChange}>\n              <SideNavItem value="general" icon={<BookIcon />}>\n                Личные данные\n              </SideNavItem>\n              <SideNavItem value="email" icon={<EmailIcon />}>\n                Адреса электронной почты\n              </SideNavItem>\n              <SideNavItem value="phone" icon={<PhoneIcon />}>\n                Телефонные номера\n              </SideNavItem>\n              <SideNavItem value="cards" icon={<CreditCardIcon />}>\n                Платежные средства\n              </SideNavItem>\n              <SideNavItem value="social" icon={<WizardIcon />}>\n                Социальные аккаунты\n              </SideNavItem>\n            </SideNav>\n          </div>\n          <div\n            style={{width: \'300px\', marginBottom: 40, display: \'inline-block\'}}>\n            <SideNav\n              size="small"\n              value={this.state.value}\n              onChange={this.onChange}>\n              <SideNavItem value="general" icon={<BookIcon />}>\n                Личные данные\n              </SideNavItem>\n              <SideNavItem value="email" icon={<EmailIcon />}>\n                Адреса электронной почты\n              </SideNavItem>\n              <SideNavItem value="phone" icon={<PhoneIcon />}>\n                Телефонные номера\n              </SideNavItem>\n              <SideNavItem value="cards" icon={<CreditCardIcon />}>\n                Платежные средства\n              </SideNavItem>\n              <SideNavItem value="social" icon={<WizardIcon />}>\n                Социальные аккаунты\n              </SideNavItem>\n            </SideNav>\n          </div>\n          <div>\n            this.state.value: <b>{this.state.value}</b>\n          </div>\n        </div>\n      </ApplyTheme>\n    )\n  }\n}\n'}}]);