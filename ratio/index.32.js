(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{230:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.meta=void 0;var o=u(t(2)),i=t(528),s=u(t(529)),r=u(t(531)),l=u(t(530)),a=u(t(857)),c=u(t(856)),p=u(t(855));function u(n){return n&&n.__esModule?n:{default:n}}var d=e.meta={title:"Button",toc:["Пример","Пример использования с  react-router","Свойства  <Button />"]},m=o.default.createElement(r.default,{code:a.default}),f=o.default.createElement(r.default,{code:c.default,canEdit:!1,showPreview:!1}),h=o.default.createElement(l.default,{code:p.default});e.default=function(n){var e=n.components,t=function(n,e){var t={};for(var o in n)e.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t}(n,["components"]);return o.default.createElement(i.MDXTag,{name:"wrapper",Layout:(0,s.default)(d)(function(n){return n.children}),layoutProps:t,components:e},o.default.createElement(i.MDXTag,{name:"h3",components:e},"Пример"),m,o.default.createElement(i.MDXTag,{name:"h3",components:e},"Пример использования с ",o.default.createElement(i.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"react-router")),f,o.default.createElement(i.MDXTag,{name:"h3",components:e},"Свойства ",o.default.createElement(i.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<Button />")),h)}},855:function(n,e){n.exports="/**\n * Компонент кнопки\n * Скетч: https://app.zeplin.io/project.html#pid=5788d29d450aa06b5691c466&sid=5788d41ba2e261bb69d6c68e\n */\n\nimport React, {PureComponent, cloneElement, isValidElement} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport Spinner from '../Spinner'\nimport {injectSheet} from '../theme'\nimport {\n  middleMixin,\n  isolateMixin,\n  fontSmoothingMixin,\n  ifMobile,\n  focusSourceMixin\n} from '../utils/mixins'\nimport '../utils/focus-source'\n\n@injectSheet(\n  theme => ({\n    button: {\n      extend: isolateMixin,\n      fontFamily: theme.button.fontFamily,\n      fontStyle: theme.button.fontStyle,\n      fontWeight: theme.button.fontWeight,\n      letterSpacing: theme.button.letterSpacing,\n      textTransform: theme.button.textTransform,\n      textAlign: 'center',\n      cursor: 'pointer',\n      boxSizing: 'border-box',\n      textDecoration: 'none !important',\n      outline: 'none !important',\n      position: 'relative',\n      display: 'inline-block',\n      border: 'none',\n      userSelect: 'none',\n      borderRadius: theme.button.borderRadius,\n      ...ifMobile({\n        fontWeight: theme.button.mobile.fontWeight,\n        letterSpacing: theme.button.mobile.letterSpacing\n      }),\n      '&, & *': {\n        transition: 'background-color .2s, border .2s, box-shadow .2s'\n      },\n      '&:before, &:after': {\n        content: '\"\"',\n        display: 'block',\n        position: 'absolute',\n        pointerEvents: 'none',\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        border: '1px solid transparent',\n        transition: 'all .2s',\n        borderRadius: theme.button.borderRadius\n      },\n      '&[disabled]': {pointerEvents: 'none'},\n      '&::-moz-focus-inner': {\n        border: 'none !important',\n        outline: 'none !important'\n      }\n    },\n    isRounded: {\n      '&$button, &:before, &:after': {\n        borderRadius: '9999px !important'\n      }\n    },\n    isLoading: {\n      pointerEvents: 'none',\n      opacity: 0\n    },\n    loader: {\n      fontSize: 3,\n      ...ifMobile({\n        fontSize: 4\n      })\n    },\n    content: {\n      extend: [middleMixin, fontSmoothingMixin],\n      display: 'block',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      position: 'relative',\n      padding: '0 20px',\n      ...ifMobile({\n        padding: '0 25px'\n      })\n    },\n    block: {\n      display: 'block',\n      width: '100%'\n    },\n    'size-medium': {\n      fontSize: theme.button.sizes.medium.fontSize,\n      ...ifMobile({\n        fontSize: theme.button.mobile.sizes.medium.fontSize\n      }),\n      '& $content': {\n        height: theme.button.sizes.medium.height,\n        lineHeight: theme.button.sizes.medium.height + 'px',\n        ...ifMobile({\n          height: theme.button.mobile.sizes.medium.height,\n          lineHeight: theme.button.mobile.sizes.medium.height + 'px'\n        })\n      }\n    },\n    'size-small': {\n      fontSize: theme.button.sizes.small.fontSize,\n      ...ifMobile({\n        fontSize: theme.button.mobile.sizes.small.fontSize\n      }),\n      '& $content': {\n        height: theme.button.sizes.small.height,\n        lineHeight: theme.button.sizes.small.height + 'px',\n        ...ifMobile({\n          height: theme.button.mobile.sizes.small.height,\n          lineHeight: theme.button.mobile.sizes.small.height + 'px'\n        })\n      }\n    },\n    overlay: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      zIndex: 1,\n      opacity: 0,\n      width: '100%',\n      cursor: 'pointer'\n    },\n    icon: {\n      display: 'inline-block',\n      marginTop: -2,\n      transition: 'fill .2s'\n    },\n    'iconPosition-right': {\n      '& $icon': {\n        marginLeft: 5,\n        ...ifMobile({\n          marginLeft: 10\n        })\n      }\n    },\n    'iconPosition-left': {\n      '& $icon': {\n        marginRight: 5,\n        ...ifMobile({\n          marginRight: 10\n        })\n      }\n    },\n    ...['primary', 'secondary', 'outline', 'flat', 'danger'].reduce(\n      (result, type) => {\n        const conf = theme.button.types[type]\n        const offset = conf.outlineOffset || 0\n\n        const setThemeForSelector = (colors, outlineOffset) => ({\n          background: colors.background,\n          '&, & *': {\n            color: colors.text\n          },\n          '&:before': {\n            ...(colors.border && {\n              borderColor: colors.border\n            })\n          },\n          '&:after': {\n            ...(colors.outline && {\n              left: -outlineOffset,\n              right: -outlineOffset,\n              top: -outlineOffset,\n              bottom: -outlineOffset,\n              borderColor: colors.outline,\n              borderRadius: theme.button.borderRadius + outlineOffset / 1.5\n            })\n          },\n          '& $icon': {\n            fill: colors.icon\n          }\n        })\n\n        return {\n          ...result,\n          [`type-${type}`]: {\n            '&:active:active': setThemeForSelector(conf.colors.active, offset),\n            '&:hover': setThemeForSelector(conf.colors.hover, offset),\n            '&[disabled]': setThemeForSelector(conf.colors.disabled, offset),\n            ...focusSourceMixin(\n              'other',\n              '&:focus',\n              setThemeForSelector(conf.colors.focus, offset)\n            ),\n            ...setThemeForSelector(conf.colors.default, offset),\n            '& $loader': {\n              color: conf.colors.default.loader\n            }\n          }\n        }\n      },\n      {}\n    )\n  }),\n  {name: 'Button'}\n)\nexport default class Button extends PureComponent {\n  static propTypes = {\n    /**\n     * Тип стиля кнопки\n     */\n    type: PropTypes.oneOf([\n      'primary',\n      'secondary',\n      'outline',\n      'flat',\n      'danger'\n    ]),\n    /**\n     * Если указан href, то кнопка будет ссылкой\n     */\n    href: PropTypes.string,\n    /**\n     * Атрибут target для ссылки, если указан атрибут href\n     */\n    target: PropTypes.string,\n    /**\n     * Css-класс\n     */\n    className: PropTypes.string,\n    /**\n     * Inline-стили\n     */\n    style: PropTypes.object,\n    /**\n     * Контент для кнопки\n     */\n    children: PropTypes.node,\n    /**\n     * Иконка для кнопки\n     */\n    icon: PropTypes.node,\n    /**\n     * Позиция иконки: слева/справа\n     */\n    iconPosition: PropTypes.oneOf(['left', 'right']),\n    /**\n     * Размер кнопки\n     */\n    size: PropTypes.oneOf(['small', 'medium']),\n    /**\n     * Обработчик клика\n     */\n    onClick: PropTypes.func,\n    /**\n     * Элемент, который содержит контент, например `<Link />`\n     * в случае с `react-router`\n     */\n    container: PropTypes.element,\n    /**\n     * Элемент, который прозрачно накладывается на кнопку (Например `<input type=\"file\" />`)\n     */\n    overlay: PropTypes.element,\n    /**\n     * Отключаем кнопку/ссылку\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Отображать кнопку как блочный элемент\n     */\n    block: PropTypes.bool,\n    /**\n     * Тип кнопки\n     */\n    buttonType: PropTypes.string,\n    /**\n     * Ширина кнопки\n     */\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    /**\n     * Показывать индикатор загрузки\n     */\n    loading: PropTypes.bool,\n    /**\n     * Закругленная кнопка\n     */\n    rounded: PropTypes.bool\n  }\n\n  static defaultProps = {\n    type: 'primary',\n    size: 'medium',\n    buttonType: 'button',\n    iconPosition: 'left',\n    block: false\n  }\n\n  renderIcon(icon) {\n    if (icon) {\n      const {theme, size, classes} = this.props\n      const iconProps = {\n        size: theme.button.sizes[size].icon,\n        color: null\n      }\n      const initialProps = icon.props || {}\n      const className = classnames(initialProps.className, classes.icon)\n      const resultProps = {...iconProps, ...initialProps, className}\n      return cloneElement(icon, resultProps)\n    }\n  }\n\n  render() {\n    const {\n      icon,\n      children,\n      size,\n      type,\n      href,\n      container,\n      buttonType,\n      disabled,\n      loading,\n      block,\n      className,\n      overlay,\n      width,\n      iconPosition,\n      rounded,\n      style = {},\n      classes, // eslint-disable-line no-unused-vars\n      theme, // eslint-disable-line no-unused-vars\n      ...other\n    } = this.props\n\n    const iconLeft = iconPosition === 'left'\n    const iconEl = this.renderIcon(icon)\n\n    const resultStyle = {\n      width,\n      ...style\n    }\n    const resultClassName = classnames(\n      classes.button,\n      rounded && classes.isRounded,\n      classes[`type-${type}`],\n      classes[`size-${size}`],\n      classes[`iconPosition-${iconPosition}`],\n      className,\n      {\n        [classes.block]: block\n      }\n    )\n\n    const resultChildren = (\n      <span\n        className={classnames(classes.content, loading && classes.isLoading)}>\n        {iconLeft && iconEl}\n        {children}\n        {!iconLeft && iconEl}\n        {overlay && cloneElement(overlay, {className: classes.overlay})}\n      </span>\n    )\n\n    const resultProps = {\n      ...other,\n      style: resultStyle,\n      className: resultClassName,\n      disabled: disabled ? 'disabled' : null\n    }\n\n    const resultContainer = isValidElement(container) ? (\n      container\n    ) : href ? (\n      <a href={href} />\n    ) : overlay ? (\n      <div />\n    ) : (\n      <button type={buttonType} />\n    )\n\n    return cloneElement(\n      resultContainer,\n      resultProps,\n      resultChildren,\n      loading && <Spinner className={classes.loader} color={null} />\n    )\n  }\n}\n"},856:function(n,e){n.exports="import Button from 'rambler-ui/Button'\nimport {Link} from 'react-router'\n\nexport default () => (\n  <div>\n    <Button container={<Link to=\"/home\" />}>Кнопка-ссылка</Button>\n  </div>\n)\n"},857:function(n,e){n.exports='import Button from \'rambler-ui/Button\'\nimport React, {Component} from \'react\'\nimport ChevronRightIcon from \'rambler-ui/icons/forms/ChevronRightIcon\'\nimport {ApplyTheme} from \'rambler-ui/theme\'\n\nconst types = [\'primary\', \'danger\', \'secondary\', \'outline\', \'flat\']\n\nexport default class ButtonExample extends Component {\n  state = {\n    loading: false\n  }\n\n  onServerResponse() {\n    setTimeout(() => {\n      this.setState({loading: false})\n    }, 1000)\n  }\n\n  handleClick = () => {\n    this.setState({loading: true})\n    this.onServerResponse()\n  }\n\n  render() {\n    return (\n      <ApplyTheme>\n        <div>\n          {types.map(type => (\n            <div key={type}>\n              <Button\n                style={{margin: 20}}\n                icon={<ChevronRightIcon />}\n                iconPosition="right"\n                type={type}>\n                {type}\n              </Button>\n              <Button\n                style={{margin: 20}}\n                icon={<ChevronRightIcon />}\n                iconPosition="right"\n                type={type}\n                loading={true}>\n                {type}\n              </Button>\n              <Button\n                style={{margin: 20}}\n                icon={<ChevronRightIcon />}\n                iconPosition="right"\n                type={type}\n                size="small">\n                {type} small\n              </Button>\n              <Button\n                style={{margin: 20}}\n                icon={<ChevronRightIcon />}\n                iconPosition="right"\n                type={type}\n                disabled={true}>\n                {type} disabled\n              </Button>\n            </div>\n          ))}\n          <div\n            style={{\n              width: 300,\n              padding: 20,\n              margin: 20,\n              border: \'1px solid #eee\'\n            }}>\n            <Button style={{marginBottom: 20}} block={true} size="small">\n              Primary block\n            </Button>\n            <Button block={true} type="secondary" size="small" disabled>\n              Primary block disabled\n            </Button>\n          </div>\n          <div>\n            <Button\n              style={{margin: 20}}\n              rounded={true}\n              type="secondary"\n              size="small"\n              onClick={this.handleClick}\n              loading={this.state.loading}>\n              Secondary loader\n            </Button>\n            <Button\n              style={{margin: 20}}\n              size="small"\n              overlay={<input type="file" name="hello" />}>\n              Upload file\n            </Button>\n            <Button\n              icon={<ChevronRightIcon />}\n              iconPosition="right"\n              style={{margin: 20}}\n              rounded={true}>\n              Rounded With Icon\n            </Button>\n            <Button style={{margin: 20}} rounded={true}>\n              Rounded\n            </Button>\n          </div>\n        </div>\n      </ApplyTheme>\n    )\n  }\n}\n'}}]);