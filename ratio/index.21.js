(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{219:function(n,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.meta=void 0;var i=m(o(2)),e=o(528),a=m(o(529)),s=m(o(531)),r=m(o(530)),c=m(o(829)),l=m(o(828)),p=m(o(827));function m(n){return n&&n.__esModule?n:{default:n}}var f=t.meta={title:"Notification",toc:["Пример","Пример с декоратором","Свойства  <Notification />"]},d=i.default.createElement(s.default,{code:c.default}),u=i.default.createElement(s.default,{code:l.default}),h=i.default.createElement(r.default,{code:p.default});t.default=function(n){var t=n.components,o=function(n,t){var o={};for(var i in n)t.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(n,i)&&(o[i]=n[i]);return o}(n,["components"]);return i.default.createElement(e.MDXTag,{name:"wrapper",Layout:(0,a.default)(f)(function(n){return n.children}),layoutProps:o,components:t},i.default.createElement(e.MDXTag,{name:"h3",components:t},"Пример"),d,i.default.createElement(e.MDXTag,{name:"h3",components:t},"Пример с декоратором"),u,i.default.createElement(e.MDXTag,{name:"h3",components:t},"Свойства ",i.default.createElement(e.MDXTag,{name:"inlineCode",components:t,parentName:"h3"},"<Notification />")),h)}},827:function(n,t){n.exports="import React, {PureComponent} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport IconButton from '../IconButton'\nimport ClearIcon from '../icons/forms/ClearIcon'\nimport ChevronRightIcon from '../icons/forms/ChevronRightIcon'\nimport VisibilityAnimation from '../VisibilityAnimation'\nimport OnClickOutside from '../OnClickOutside'\nimport renderToLayer from '../hoc/render-to-layer'\nimport zIndexStack from '../hoc/z-index-stack'\nimport {SNACKBAR_ZINDEX} from '../constants/z-indexes'\nimport {injectSheet} from '../theme'\nimport {isolateMixin, middleMixin, ifDesktop} from '../utils/mixins'\n\n@zIndexStack(SNACKBAR_ZINDEX)\n@renderToLayer\n@injectSheet(\n  theme => ({\n    notification: {\n      extend: isolateMixin,\n      fontFamily: theme.fontFamily,\n      position: 'fixed',\n      left: 15,\n      right: 15,\n      bottom: 5,\n      boxSizing: 'border-box',\n      boxShadow: theme.notification.boxShadow,\n      padding: theme.notification.padding,\n      backgroundColor: theme.notification.colors.background,\n      color: theme.notification.colors.text,\n      fontSize: theme.notification.fontSize,\n      opacity: 0,\n      transitionDuration: theme.notification.animationDuration,\n      transitionProperty: 'bottom, opacity',\n      ...ifDesktop({\n        width: 335,\n        borderRadius: theme.notification.borderRadius\n      })\n    },\n    ...ifDesktop({\n      left: {\n        right: 'auto'\n      },\n      right: {\n        left: 'auto',\n        right: 15\n      }\n    }),\n    isVisible: {\n      bottom: 15,\n      opacity: 1\n    },\n    title: {\n      extend: middleMixin,\n      fontSize: theme.notification.titleSize,\n      fontWeight: 500\n    },\n    icon: {\n      extend: middleMixin,\n      display: 'inline-block',\n      borderRadius: '50%',\n      marginRight: 10,\n      width: 39,\n      height: 39,\n      backgroundColor: theme.notification.colors.iconBackground,\n      textAlign: 'center'\n    },\n    body: {\n      marginTop: 10\n    },\n    actionButton: {\n      extend: middleMixin,\n      boxSizing: 'border-box',\n      outline: 'none',\n      border: 0,\n      margin: 0,\n      marginTop: 12,\n      padding: 0,\n      height: 20,\n      backgroundColor: 'transparent',\n      color: theme.notification.actionButton.colors.default,\n      fontSize: theme.notification.actionButton.fontSize,\n      fontWeight: 500,\n      cursor: 'pointer',\n      transitionDuration: theme.notification.animationDuration,\n      transitionProperty: 'color',\n      '&:hover:not(:active)': {\n        color: theme.notification.actionButton.colors.hover\n      },\n      '&:active': {\n        color: theme.notification.actionButton.colors.active\n      },\n      '& svg': {\n        marginLeft: 7\n      }\n    },\n    close: {\n      position: 'absolute !important',\n      top: 13,\n      right: 13\n    }\n  }),\n  {name: 'Notification'}\n)\nexport default class Notification extends PureComponent {\n  static propTypes = {\n    /**\n     * Css-класс\n     */\n    className: PropTypes.string,\n    /**\n     * Inline-стили\n     */\n    style: PropTypes.object,\n    /**\n     * Контролирует видимость уведомления\n     */\n    isOpened: PropTypes.bool,\n    /**\n     * Иконка\n     */\n    icon: PropTypes.node,\n    /**\n     * Тайтл\n     */\n    title: PropTypes.node.isRequired,\n    /**\n     * Сообщение\n     */\n    body: PropTypes.node.isRequired,\n    /**\n     * Кнопка действия\n     */\n    actionButton: PropTypes.string,\n    /**\n     * Позиция по оси X\n     */\n    positionX: PropTypes.oneOf(['left', 'right']),\n    /**\n     * Кнопка закрытия\n     */\n    showClose: PropTypes.bool,\n    /**\n     * Закрытие по клику вне\n     */\n    closeOnClickOutside: PropTypes.bool,\n    /**\n     * Коллбек вызывающийся при нажатии на кнопку действия\n     */\n    onAction: PropTypes.func,\n    /**\n     * Коллбек вызывающийся при всех вариантах закрытия (автоматически проставляется, если используется `@provideNotification`)\n     */\n    onRequestClose: PropTypes.func\n  }\n\n  static defaultProps = {\n    isOpened: false,\n    positionX: 'right',\n    showClose: true,\n    closeOnClickOutside: false,\n    onAction: () => {},\n    onRequestClose: () => {}\n  }\n\n  onClickOutside = () => {\n    if (this.state.isVisible) this.props.onRequestClose()\n  }\n\n  render() {\n    const {\n      isOpened,\n      className,\n      positionX,\n      style,\n      theme,\n      classes,\n      icon,\n      title,\n      body,\n      showClose,\n      actionButton,\n      onAction,\n      onRequestClose,\n      closeOnClickOutside,\n      onClose\n    } = this.props\n\n    const content = (\n      <VisibilityAnimation\n        isVisible={isOpened}\n        activeClassName={classes.isVisible}\n        animationDuration={theme.notification.animationDuration}\n        onInvisible={onClose}>\n        <div\n          style={style}\n          className={classnames(\n            classes.notification,\n            classes[positionX],\n            className\n          )}>\n          {showClose && (\n            <IconButton\n              type=\"flat\"\n              buttonType=\"button\"\n              size=\"small\"\n              className={classes.close}\n              onClick={onRequestClose}>\n              <ClearIcon color={theme.notification.colors.close} />\n            </IconButton>\n          )}\n          <div className={classes.title}>\n            {icon && <div className={classes.icon}>{icon}</div>}\n            {title}\n          </div>\n          <div className={classes.body}>{body}</div>\n          {actionButton && (\n            <button\n              type=\"button\"\n              className={classes.actionButton}\n              onClick={onAction}>\n              {actionButton}\n              <ChevronRightIcon\n                size={9}\n                color={theme.notification.actionButton.colors.default}\n              />\n            </button>\n          )}\n        </div>\n      </VisibilityAnimation>\n    )\n\n    if (closeOnClickOutside)\n      return (\n        <OnClickOutside handler={this.onClickOutside}>{content}</OnClickOutside>\n      )\n\n    return content\n  }\n}\n"},828:function(n,t){n.exports="import React, {Component} from 'react'\nimport Button from 'rambler-ui/Button'\nimport FaceIcon from 'rambler-ui/icons/forms/FaceIcon'\nimport {Notification, provideNotification} from 'rambler-ui/Notification'\nimport {ApplyTheme} from 'rambler-ui/theme'\n\nclass WithNotification extends Component {\n  open = () => {\n    const notification = this.props.openNotification(\n      <Notification\n        title=\"Hi\"\n        icon={<FaceIcon color=\"crimson\" />}\n        body=\"Вы готовы удалить почту?\"\n        actionButton=\"Да\"\n        onAction={() => notification.close()}\n      />\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={{marginBottom: 20}}>\n          <Button type=\"outline\" onClick={this.open}>\n            Подтверждение\n          </Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst WithProvidedNotification = provideNotification(WithNotification)\n\nexport default function NotificationDecoratorExample() {\n  return (\n    <ApplyTheme>\n      <WithProvidedNotification />\n    </ApplyTheme>\n  )\n}\n"},829:function(n,t){n.exports="import React, {Component} from 'react'\nimport Button from 'rambler-ui/Button'\nimport FaceIcon from 'rambler-ui/icons/forms/FaceIcon'\nimport {Notification} from 'rambler-ui/Notification'\nimport {ApplyTheme} from 'rambler-ui/theme'\n\nexport default class NotificationExample extends Component {\n  state = {\n    leftIsOpened: false,\n    rightIsOpened: false\n  }\n\n  openNotification = type => {\n    this.setState({\n      [`${type}IsOpened`]: true\n    })\n  }\n\n  closeNotification = type => {\n    this.setState({\n      [`${type}IsOpened`]: false\n    })\n  }\n\n  render() {\n    return (\n      <ApplyTheme>\n        <div>\n          <Notification\n            isOpened={this.state.rightIsOpened}\n            icon={<FaceIcon color=\"purple\" />}\n            title=\"Hi\"\n            body=\"Добавьте, пожалуйста, дату вашего рождения\"\n            actionButton=\"Добавить дату рождения\"\n            onAction={() => this.closeNotification('right')}\n            onRequestClose={() => this.closeNotification('right')}\n          />\n\n          <Notification\n            isOpened={this.state.leftIsOpened}\n            positionX=\"left\"\n            title=\"Hi\"\n            body=\"Добавьте, пожалуйста, дату вашего рождения\"\n            actionButton=\"Добавить дату рождения\"\n            onAction={() => this.closeNotification('left')}\n            onRequestClose={() => this.closeNotification('left')}\n          />\n\n          <div style={{marginBottom: 20}}>\n            <Button onClick={() => this.openNotification('right')}>\n              Нотификация\n            </Button>\n            <Button\n              type=\"secondary\"\n              style={{marginLeft: 20}}\n              onClick={() => this.openNotification('left')}>\n              Слева без иконки\n            </Button>\n          </div>\n        </div>\n      </ApplyTheme>\n    )\n  }\n}\n"}}]);