(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{211:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.meta=void 0;var s=d(t(2)),o=t(528),a=d(t(529)),r=d(t(531)),i=d(t(530)),p=d(t(806)),l=d(t(805)),c=d(t(804));function d(e){return e&&e.__esModule?e:{default:e}}var u=n.meta={title:"Stepper",toc:["Пример","Свойства  <Stepper />","Свойства  <Step />"]},m=s.default.createElement(r.default,{code:p.default}),h=s.default.createElement(i.default,{code:c.default}),f=s.default.createElement(i.default,{code:l.default});n.default=function(e){var n=e.components,t=function(e,n){var t={};for(var s in e)n.indexOf(s)>=0||Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t}(e,["components"]);return s.default.createElement(o.MDXTag,{name:"wrapper",Layout:(0,a.default)(u)(function(e){return e.children}),layoutProps:t,components:n},s.default.createElement(o.MDXTag,{name:"h3",components:n},"Пример"),m,s.default.createElement(o.MDXTag,{name:"h3",components:n},"Свойства ",s.default.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"h3"},"<Stepper />")),h,s.default.createElement(o.MDXTag,{name:"h3",components:n},"Свойства ",s.default.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"h3"},"<Step />")),f)}},804:function(e,n){e.exports="/**\n * Компонент Stepper\n */\nimport React, {Component, cloneElement} from 'react'\nimport classnames from 'classnames'\nimport PropTypes from 'prop-types'\nimport {isolateMixin, ifDesktopSize} from '../utils/mixins'\nimport {injectSheet} from '../theme'\n\n@injectSheet(\n  theme => ({\n    stepper: {\n      extend: isolateMixin,\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'space-between',\n      alignItems: 'start',\n      marginLeft: 'auto',\n      marginRight: 'auto',\n      marginBottom: '35px',\n      width: '100%',\n      position: 'relative',\n      ...ifDesktopSize({\n        flexDirection: 'row',\n        alignItems: 'center'\n      })\n    },\n    separator: {\n      height: '40px',\n      width: '1px',\n      marginLeft: '8px',\n      backgroundColor: theme.stepper.colors.default.separator.background,\n      flex: '1 1 auto',\n      ...ifDesktopSize({\n        height: '1px',\n        flex: '1',\n        marginLeft: 0\n      })\n    }\n  }),\n  {name: 'Stepper'}\n)\nclass Stepper extends Component {\n  static propTypes = {\n    /**\n     * Текущий индекс выбранного Step\n     */\n    value: PropTypes.number.isRequired,\n    /**\n     * Колбэк на изменение выбраного Step, `function (event: object, newValue: number) {}`\n     */\n    onChange: PropTypes.func.isRequired,\n    /**\n     * Css класс root-компонента\n     */\n    className: PropTypes.string,\n    /**\n     *  Объект css стилей root-компонента\n     */\n    style: PropTypes.object\n  }\n\n  static defaultProps = {\n    style: {}\n  }\n\n  separator = key => {\n    const {classes} = this.props\n    return <span className={classes.separator} key={key} />\n  }\n\n  onChange = (e, index) => {\n    if (this.props.value === index) return\n    this.props.onChange(e, index)\n  }\n\n  render() {\n    const {\n      children,\n      value: currentValue,\n      className,\n      classes,\n      style,\n      theme, // eslint-disable-line no-unused-vars\n      onChange, // eslint-disable-line no-unused-vars\n      ...other\n    } = this.props\n    const steps = React.Children.toArray(children).reduce(\n      (acc, child, index, children) => {\n        if (index > 0 && index < children.length)\n          acc.push(this.separator(index + 0.5))\n        if (!child.type || child.type.displayName !== 'ruiStep')\n          throw new Error('Child component should be instance of <Step />')\n        const active = index === currentValue\n        const completed = index < currentValue\n        const disabled = index > currentValue\n        const props = {...child.props}\n        const extendedProps = {\n          active,\n          completed,\n          disabled,\n          value: index,\n          key: child.key !== undefined ? child.key : index,\n          onClick: this.onChange\n        }\n        Object.keys(extendedProps).forEach(key => {\n          if (!props.hasOwnProperty(key)) props[key] = extendedProps[key]\n        })\n        acc.push(cloneElement(child, props))\n        return acc\n      },\n      []\n    )\n    return (\n      <div\n        {...other}\n        className={classnames(className, classes.stepper)}\n        style={style}>\n        {steps}\n      </div>\n    )\n  }\n}\n\nStepper.displayName = 'ruiStepper'\n\nexport default Stepper\n"},805:function(e,n){e.exports="/**\n * Компонент Step\n */\nimport React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport TickIcon from '../icons/forms/TickIcon'\nimport {isolateMixin, ifDesktopSize, middleMixin} from '../utils/mixins'\nimport {injectSheet} from '../theme'\n\nconst defaultIcon = <TickIcon size={10} color=\"currentColor\" />\n\n@injectSheet(\n  theme => ({\n    step: {\n      extend: isolateMixin,\n      fontFamily: theme.stepper.fontFamily,\n      fontSize: theme.stepper.fontSize,\n      display: 'flex',\n      alignItems: 'center',\n      padding: '10px 0',\n      backgroundColor: theme.stepper.colors.default.background,\n      color: theme.stepper.colors.default.color,\n      textAlign: 'center',\n      zIndex: 1,\n      ...ifDesktopSize({\n        padding: '0 10px',\n        marginTop: 0\n      })\n    },\n    text: {\n      cursor: 'pointer'\n    },\n    badge: {\n      extend: middleMixin,\n      display: 'inline-block',\n      borderRadius: '50%',\n      width: '18px',\n      height: '18px',\n      marginRight: '10px',\n      userSelect: 'none',\n      fontSize: theme.stepper.badge.fontSize,\n      backgroundColor: theme.stepper.colors.default.badge.background,\n      color: theme.stepper.colors.default.badge.color\n    },\n    active: {\n      color: theme.stepper.colors.active.color,\n      '& $badge': {\n        backgroundColor: theme.stepper.colors.active.badge.background,\n        color: theme.stepper.colors.active.badge.color\n      },\n      '& $text': {\n        cursor: 'default'\n      }\n    },\n    disabled: {\n      color: theme.stepper.colors.disabled.color,\n      '& $badge': {\n        backgroundColor: theme.stepper.colors.disabled.badge.background,\n        color: theme.stepper.colors.disabled.badge.color\n      },\n      '& $text': {\n        cursor: 'default'\n      }\n    }\n  }),\n  {name: 'Step'}\n)\nclass Step extends Component {\n  static propTypes = {\n    /**\n     * Значение индекса шага, автоматически проставляется компонентом `<Stepper />`\n     */\n    value: PropTypes.number.isRequired,\n    /**\n     * Dom узел. Возвращается иконка, если выбран текущий шаг или номер шага (index + 1)\n     */\n    icon: PropTypes.node,\n    /**\n     * Недоступный шаг, автоматически проставляется <Stepper /> (index > currentValue).\n     * currentValue - выбранное значение, которое передали в `<Stepper />`\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Завершенный шаг, автоматически проставляется <Stepper /> (index < currentValue).\n     * currentValue - выбранное значение, которое передали в `<Stepper />`\n     */\n    completed: PropTypes.bool,\n    /**\n     * Активный шаг, автоматически проставляется <Stepper /> (index === currentValue).\n     * currentValue - выбранное значение, которое передали в `<Stepper />`\n     */\n    active: PropTypes.bool,\n    /**\n     * Колбэк на клик по элементу, `function (event: object, newValue: any) {}`\n     * Если нет, то проставляется автоматически\n     */\n    onClick: PropTypes.func,\n    /**\n     * Css класс компонента\n     */\n    className: PropTypes.string,\n    /**\n     * Css класс кружочка\n     */\n    badgeClassName: PropTypes.string,\n    /**\n     * Css класс текста\n     */\n    textClassName: PropTypes.string,\n    /**\n     *  Объект css стилей компонента\n     */\n    style: PropTypes.object\n  }\n\n  static defaultProps = {\n    style: {}\n  }\n\n  onClick = e => {\n    const {disabled, active, value} = this.props\n    if (disabled || active) return\n    this.props.onClick(e, value)\n  }\n\n  render() {\n    const {\n      value,\n      className,\n      badgeClassName,\n      textClassName,\n      style,\n      classes,\n      disabled,\n      completed,\n      active,\n      icon,\n      children,\n      theme, // eslint-disable-line no-unused-vars\n      onClick, // eslint-disable-line no-unused-vars\n      ...other\n    } = this.props\n    const resultClassName = classnames(className, classes.step, {\n      [classes.active]: active,\n      [classes.disabled]: disabled\n    })\n    return (\n      <div\n        {...other}\n        className={resultClassName}\n        style={style}\n        onClick={this.onClick}>\n        <span className={classnames(classes.badge, badgeClassName)}>\n          {icon ? icon : completed ? defaultIcon : value + 1}\n        </span>\n        <span className={classnames(classes.text, textClassName)}>\n          {children}\n        </span>\n      </div>\n    )\n  }\n}\n\nStep.displayName = 'ruiStep'\n\nexport default Step\n"},806:function(e,n){e.exports="import {Stepper, Step} from 'rambler-ui/Stepper'\nimport React, {Component} from 'react'\nimport {ApplyTheme} from 'rambler-ui/theme'\nimport Button from 'rambler-ui/Button'\nimport TickIcon from 'rambler-ui/icons/forms/TickIcon'\n\nconst recovery = ['Проверка почты', 'Восстановление пароля']\nconst buy = ['Выберите товар', 'Выберите адрес доставки', 'Оплата']\nconst quiz = ['Черновик', 'Опубликован', 'Завершен', 'Закрыт']\n\nexport default class StepperExample extends Component {\n  state = {\n    value: 1\n  }\n\n  onChange = (e, index) => {\n    this.setState({value: index})\n  }\n\n  onStepClick = (e, index) => {\n    this.setState({value: index})\n  }\n\n  nextStep = () => {\n    if (this.state.value === 3) return\n    this.setState({value: this.state.value + 1})\n  }\n\n  previousStep = () => {\n    if (this.state.value === 0) return\n    this.setState({value: this.state.value - 1})\n  }\n\n  render() {\n    return (\n      <ApplyTheme>\n        <div>\n          Поведение: steb-by-step\n          <div style={{marginTop: '25px', width: '500px'}}>\n            <Stepper value={this.state.value} onChange={this.onChange}>\n              {recovery.map((item, index) => (\n                <Step key={index}>{item}</Step>\n              ))}\n            </Stepper>\n          </div>\n          <div style={{width: '500px', marginTop: '50px'}}>\n            <Stepper value={this.state.value} onChange={this.onChange}>\n              {buy.map((item, index) => (\n                <Step key={index}>{item}</Step>\n              ))}\n            </Stepper>\n          </div>\n          Поведение: отображение конкретного статуса и свободный переход между\n          ними\n          <div style={{marginTop: '25px'}}>\n            <Stepper value={this.state.value} onChange={this.onChange}>\n              {quiz.map((item, index) => (\n                <Step\n                  key={index}\n                  disabled={false}\n                  completed={false}\n                  icon={\n                    this.state.value === index ? (\n                      <TickIcon size={10} color=\"#fff\" />\n                    ) : (\n                      undefined\n                    )\n                  }\n                  onClick={e => {\n                    e.preventDefault()\n                    this.onChange(e, index)\n                  }}>\n                  {item}\n                </Step>\n              ))}\n            </Stepper>\n          </div>\n          <div style={{fontWeight: '500', margin: '20px 0'}}>\n            this.state.value: {this.state.value}\n          </div>\n          <Button size=\"small\" type=\"secondary\" onClick={this.previousStep}>\n            Previous step\n          </Button>\n          <Button\n            size=\"small\"\n            type=\"secondary\"\n            style={{marginLeft: '50px'}}\n            onClick={this.nextStep}>\n            Next step\n          </Button>\n        </div>\n      </ApplyTheme>\n    )\n  }\n}\n"}}]);