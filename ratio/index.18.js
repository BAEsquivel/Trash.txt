(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{216:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.meta=void 0;var o=p(t(2)),a=t(528),i=p(t(529)),s=p(t(531)),r=p(t(530)),l=p(t(821)),u=p(t(820)),d=p(t(819));function p(n){return n&&n.__esModule?n:{default:n}}var c=e.meta={title:"Radio",toc:["Пример","Свойства  <RadioButton />","Свойства  <RadioButtonGroup />"]},m=o.default.createElement(s.default,{code:l.default}),h=o.default.createElement(r.default,{code:u.default}),v=o.default.createElement(r.default,{code:d.default});e.default=function(n){var e=n.components,t=function(n,e){var t={};for(var o in n)e.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t}(n,["components"]);return o.default.createElement(a.MDXTag,{name:"wrapper",Layout:(0,i.default)(c)(function(n){return n.children}),layoutProps:t,components:e},o.default.createElement(a.MDXTag,{name:"h3",components:e},"Пример"),m,o.default.createElement(a.MDXTag,{name:"h3",components:e},"Свойства ",o.default.createElement(a.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<RadioButton />")),h,o.default.createElement(a.MDXTag,{name:"h3",components:e},"Свойства ",o.default.createElement(a.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<RadioButtonGroup />")),v)}},819:function(n,e){n.exports="/**\n * Компонент radioButtonGroup\n */\nimport React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport EventEmitter from 'events'\nimport uuid from '../utils/uuid'\nimport {injectSheet} from '../theme'\nimport {isolateMixin} from '../utils/mixins'\nimport {RADIO_INPUT_CONTEXT} from '../constants/context'\n\n@injectSheet(\n  theme => ({\n    radioButtonGroup: {\n      extend: isolateMixin,\n      fontFamily: theme.fontFamily\n    }\n  }),\n  {name: 'RadioButtonGroup'}\n)\nexport default class RadioButtonGroup extends Component {\n  static propTypes = {\n    /**\n     * Имя, которое будет применяться ко всей группе radio.\n     * Генерируется автоматически, если не указано\n     */\n    name: PropTypes.string,\n    /**\n     * Дочерние узлы - radio\n     */\n    children: PropTypes.node,\n    /**\n     * Css - класс компонента\n     */\n    className: PropTypes.string,\n    /**\n     * Добавление стандартных стилей для группы\n     */\n    style: PropTypes.object,\n    /**\n     * Обязательный колбэк, который вызывается при нажатии на input и меняет state root-компонента.\n     */\n    onChange: PropTypes.func.isRequired,\n    /**\n     * Значение, выбранного в данный момент radio\n     */\n    value: PropTypes.any\n  }\n\n  static childContextTypes = {\n    [RADIO_INPUT_CONTEXT]: PropTypes.shape({\n      /**\n       * Получить текущее значение\n       */\n      getValue: PropTypes.func,\n      /**\n       * Получить атрибут name для input\n       */\n      getName: PropTypes.func,\n      /**\n       * Шина событий\n       * @newValue - событие установки нового значения, кидают компоненты RadioButton\n       * @updateValue - событие изменения значения, кидает компонент RadioButtonGroup\n       */\n      events: PropTypes.instanceOf(EventEmitter)\n    })\n  }\n\n  static defaultProps = {\n    name: null,\n    onChange: () => {}\n  }\n\n  getRadioInputName = () => {\n    this.resultRadioInputName =\n      this.resultRadioInputName || this.props.name || `RadioGroup-${uuid()}`\n    return this.resultRadioInputName\n  }\n\n  getChildContext() {\n    if (!this.radioInputEvents) this.createRadioInputEvents()\n    return {\n      [RADIO_INPUT_CONTEXT]: {\n        events: this.radioInputEvents,\n        getName: this.getRadioInputName,\n        getValue: () => this.value\n      }\n    }\n  }\n\n  componentWillMount() {\n    this.value = this.props.value\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.value !== this.props.value) {\n      this.value = nextProps.value\n      if (this.radioInputEvents)\n        this.radioInputEvents.emit('updateValue', this.value)\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.radioInputEvents) this.radioInputEvents.removeAllListeners()\n  }\n\n  createRadioInputEvents() {\n    this.radioInputEvents = new EventEmitter()\n    this.radioInputEvents.setMaxListeners(0)\n    this.radioInputEvents.on('newValue', this.onNewValue)\n  }\n\n  onNewValue = (event, value) => {\n    if (this.props.onChange) this.props.onChange(event, value)\n  }\n\n  render() {\n    const {\n      className,\n      classes,\n      children,\n      theme, // eslint-disable-line no-unused-vars\n      onChange, // eslint-disable-line no-unused-vars\n      value, // eslint-disable-line no-unused-vars\n      labelPosition, // eslint-disable-line no-unused-vars\n      ...otherRootProps\n    } = this.props\n\n    const resultClassName = classnames(classes.radioButtonGroup, className)\n\n    return (\n      <div className={resultClassName} {...otherRootProps}>\n        {children}\n      </div>\n    )\n  }\n}\n"},820:function(n,e){n.exports="/**\n * Компонент radioButton\n */\nimport React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport EventEmitter from 'events'\nimport uuid from '../utils/uuid'\nimport {injectSheet} from '../theme'\nimport {isolateMixin, focusSourceMixin} from '../utils/mixins'\nimport {RADIO_INPUT_CONTEXT} from '../constants/context'\nimport '../utils/focus-source'\n\nfunction isSimpleType(value) {\n  const type = typeof value\n  return (\n    type === 'string' ||\n    type === 'number' ||\n    type === 'boolean' ||\n    value === null ||\n    value === undefined\n  )\n}\n\n@injectSheet(\n  theme => ({\n    root: {\n      extend: isolateMixin,\n      fontFamily: theme.fontFamily,\n      fontSize: theme.radio.fontSize,\n      display: 'flex',\n      width: '100%',\n      cursor: 'pointer',\n      position: 'relative',\n      color: theme.radio.colors.default.text,\n      userSelect: 'none',\n      '&:not(:last-child)': {\n        marginBottom: theme.radio.marginBottom\n      }\n    },\n    isDisabled: {\n      pointerEvents: 'none',\n      color: theme.radio.colors.disabled.text,\n      cursor: 'not-allowed'\n    },\n    real: {\n      fontFamily: theme.fontFamily,\n      position: 'absolute',\n      opacity: '0',\n      appearance: 'none',\n      pointerEvents: 'none'\n    },\n    fake: {\n      flex: 'none',\n      display: 'inline-block',\n      verticalAlign: 'middle',\n      position: 'relative',\n      boxSizing: 'border-box',\n      borderRadius: '50%',\n      width: theme.radio.radioSize,\n      height: theme.radio.radioSize,\n      border: '1px solid',\n      borderColor: theme.radio.colors.default.dotBorder,\n      background: theme.radio.colors.default.dotBackground,\n      marginTop: 3,\n      transitionDuration: theme.radio.animationDuration,\n      transitionProperty: 'border-color, background-color, color',\n      '&:after': {\n        boxSizing: 'border-box',\n        content: '\"\"',\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        margin: 'auto',\n        width: 5,\n        height: 5,\n        transform: 'scale(0.5, 0.5)',\n        opacity: 0,\n        transitionDuration: 'inherit',\n        transitionProperty: 'opacity, transform, background-color',\n        background: 'currentColor',\n        borderRadius: '50%'\n      },\n      '$isChecked &:after': {\n        transform: 'scale(1, 1)',\n        opacity: 1\n      },\n      '$isEnabled:hover &': {\n        borderColor: theme.radio.colors.hover.dotBorder,\n        color: theme.radio.colors.hover.dot\n      },\n      ...focusSourceMixin('other', '$real:focus + &', {\n        borderColor: theme.radio.colors.focus.dotBorder\n      }),\n      '$isEnabled:active &': {\n        borderColor: theme.radio.colors.active.dotBorder,\n        background: theme.radio.colors.active.dotBackground,\n        color: theme.radio.colors.active.dot\n      },\n      '$isDisabled &': {\n        borderColor: theme.radio.colors.disabled.dotBorder,\n        color: theme.radio.colors.disabled.dot\n      },\n      '$labelright &': {\n        marginRight: theme.radio.labelMargin\n      },\n      '$labelleft &': {\n        marginLeft: theme.radio.labelMargin\n      }\n    },\n    label: {\n      display: 'inline-block',\n      verticalAlign: 'middle',\n      lineHeight: theme.radio.lineHeight + 'px',\n      '$labelleft &': {\n        order: -1,\n        marginRight: 'auto'\n      }\n    },\n    isChecked: {},\n    isEnabled: {},\n    labelleft: {},\n    labelright: {}\n  }),\n  {name: 'RadioButton'}\n)\nclass RadioButton extends Component {\n  static propTypes = {\n    /**\n     * Выбранное значение radioButton\n     */\n    value: PropTypes.any.isRequired,\n    /**\n     * Если true, RadioButton задизэйблен\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Css-класс root-компонента(radioButton)\n     */\n    className: PropTypes.string,\n    /**\n     * Css-класс span-radio\n     */\n    radioClassName: PropTypes.string,\n    /**\n     * Css-класс span-label\n     */\n    labelClassName: PropTypes.string,\n    /**\n     * Переопределение стандартных стилей компонента radioButton\n     */\n    style: PropTypes.object,\n    /**\n     * Переопределение стандартных стилей label\n     */\n    labelStyle: PropTypes.object,\n    /**\n     * Позиция label - либо слева, либо справа\n     */\n    labelPosition: PropTypes.oneOf(['left', 'right'])\n  }\n\n  static defaultProps = {\n    labelPosition: 'right',\n    value: null,\n    disabled: false,\n    style: {},\n    labelStyle: {}\n  }\n\n  static contextTypes = {\n    [RADIO_INPUT_CONTEXT]: PropTypes.shape({\n      getValue: PropTypes.func,\n      getName: PropTypes.func,\n      events: PropTypes.instanceOf(EventEmitter)\n    })\n  }\n\n  get isChecked() {\n    return this.inputValue === this.context[RADIO_INPUT_CONTEXT].getValue()\n  }\n\n  componentWillMount() {\n    this.setInputValue(this.props.value)\n    this.context[RADIO_INPUT_CONTEXT].events.on(\n      'updateValue',\n      this.onUpdateValue\n    )\n  }\n\n  componentWillUnmount() {\n    this.context[RADIO_INPUT_CONTEXT].events.removeListener(\n      'updateValue',\n      this.onUpdateValue\n    )\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.value !== this.props.value)\n      this.setInputValue(nextProps.value)\n  }\n\n  componentDidMount() {\n    this.input.checked = this.isChecked\n  }\n\n  componentDidUpdate() {\n    this.input.checked = this.isChecked\n  }\n\n  setInputValue(value) {\n    this.inputValue = value\n    this.stringValue = isSimpleType(value) ? String(value) : uuid()\n  }\n\n  onUpdateValue = () => {\n    this.forceUpdate()\n  }\n\n  onChange = e => {\n    this.context[RADIO_INPUT_CONTEXT].events.emit(\n      'newValue',\n      e,\n      this.props.value\n    )\n    // оставляем для обратной совместимости\n    if (this.props.onChange) this.props.onChange(e, this.inputValue)\n  }\n\n  render() {\n    const {\n      children,\n      labelPosition,\n      disabled,\n      className,\n      radioClassName,\n      labelClassName,\n      style,\n      labelStyle,\n      classes,\n      onFocus,\n      onBlur,\n      theme, // eslint-disable-line no-unused-vars\n      value, // eslint-disable-line no-unused-vars\n      onChange, // eslint-disable-line no-unused-vars\n      ...other\n    } = this.props\n\n    const rootClassName = classnames(\n      className,\n      classes.root,\n      classes[`label${labelPosition}`],\n      disabled ? classes.isDisabled : classes.isEnabled,\n      this.isChecked && classes.isChecked\n    )\n\n    return (\n      <label className={rootClassName} style={style} {...other}>\n        <input\n          className={classes.real}\n          type=\"radio\"\n          ref={input => {\n            this.input = input\n          }}\n          name={this.context[RADIO_INPUT_CONTEXT].getName()}\n          value={this.stringValue}\n          disabled={disabled}\n          onChange={this.onChange}\n          onFocus={onFocus}\n          onBlur={onBlur}\n        />\n        <span className={classnames(radioClassName, classes.fake)} />\n        <span\n          className={classnames(labelClassName, classes.label)}\n          style={labelStyle}>\n          {children}\n        </span>\n      </label>\n    )\n  }\n}\n\nRadioButton.displayName = 'ruiRadioButton'\nexport default RadioButton\n"},821:function(n,e){n.exports="import {RadioButton, RadioButtonGroup} from 'rambler-ui/Radio'\nimport React, {Component} from 'react'\n\nexport default class RadioExample extends Component {\n  state = {\n    objects: [\n      {\n        name: 'Moscow'\n      },\n      {\n        name: 'Samara'\n      },\n      {\n        name: 'NewYork'\n      }\n    ],\n    strings: ['Minsk', 'Saint-Petersburg', 'Washington'],\n    objectValue: null,\n    stringValue: null\n  }\n\n  onObjectsChange = (event, value) => {\n    this.setState({objectValue: value})\n  }\n\n  onStringsChange = (event, value) => {\n    this.setState({stringValue: value})\n  }\n\n  render() {\n    const {objects, strings} = this.state\n    return (\n      <div>\n        <div>\n          <RadioButtonGroup\n            style={{marginBottom: 40, maxWidth: 300}}\n            value={this.state.objectValue}\n            onChange={this.onObjectsChange}>\n            {objects.map((city, i) => (\n              <RadioButton key={i} value={city}>\n                {city.name}\n              </RadioButton>\n            ))}\n          </RadioButtonGroup>\n          <RadioButtonGroup\n            name=\"city\"\n            style={{marginBottom: 40, maxWidth: 300}}\n            value={this.state.stringValue}\n            onChange={this.onStringsChange}>\n            {strings.map((city, i) => (\n              <RadioButton key={i} value={city}>\n                {city}\n              </RadioButton>\n            ))}\n          </RadioButtonGroup>\n          <RadioButtonGroup\n            style={{marginBottom: 20, maxWidth: 300}}\n            value={this.state.objectValue}\n            onChange={this.onObjectsChange}>\n            <div\n              style={{\n                background: '#eee',\n                padding: '20px',\n                borderRadius: '3px'\n              }}>\n              {objects.map((city, i) => (\n                <div key={i}>\n                  <RadioButton value={city}>{city.name}</RadioButton>\n                  {i + 1 < objects.length && (\n                    <hr style={{marginBottom: '15px'}} />\n                  )}\n                </div>\n              ))}\n            </div>\n          </RadioButtonGroup>\n          <RadioButtonGroup\n            style={{margin: '40px 0', maxWidth: 300}}\n            value={this.state.objectValue}\n            onChange={this.onObjectsChange}>\n            {objects.map((city, i) => (\n              <RadioButton key={i} value={city} disabled labelPosition=\"left\">\n                {city.name}\n              </RadioButton>\n            ))}\n          </RadioButtonGroup>\n        </div>\n        <div>\n          <div style={{marginBottom: '20px'}}>\n            this.state.objectValue:{' '}\n            <b>{JSON.stringify(this.state.objectValue)}</b>\n          </div>\n          <div>\n            this.state.stringValue: <b>{this.state.stringValue}</b>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n"}}]);