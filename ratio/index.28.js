(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{226:function(n,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.meta=void 0;var t=d(o(2)),i=o(528),s=d(o(529)),r=d(o(531)),p=d(o(530)),a=d(o(845)),l=d(o(844));function d(n){return n&&n.__esModule?n:{default:n}}var c=e.meta={title:"Dropdown",toc:["Пример","Свойства  <Dropdown />"]},u=t.default.createElement(r.default,{code:a.default}),y=t.default.createElement(p.default,{code:l.default});e.default=function(n){var e=n.components,o=function(n,e){var o={};for(var t in n)e.indexOf(t)>=0||Object.prototype.hasOwnProperty.call(n,t)&&(o[t]=n[t]);return o}(n,["components"]);return t.default.createElement(i.MDXTag,{name:"wrapper",Layout:(0,s.default)(c)(function(n){return n.children}),layoutProps:o,components:e},t.default.createElement(i.MDXTag,{name:"h3",components:e},"Пример"),u,t.default.createElement(i.MDXTag,{name:"h3",components:e},"Свойства ",t.default.createElement(i.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<Dropdown />")),y)}},844:function(n,e){n.exports="import React, {PureComponent} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {FixedOverlay, RelativeOverlay} from '../Overlay'\nimport VisibilityAnimation from '../VisibilityAnimation'\nimport OnClickOutside from '../OnClickOutside'\nimport {POINTS_Y} from '../constants/overlay'\nimport {injectSheet} from '../theme'\nimport {isolateMixin} from '../utils/mixins'\n\n@injectSheet(\n  theme => ({\n    dropdown: {\n      extend: isolateMixin,\n      fontFamily: theme.fontFamily,\n      borderRadius: theme.dropdown.borderRadius,\n      boxSizing: 'border-box',\n      opacity: '0.01',\n      pointerEvents: 'none',\n      position: 'relative',\n      transitionDuration: `${theme.dropdown.animationDuration}ms`,\n      transitionProperty: 'opacity, top',\n      background: '#fff',\n      boxShadow: theme.dropdown.boxShadow\n    },\n    isVisible: {\n      '&$dropdown': {\n        opacity: '1',\n        pointerEvents: 'auto',\n        top: '0px'\n      }\n    },\n    'pointY-bottom': {\n      '&:not($isVisible)': {top: -10}\n    },\n    'pointY-top': {\n      '&:not($isVisible)': {top: 10}\n    }\n  }),\n  {name: 'Dropdown'}\n)\nclass DropdownContainer extends PureComponent {\n  static propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    onBecomeVisible: PropTypes.func,\n    onBecomeInvisible: PropTypes.func,\n    hide: PropTypes.func,\n    anchorWidth: PropTypes.number,\n    anchorFullWidth: PropTypes.bool,\n    closeOnClickOutside: PropTypes.bool,\n    pointY: PropTypes.oneOf(POINTS_Y),\n    padding: PropTypes.oneOfType([PropTypes.bool, PropTypes.string])\n  }\n\n  static defaultProps = {\n    padding: '20px',\n    closeOnClickOutside: true\n  }\n\n  state = {}\n\n  componentWillReceiveProps(nextProps) {\n    if (\n      this.props.isVisible !== nextProps.isVisible &&\n      nextProps.isVisible &&\n      !this.state.pointY\n    )\n      this.setState({\n        pointY: nextProps.pointY\n      })\n  }\n\n  onClickOutside = () => {\n    if (this.props.isVisible) this.props.hide()\n  }\n\n  render() {\n    const {\n      isVisible,\n      children,\n      anchorWidth,\n      anchorFullWidth,\n      closeOnClickOutside,\n      className,\n      style,\n      theme,\n      classes,\n      padding,\n      onBecomeVisible,\n      onBecomeInvisible\n    } = this.props\n    const {pointY} = this.state\n    let resultStyle = {}\n    if (anchorWidth && anchorFullWidth) resultStyle.width = anchorWidth + 'px'\n    if (padding) resultStyle.padding = padding\n    resultStyle = {\n      ...resultStyle,\n      ...style\n    }\n    const content = (\n      <VisibilityAnimation\n        isVisible={isVisible}\n        activeClassName={classes.isVisible}\n        animationDuration={theme.dropdown.animationDuration}\n        onVisible={onBecomeVisible}\n        onInvisible={onBecomeInvisible}>\n        <div\n          className={classnames(\n            className,\n            classes.dropdown,\n            classes['pointY-' + pointY]\n          )}\n          style={resultStyle}>\n          {children}\n        </div>\n      </VisibilityAnimation>\n    )\n    if (!closeOnClickOutside) return content\n    return (\n      <OnClickOutside handler={this.onClickOutside}>{content}</OnClickOutside>\n    )\n  }\n}\n\n/**\n * Компонент Dropdown\n */\nexport default class Dropdown extends PureComponent {\n  static propTypes = {\n    /**\n     * Элемент, к которому привязывается Dropdown\n     */\n    anchor: PropTypes.node.isRequired,\n    /**\n     * Контент дропдауна\n     */\n    children: PropTypes.node.isRequired,\n    /**\n     * CSS класс для контейнера Dropdown\n     */\n    className: PropTypes.string,\n    /**\n     * Стили для контейнера Dropdown\n     */\n    style: PropTypes.object,\n    /**\n     * CSS класс контейнера оверлея\n     */\n    overlayClassName: PropTypes.string,\n    /**\n     * Стили для контейнера оверлея\n     */\n    overlayStyle: PropTypes.object,\n    /**\n     * Показывать ли дропдаун\n     * Укажите этот параметр, если хотите контроллировать состояние открытия\n     */\n    isOpened: PropTypes.bool,\n    /**\n     * Колбек открытия попапа\n     */\n    onOpen: PropTypes.func,\n    /**\n     * Колбек закрытия попапа\n     */\n    onClose: PropTypes.func,\n    /**\n     * Закрывать ли при клике вне контента\n     */\n    closeOnClickOutside: PropTypes.bool,\n    /**\n     * Точка прикрепления контента по оси X\n     */\n    contentPointX: PropTypes.oneOf(['left', 'right', 'center']),\n    /**\n     * Точка прикрепления anchor по оси X\n     */\n    anchorPointX: PropTypes.oneOf(['left', 'right', 'center']),\n    /**\n     * Точка прикрепления контента по оси Y\n     */\n    contentPointY: PropTypes.oneOf(['top', 'bottom', 'center']),\n    /**\n     * Точка прикрепления anchor по оси Y\n     */\n    anchorPointY: PropTypes.oneOf(['top', 'bottom', 'center']),\n    /**\n     * Автоматическое позиционирование по оси Y (если выходит за пределы экрана)\n     */\n    autoPositionY: PropTypes.bool,\n    /**\n     * Тянуть контент на всю ширину anchor\n     */\n    anchorFullWidth: PropTypes.bool,\n    /**\n     * Вставлять ли dropdown внутри body\n     */\n    appendToBody: PropTypes.bool,\n    /**\n     * Паддинги\n     * Если паддинг не нужен, нужно передать false\n     */\n    padding: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])\n  }\n\n  static defaultProps = {\n    closeOnClickOutside: true,\n    contentPointX: 'left',\n    anchorPointX: 'left',\n    contentPointY: 'top',\n    anchorPointY: 'bottom',\n    autoPositionY: true,\n    appendToBody: false\n  }\n\n  constructor(props) {\n    super(props)\n    this.Overlay = props.appendToBody ? FixedOverlay : RelativeOverlay\n  }\n\n  render() {\n    const {\n      isOpened,\n      anchor,\n      children,\n      autoPositionY,\n      anchorFullWidth,\n      closeOnClickOutside,\n      contentPointX,\n      anchorPointX,\n      contentPointY,\n      anchorPointY,\n      onOpen,\n      onClose,\n      className,\n      style,\n      padding,\n      overlayClassName,\n      overlayStyle,\n      appendToBody\n    } = this.props\n    const dropdownProps = {\n      closeOnClickOutside,\n      anchorFullWidth,\n      className,\n      style,\n      padding\n    }\n    const overlayProps = {\n      anchor,\n      contentPointX,\n      anchorPointX,\n      autoPositionY,\n      contentPointY,\n      anchorPointY,\n      isOpened,\n      onContentOpen: onOpen,\n      onContentClose: onClose,\n      content: (\n        <DropdownContainer {...dropdownProps}>{children}</DropdownContainer>\n      )\n    }\n    if (appendToBody) {\n      overlayProps.containerNodeClassName = overlayClassName\n      overlayProps.containerNodeStyle = overlayStyle\n    } else {\n      overlayProps.className = overlayClassName\n      overlayProps.style = overlayStyle\n    }\n    return <this.Overlay {...overlayProps} />\n  }\n}\n"},845:function(n,e){n.exports="import React, {Component} from 'react'\nimport Dropdown from 'rambler-ui/Dropdown'\nimport Button from 'rambler-ui/Button'\nimport {ApplyTheme} from 'rambler-ui/theme'\n\nexport default class DropdownExample extends Component {\n  state = {\n    isOpenedFixed: false,\n    isOpenedRelative: false\n  }\n\n  onClickFixed = () => {\n    this.setState({\n      isOpenedFixed: true\n    })\n  }\n\n  onClickRelative = () => {\n    this.setState({\n      isOpenedRelative: true\n    })\n  }\n\n  onCloseFixed = () => {\n    this.setState({\n      isOpenedFixed: false\n    })\n  }\n\n  onCloseRelative = () => {\n    this.setState({\n      isOpenedRelative: false\n    })\n  }\n\n  render() {\n    return (\n      <ApplyTheme>\n        <div>\n          <div style={{paddingBottom: '150px'}}>\n            <Dropdown\n              anchorFullWidth={true}\n              isOpened={this.state.isOpenedRelative}\n              onClose={this.onCloseRelative}\n              anchor={\n                <Button onClick={this.onClickRelative}>\n                  Открыть Dropdown Relative\n                </Button>\n              }>\n              <div>\n                <p>Dropdown content</p>\n                <div>\n                  <Button type=\"secondary\" onClick={this.onCloseRelative}>\n                    Закрыть\n                  </Button>\n                </div>\n              </div>\n            </Dropdown>\n          </div>\n          <div>\n            <Dropdown\n              appendToBody={true}\n              anchorFullWidth={true}\n              isOpened={this.state.isOpenedFixed}\n              onClose={this.onCloseFixed}\n              anchorPointY=\"center\"\n              anchor={\n                <Button type=\"outline\" onClick={this.onClickFixed}>\n                  Открыть Dropdown Fixed\n                </Button>\n              }>\n              <div>\n                <p>Dropdown content</p>\n                <div>\n                  <Button type=\"secondary\" onClick={this.onCloseFixed}>\n                    Закрыть\n                  </Button>\n                </div>\n              </div>\n            </Dropdown>\n          </div>\n        </div>\n      </ApplyTheme>\n    )\n  }\n}\n"}}]);