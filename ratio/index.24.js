(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{222:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.meta=void 0;var o=u(t(2)),i=t(528),s=u(t(529)),a=u(t(531)),r=u(t(530)),l=u(t(837)),p=u(t(836)),c=u(t(835)),d=u(t(834));function u(n){return n&&n.__esModule?n:{default:n}}var m=e.meta={title:"Input",toc:["Пример","Свойства  <Input />","Свойства  <InputStatus />","Свойства  <FormGroup />"]},h=o.default.createElement(a.default,{code:l.default}),g=o.default.createElement(r.default,{code:p.default}),f=o.default.createElement(r.default,{code:d.default}),y=o.default.createElement(r.default,{code:c.default});e.default=function(n){var e=n.components,t=function(n,e){var t={};for(var o in n)e.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t}(n,["components"]);return o.default.createElement(i.MDXTag,{name:"wrapper",Layout:(0,s.default)(m)(function(n){return n.children}),layoutProps:t,components:e},o.default.createElement(i.MDXTag,{name:"h3",components:e},"Пример"),h,o.default.createElement(i.MDXTag,{name:"h3",components:e},"Свойства ",o.default.createElement(i.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<Input />")),g,o.default.createElement(i.MDXTag,{name:"h3",components:e},"Свойства ",o.default.createElement(i.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<InputStatus />")),f,o.default.createElement(i.MDXTag,{name:"h3",components:e},"Свойства ",o.default.createElement(i.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<FormGroup />")),y)}},834:function(n,e){n.exports="/**\n * Компонент InputStatus\n */\nimport React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {injectSheet} from '../theme'\nimport {isolateMixin, ifMobile} from '../utils/mixins'\n\n@injectSheet(\n  theme => ({\n    success: {\n      '& $message': {\n        color: theme.colors.success\n      }\n    },\n    warning: {\n      '& $message': {\n        color: theme.colors.warn\n      }\n    },\n    error: {\n      '& $message': {\n        color: theme.colors.danger\n      }\n    },\n    message: {\n      extend: isolateMixin,\n      fontFamily: theme.fontFamily,\n      marginTop: 10,\n      fontSize: theme.inputStatus.sizes.fontSize,\n      lineHeight: theme.inputStatus.sizes.fontSize + 2 + 'px',\n      textAlign: 'left',\n      ...ifMobile({\n        fontSize: theme.inputStatus.sizes.mobile.fontSize\n      })\n    }\n  }),\n  {name: 'InputStatus'}\n)\nexport default class InputStatus extends Component {\n  static propTypes = {\n    /**\n     * Отображает текст статуса компонента input.\n     * Тип предупреждения.\n     */\n    type: PropTypes.oneOf(['error', 'warning', 'success']),\n    /**\n     * Мессадж который будет отображаться как статус\n     */\n    message: PropTypes.node,\n    /**\n     * Элемент Input относительно которого будет отражаться InputStatus\n     */\n    children: PropTypes.node.isRequired,\n    /**\n     * className\n     */\n    className: PropTypes.string\n  }\n\n  render() {\n    const {type, message, children, className, classes} = this.props\n\n    const rootClassName = classnames(message && classes[type])\n    const messageClassName = classnames(classes.message, className)\n\n    return (\n      <div className={rootClassName}>\n        {children}\n        {message && <div className={messageClassName}>{message}</div>}\n      </div>\n    )\n  }\n}\n"},835:function(n,e){n.exports="/**\n * Компонент FormGroup\n */\n\nimport React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {injectSheet} from '../theme'\nimport {ifDesktopSize, isolateMixin} from '../utils/mixins'\n\n@injectSheet(\n  theme => ({\n    root: {\n      extend: isolateMixin,\n      fontFamily: theme.fontFamily,\n      fontSize: theme.formGroup.fontSize\n    },\n    normal: {\n      marginBottom: 15\n    },\n    inline: {\n      marginBottom: 15\n    },\n    label: {\n      width: '100%',\n      display: 'inline-block',\n      marginBottom: 10\n    },\n    inner: {\n      position: 'relative'\n    },\n    ...ifDesktopSize({\n      normal: {\n        '& $label': {\n          width: '100%'\n        },\n        marginBottom: 30\n      },\n      inline: {\n        marginBottom: 30,\n        display: 'flex',\n        alignItems: 'flex-start',\n        '& $label': {\n          marginLeft: 0,\n          marginBottom: 0,\n          maxWidth: 172,\n          lineHeight: 1\n        },\n        '& $inner': {\n          flex: 1,\n          width: 'auto'\n        }\n      },\n      label: {},\n      inner: {\n        display: 'inline-block',\n        verticalAlign: 'top',\n        width: '100%',\n        marginLeft: 0\n      },\n      small: {\n        '&$inline $label': {\n          paddingTop: 12\n        }\n      },\n      medium: {\n        '&$inline $label': {\n          paddingTop: 15\n        }\n      }\n    })\n  }),\n  {name: 'FormGroup'}\n)\nexport default class FormGroup extends Component {\n  static propTypes = {\n    /**\n     * Задаём стиль FormGroup - в строчку или колонку (label + input).\n     * В теме чемпа не используется\n     */\n    inline: PropTypes.bool,\n    /**\n     * Указываем label для FormGroup\n     */\n    label: PropTypes.string,\n    /**\n     * Размер\n     */\n    size: PropTypes.oneOf(['small', 'medium']),\n    /**\n     * Имя класса - className для FormGroup\n     */\n    className: PropTypes.string,\n    /**\n     * Значение для htmlFor in label\n     */\n    fieldId: PropTypes.string,\n    /**\n     * Children - может быть InputStatus или Input.\n     */\n    children: PropTypes.node.isRequired,\n    /**\n     * Style - объект со стилями\n     */\n    style: PropTypes.object\n  }\n\n  static defaultProps = {\n    size: 'medium'\n  }\n\n  render() {\n    const {\n      label,\n      inline,\n      fieldId,\n      className,\n      children,\n      style,\n      size,\n      classes\n    } = this.props\n\n    const rootClass = inline === true ? 'inline' : 'normal'\n    const rootClassName = classnames(\n      classes[size],\n      classes[rootClass],\n      classes.root,\n      className\n    )\n    const labelClassName = classes.label\n    const innerClassName = classes.inner\n\n    return (\n      <section className={rootClassName} style={style}>\n        {label && (\n          <label htmlFor={fieldId} className={labelClassName}>\n            {label}\n          </label>\n        )}\n        <div className={innerClassName}>{children}</div>\n      </section>\n    )\n  }\n}\n"},836:function(n,e){n.exports="/**\n * Компонент Input\n */\nimport React, {Component, createElement, cloneElement} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {injectSheet} from '../theme'\nimport {isolateMixin, placeholderMixin, ifMobile} from '../utils/mixins'\nimport Tooltip from '../Tooltip'\nimport Eye from '../icons/forms/Eye'\nimport ClosedEyeIcon from '../icons/forms/ClosedEyeIcon'\n\nconst activeBorder = borderColor => ({\n  borderColor,\n  transform: 'none'\n})\n\n@injectSheet(\n  theme => ({\n    input: {\n      extend: isolateMixin,\n      fontFamily: theme.field.fontFamily,\n      boxSizing: 'border-box',\n      display: 'block',\n      padding: 0,\n      outline: 0,\n      width: '100%',\n      fontStyle: theme.field.fontStyle,\n      fontWeight: theme.field.fontWeight,\n      letterSpacing: theme.field.letterSpacing,\n      appearance: 'none',\n      lineHeight: 'normal',\n      background: theme.field.colors.default.background,\n      boxShadow: 'none',\n      border: '0 solid',\n      borderColor: theme.field.colors.default.outline,\n      transition: `all ${theme.field.animationDuration}ms ease`,\n      ...ifMobile({\n        fontWeight: theme.field.mobile.fontWeight,\n        letterSpacing: theme.field.mobile.letterSpacing\n      }),\n      'textarea&&': {\n        resize: 'vertical',\n        height: '100%',\n        paddingTop: theme.input.sizes.medium.padding,\n        paddingBottom: theme.input.sizes.medium.padding\n      },\n      '&::-ms-reveal, &::-ms-clear': {\n        display: 'none'\n      },\n      '&:enabled:hover': {borderColor: theme.field.colors.hover.outline},\n      '&:disabled': {\n        background: theme.field.colors.disabled.background,\n        color: theme.field.colors.disabled.text,\n        cursor: 'not-allowed',\n        borderColor: theme.field.colors.disabled.outline\n      },\n      '&$filled[type=\"password\"]': {\n        fontFamily: 'monospace'\n      },\n      // ...placeholderMixin('$inGroup &', {\n      //   color: theme.field.colors.default.text\n      // }),\n      ...placeholderMixin('&', {\n        color: theme.field.colors.default.placeholder,\n        opacity: 1,\n        transition: `opacity ${Math.round(\n          theme.field.animationDuration * 0.7\n        )}ms linear`\n      }),\n      ...placeholderMixin('&:disabled', {\n        color: theme.field.colors.disabled.placeholder,\n        opacity: 1\n      }),\n      ...placeholderMixin('&:focus', {\n        opacity: 0.54\n      }),\n      ...placeholderMixin('$isEnabled$isFocused &', {\n        opacity: 0.54\n      })\n    },\n    withStatusLine: {\n      '& $activeBorder': {\n        borderWidth: '0 0 2px',\n        transform: 'scaleX(0.6) scaleY(0)',\n        transformOrigin: 'center bottom'\n      },\n      '& $input': {\n        paddingBottom: 1\n      }\n    },\n    withOutline: {\n      '& $input': {\n        borderRadius: theme.field.borderRadius,\n        borderWidth: 1\n      }\n    },\n    regular: {\n      composes: ['$withOutline'],\n      '& $activeBorder': {\n        borderRadius: theme.field.borderRadius,\n        borderWidth: 1\n      }\n    },\n    awesome: {\n      composes: ['$withOutline', '$withStatusLine'],\n      '& $activeBorder': {\n        borderRadius: theme.field.borderRadius\n      }\n    },\n    promo: {\n      composes: ['$withStatusLine'],\n      '& $input': {\n        paddingTop: 1,\n        borderBottomWidth: 1\n      },\n      '& $input, & $input:disabled': {\n        background: 'none'\n      }\n    },\n    ...['medium', 'small'].reduce(\n      (result, size) => ({\n        ...result,\n        [size]: {\n          '& $input': {\n            fontSize: theme.field.sizes[size].fontSize,\n            ...ifMobile({\n              fontSize: theme.field.mobile.sizes[size].fontSize\n            })\n          },\n          '& input$input': {\n            height: theme.field.sizes[size].height,\n            lineHeight: 'normal'\n          },\n          '& $icon': {\n            height: theme.field.sizes[size].icon,\n            width: theme.field.sizes[size].icon,\n            lineHeight: theme.field.sizes[size].icon + 'px'\n          },\n          '& $eye': {\n            height: theme.field.sizes[size].eyeIcon,\n            width: theme.field.sizes[size].eyeIcon,\n            lineHeight: theme.field.sizes[size].eyeIcon + 'px'\n          },\n          '& $eyeWrapper': {\n            '&:after': {\n              display: 'block',\n              content: '\" \"',\n              position: 'absolute',\n              top: -Math.floor(\n                (theme.field.sizes[size].height -\n                  theme.field.sizes[size].eyeIcon) /\n                  2\n              ),\n              bottom: -Math.floor(\n                (theme.field.sizes[size].height -\n                  theme.field.sizes[size].eyeIcon) /\n                  2\n              ),\n              left: -10,\n              right: -10\n            }\n          },\n          '&$withOutline $input': {\n            paddingLeft: theme.input.sizes[size].padding,\n            paddingRight: theme.input.sizes[size].padding\n          },\n          '&$withLeftIcon$regular $input': {\n            paddingLeft: theme.field.sizes[size].withIconPadding - 1\n          },\n          '&$withLeftIcon$awesome $input': {\n            paddingLeft: theme.field.sizes[size].withIconPadding\n          },\n          '&$withLeftIcon$promo $input': {\n            paddingLeft:\n              theme.field.sizes[size].withIconPadding -\n              theme.input.sizes[size].padding\n          },\n          '&$withRightIcon$regular $input, &$withEye$regular $input': {\n            paddingRight: theme.field.sizes[size].withIconPadding - 1\n          },\n          '&$withEye$withRightIcon$regular $input': {\n            paddingRight: theme.field.sizes[size].withIconsPadding - 1\n          },\n          '&$withRightIcon$awesome $input, &$withEye$awesome $input': {\n            paddingRight: theme.field.sizes[size].withIconPadding\n          },\n          '&$withEye$withRightIcon$awesome $input': {\n            paddingRight: theme.field.sizes[size].withIconsPadding\n          },\n          '&$withRightIcon$promo $input, &$withEye$promo $input': {\n            paddingRight:\n              theme.field.sizes[size].withIconPadding -\n              theme.input.sizes[size].padding\n          },\n          '&$withEye$withRightIcon$promo $input': {\n            paddingRight:\n              theme.field.sizes[size].withIconsPadding -\n              theme.input.sizes[size].padding\n          },\n          '&$withEye$regular $iconRight, &$withEye$awesome $iconRight': {\n            right: theme.field.sizes[size].withIconPadding\n          },\n          '&$withEye$promo $iconRight': {\n            right:\n              theme.field.sizes[size].withIconPadding -\n              theme.input.sizes[size].padding\n          },\n          '&$regular $iconLeft, &$awesome $iconLeft': {\n            left: theme.field.sizes[size].iconMargin\n          },\n          '&$promo $iconLeft': {\n            left: 0\n          },\n          '&$regular $iconRight, &$awesome $iconRight': {\n            right: theme.field.sizes[size].iconMargin\n          },\n          '&$promo $iconRight': {\n            right: 0\n          },\n          '&$inGroup$regular, &$inGroup$awesome': {\n            '&:not($startPosition)': {\n              '& $input, & $activeBorder': {\n                borderTopLeftRadius: 0,\n                borderBottomLeftRadius: 0\n              }\n            },\n            '&:not($endPosition)': {\n              '& $input, & $activeBorder': {\n                borderTopRightRadius: 0,\n                borderBottomRightRadius: 0\n              }\n            }\n          },\n          '&$inGroup$promo': {\n            '&:not($startPosition)': {\n              '&$withLeftIcon $input': {\n                paddingLeft: theme.field.sizes[size].withIconPadding\n              },\n              '& $iconLeft': {\n                left: theme.field.sizes[size].iconMargin\n              }\n            },\n            '&:not($endPosition)': {\n              '&$withRightIcon $input, &$withEye $input': {\n                paddingRight: theme.field.sizes[size].withIconPadding\n              },\n              '&$withEye$withRightIcon $input': {\n                paddingRight: theme.field.sizes[size].withIconsPadding - 1\n              },\n              '&$withEye $iconRight': {\n                right: theme.field.sizes[size].withIconPadding\n              },\n              '& $iconRight': {\n                right: theme.field.sizes[size].iconMargin\n              }\n            }\n          }\n        }\n      }),\n      {}\n    ),\n    root: {\n      extend: isolateMixin,\n      position: 'relative',\n      boxSizing: 'border-box',\n      fontFamily: theme.fontFamily\n    },\n    activeBorder: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      pointerEvents: 'none',\n      transition: `all ${Math.round(\n        theme.field.animationDuration * 0.7\n      )}ms linear`,\n      border: '0 solid transparent',\n      '$input:focus + &, $isEnabled$isFocused &': activeBorder(\n        theme.field.colors.focus.border\n      ),\n      '$success$isEnabled &': activeBorder(theme.colors.success),\n      '$error$isEnabled &': activeBorder(theme.colors.danger),\n      '$warning$isEnabled &': activeBorder(theme.colors.warn)\n    },\n    icon: {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      margin: 'auto',\n      fontSize: 0,\n      color: theme.field.icon.colors.default\n    },\n    eye: {\n      composes: '$icon',\n      pointerEvents: 'auto',\n      border: 0,\n      outline: 0,\n      cursor: 'pointer',\n      '&:hover': {\n        color: theme.field.icon.colors.active\n      },\n      '$regular &, $awesome &': {\n        right: theme.input.eyeMargin\n      },\n      '$promo &': {\n        right: 0\n      }\n    },\n    withLeftIcon: {},\n    withRightIcon: {},\n    withEye: {},\n    iconLeft: {\n      composes: '$icon',\n      pointerEvents: 'none'\n    },\n    iconRight: {\n      composes: '$icon'\n    },\n    isFocused: {},\n    filled: {},\n    isDisabled: {},\n    isEnabled: {},\n    inGroup: {},\n    success: {},\n    error: {},\n    warning: {},\n    eyeWrapper: {},\n    endPosition: {},\n    startPosition: {},\n    middlePosition: {}\n  }),\n  {name: 'Input'}\n)\nexport default class Input extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      type: this.props.type\n    }\n  }\n\n  static propTypes = {\n    /**\n     *  Значение введённое в поле, возвращается в callback onChange.\n     *  Можно задать дефолтное значение.\n     */\n    value: PropTypes.any.isRequired,\n    /**\n     *  Значение placeholder для input\n     */\n    placeholder: PropTypes.string,\n    /**\n     * Задизэйблить input true или false\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Тип поля (на данный момент, cо временем добавим другие типы полей).\n     */\n    type: PropTypes.oneOf([\n      'email',\n      'number',\n      'password',\n      'tel',\n      'text',\n      'url'\n    ]),\n    /**\n     * Размер инпута\n     */\n    size: PropTypes.oneOf(['small', 'medium']),\n    /**\n     * Разновидность инпута\n     */\n    variation: PropTypes.oneOf(['regular', 'awesome', 'promo']),\n    /**\n     * Имя элемента\n     */\n    name: PropTypes.string,\n    /**\n     * Валидация input'a\n     */\n    status: PropTypes.oneOf(['error', 'warning', 'success', null]),\n    /**\n     * Подсветка импута, как в состоянии `:focus`\n     */\n    isFocused: PropTypes.bool,\n    /**\n     * Класс контейнера\n     */\n    className: PropTypes.string,\n    /**\n     * Класс элемента input\n     */\n    inputClassName: PropTypes.string,\n    /**\n     * По умолчанию элемент input растягивается на всю ширину родительского контейнера.\n     * Т.е. задавать ширину через родительский контейнер - объект style.\n     * Сюда не стоит передавать какое-либо значение.\n     */\n    fullWidth: PropTypes.any,\n    /**\n     * Переопределение стандартных стилей input\n     */\n    inputStyle: PropTypes.object,\n    /**\n     * Переопределение стилей контейнера для input\n     */\n    style: PropTypes.object,\n    /**\n     * Callback onChange возвращает event и event.target.value\n     */\n    onChange: PropTypes.func.isRequired,\n    /**\n     * Callback onBlur\n     */\n    onBlur: PropTypes.func,\n    /**\n     * Callback onFocus\n     */\n    onFocus: PropTypes.func,\n    /**\n     * Callback onKeyUp\n     */\n    onKeyUp: PropTypes.func,\n    /**\n     * Callback onKeyDown\n     */\n    onKeyDown: PropTypes.func,\n    /**\n     *  icon слева\n     */\n    iconLeft: PropTypes.node,\n    /**\n     *  icon справа\n     */\n    iconRight: PropTypes.node,\n    /**\n     * Текст подсказки для кнопки смены статуса типа password, ожидается `String`\n     * или функция возвращающая `String`: currentType => 'Показать пароль'\n     */\n    passwordIconTooltip: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func\n    ]),\n    /**\n     * Позиция инпута в группе\n     */\n    groupPosition: PropTypes.oneOf(['start', 'middle', 'end', null]),\n    /**\n     * Дополнительный класс правой иконки\n     */\n    iconRightClassName: PropTypes.string,\n    /**\n     * Дополнительный класс левой иконки\n     */\n    iconLeftClassName: PropTypes.string\n  }\n\n  static defaultProps = {\n    status: null,\n    size: 'medium',\n    variation: 'awesome'\n  }\n\n  saveRef = ref => {\n    this.input = ref\n    if (this.props.inputRef) this.props.inputRef(ref)\n  }\n\n  inputTypeHelper = () => {\n    this.input.type = this.state.type === 'password' ? 'text' : 'password'\n    this.setState({type: this.input.type})\n  }\n\n  onChangeHelper = e => {\n    if (this.props.onChange) this.props.onChange(e, e.target.value)\n  }\n\n  renderPasswordIcon() {\n    const {type} = this.state\n\n    const {\n      type: trueType,\n      size,\n      theme,\n      classes,\n      passwordIconTooltip\n    } = this.props\n\n    if (trueType !== 'password') return null\n\n    const Icon = type === 'password' ? ClosedEyeIcon : Eye\n\n    const icon = (\n      <span className={classes.eyeWrapper} onClick={this.inputTypeHelper}>\n        <Icon\n          size={theme.field.sizes[size].eyeIcon}\n          className={classes.eyeIcon}\n          color=\"currentColor\"\n        />\n      </span>\n    )\n\n    if (passwordIconTooltip) {\n      const content =\n        typeof passwordIconTooltip === 'function'\n          ? passwordIconTooltip(type)\n          : passwordIconTooltip\n\n      return (\n        <Tooltip content={content} className={classes.eye}>\n          {icon}\n        </Tooltip>\n      )\n    }\n\n    return <div className={classes.eye}>{icon}</div>\n  }\n\n  renderIcon(Icon, className) {\n    const {props} = this\n    const {field} = props.theme\n    return (\n      <div className={className}>\n        {cloneElement(Icon, {\n          color: props.disabled\n            ? field.colors.disabled.text\n            : Icon.props.color || 'currentColor',\n          size: Icon.props.size || field.sizes[props.size].icon\n        })}\n      </div>\n    )\n  }\n\n  render() {\n    const {\n      tag = 'input',\n      className,\n      style,\n      disabled,\n      inputStyle,\n      inputClassName,\n      iconLeftClassName,\n      iconRightClassName,\n      name,\n      size,\n      variation,\n      placeholder,\n      iconLeft,\n      iconRight,\n      status,\n      isFocused,\n      classes,\n      value,\n      groupPosition,\n      theme, // eslint-disable-line no-unused-vars\n      onChange, // eslint-disable-line no-unused-vars\n      passwordIconTooltip, // eslint-disable-line no-unused-vars\n      inputRef, // eslint-disable-line no-unused-vars\n      ...other\n    } = this.props\n\n    const trueType = this.props.type\n    const resultClassName = classnames(\n      className,\n      classes.root,\n      classes[variation],\n      classes[status],\n      isFocused && classes.isFocused,\n      disabled ? classes.isDisabled : classes.isEnabled,\n      classes[size],\n      iconLeft && classes.withLeftIcon,\n      iconRight && classes.withRightIcon,\n      trueType === 'password' && classes.withEye,\n      groupPosition && classes[`${groupPosition}Position`],\n      groupPosition && classes.inGroup\n    )\n\n    const inputElement = createElement(tag, {\n      name,\n      value,\n      disabled,\n      ref: this.saveRef,\n      className: classnames(\n        classes.input,\n        inputClassName,\n        value !== '' && value != null && classes.filled\n      ),\n      style: inputStyle,\n      onChange: this.onChangeHelper,\n      tabIndex: 0,\n      placeholder,\n      ...other\n    })\n\n    return (\n      <div style={style} className={resultClassName}>\n        {iconLeft &&\n          this.renderIcon(\n            iconLeft,\n            classnames(iconLeftClassName, classes.iconLeft)\n          )}\n        {inputElement}\n        <div className={classes.activeBorder} />\n        {iconRight &&\n          this.renderIcon(\n            iconRight,\n            classnames(iconRightClassName, classes.iconRight)\n          )}\n        {this.renderPasswordIcon()}\n      </div>\n    )\n  }\n}\n"},837:function(n,e){n.exports='import React, {Component} from \'react\'\nimport Input from \'rambler-ui/Input\'\nimport FormGroup from \'rambler-ui/FormGroup\'\nimport InputStatus from \'rambler-ui/InputStatus\'\nimport RamblerMailIcon from \'rambler-ui/icons/services/RamblerMailIcon\'\n\nexport default class InputExample extends Component {\n  state = {\n    value: \'\'\n  }\n\n  onChange = (event, value) => {\n    this.setState({value})\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <h3>Form groups</h3>\n          <div style={{display: \'flex\'}}>\n            {[\'regular\', \'awesome\', \'promo\'].map(variation => (\n              <div style={{width: 300, marginRight: 40}} key={variation}>\n                <h4>{`Variation: ${variation}`}</h4>\n                <FormGroup label="Input">\n                  <Input\n                    type="text"\n                    value={this.state.value}\n                    onChange={this.onChange}\n                    placeholder="placeholder"\n                    variation={variation}\n                  />\n                </FormGroup>\n                <FormGroup label="Input password">\n                  <Input\n                    type="password"\n                    value={this.state.value}\n                    onChange={this.onChange}\n                    placeholder="placeholder"\n                    passwordIconTooltip="Показать пароль"\n                    variation={variation}\n                  />\n                </FormGroup>\n                <FormGroup label="Input isFocused">\n                  <Input\n                    isFocused={true}\n                    type="text"\n                    value={this.state.value}\n                    onChange={this.onChange}\n                    placeholder="placeholder"\n                    variation={variation}\n                    tabIndex={-1}\n                  />\n                </FormGroup>\n                <FormGroup label="Input success">\n                  <InputStatus type="success" message="Success message">\n                    <Input\n                      status="success"\n                      type="text"\n                      value={this.state.value}\n                      onChange={this.onChange}\n                      placeholder="placeholder"\n                      variation={variation}\n                    />\n                  </InputStatus>\n                </FormGroup>\n                <FormGroup label="Input warning">\n                  <InputStatus type="warning" message="Warning message">\n                    <Input\n                      status="warning"\n                      type="text"\n                      value={this.state.value}\n                      onChange={this.onChange}\n                      placeholder="placeholder"\n                      variation={variation}\n                    />\n                  </InputStatus>\n                </FormGroup>\n                <FormGroup label="Input error">\n                  <InputStatus type="error" message="Error message">\n                    <Input\n                      status="error"\n                      type="text"\n                      value={this.state.value}\n                      onChange={this.onChange}\n                      placeholder="placeholder"\n                      variation={variation}\n                    />\n                  </InputStatus>\n                </FormGroup>\n                <FormGroup label="Input disabled">\n                  <Input\n                    disabled\n                    type="text"\n                    value={this.state.value}\n                    onChange={this.onChange}\n                    placeholder="placeholder"\n                    variation={variation}\n                  />\n                </FormGroup>\n                <FormGroup label="Input small" size="small">\n                  <Input\n                    size="small"\n                    type="text"\n                    value={this.state.value}\n                    onChange={this.onChange}\n                    placeholder="placeholder"\n                    variation={variation}\n                  />\n                </FormGroup>\n                <FormGroup label="Input with right icon">\n                  <Input\n                    iconRight={<RamblerMailIcon />}\n                    type="text"\n                    value={this.state.value}\n                    onChange={this.onChange}\n                    placeholder="placeholder"\n                    variation={variation}\n                  />\n                </FormGroup>\n                <FormGroup label="Input password with left and right icon">\n                  <Input\n                    iconLeft={<RamblerMailIcon />}\n                    iconRight={<RamblerMailIcon />}\n                    type="password"\n                    value={this.state.value}\n                    onChange={this.onChange}\n                    placeholder="placeholder"\n                    variation={variation}\n                    iconLeftClassName="leftIcon"\n                    iconRightClassName="rightIcon"\n                  />\n                </FormGroup>\n                <FormGroup\n                  label="Input small password with left and right icon"\n                  size="small">\n                  <Input\n                    size="small"\n                    iconLeft={<RamblerMailIcon />}\n                    iconRight={<RamblerMailIcon />}\n                    type="password"\n                    value={this.state.value}\n                    onChange={this.onChange}\n                    placeholder="placeholder"\n                    variation={variation}\n                  />\n                </FormGroup>\n              </div>\n            ))}\n          </div>\n        </div>\n        <div style={{width: \'600px\'}}>\n          <h3>Inline form groups</h3>\n          <FormGroup label="Input" inline={true}>\n            <Input\n              type="text"\n              value={this.state.value}\n              onChange={this.onChange}\n              placeholder="placeholder"\n            />\n          </FormGroup>\n          <FormGroup label="Input password" inline={true}>\n            <Input\n              type="password"\n              value={this.state.value}\n              onChange={this.onChange}\n              placeholder="placeholder"\n              passwordIconTooltip={type =>\n                type === \'password\' ? \'Показать пароль\' : \'Скрыть пароль\'\n              }\n            />\n          </FormGroup>\n          <FormGroup label="Input success" inline={true}>\n            <InputStatus type="success" message="Success message">\n              <Input\n                status="success"\n                type="text"\n                value={this.state.value}\n                onChange={this.onChange}\n                placeholder="placeholder"\n              />\n            </InputStatus>\n          </FormGroup>\n          <FormGroup label="Input warning" inline={true}>\n            <InputStatus type="warning" message="Warning message">\n              <Input\n                status="warning"\n                type="text"\n                value={this.state.value}\n                onChange={this.onChange}\n                placeholder="placeholder"\n              />\n            </InputStatus>\n          </FormGroup>\n          <FormGroup label="Input error" inline={true}>\n            <InputStatus type="error" message="Error message">\n              <Input\n                status="error"\n                type="text"\n                value={this.state.value}\n                onChange={this.onChange}\n                placeholder="placeholder"\n              />\n            </InputStatus>\n          </FormGroup>\n          <FormGroup label="Input disabled" inline={true}>\n            <Input\n              disabled\n              type="text"\n              value={this.state.value}\n              onChange={this.onChange}\n              placeholder="placeholder"\n            />\n          </FormGroup>\n          <FormGroup label="Input small" size="small" inline={true}>\n            <Input\n              size="small"\n              type="text"\n              value={this.state.value}\n              onChange={this.onChange}\n              placeholder="placeholder"\n            />\n          </FormGroup>\n          <FormGroup label="Input with left icon" inline={true}>\n            <Input\n              iconLeft={<RamblerMailIcon />}\n              type="text"\n              value={this.state.value}\n              onChange={this.onChange}\n              placeholder="placeholder"\n            />\n          </FormGroup>\n          <FormGroup label="Input with right icon" inline={true}>\n            <Input\n              iconRight={<RamblerMailIcon />}\n              type="text"\n              value={this.state.value}\n              onChange={this.onChange}\n              placeholder="placeholder"\n            />\n          </FormGroup>\n        </div>\n      </div>\n    )\n  }\n}\n'}}]);