(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{227:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.meta=void 0;var o=m(t(2)),s=t(528),r=m(t(529)),i=m(t(531)),a=m(t(530)),c=m(t(850)),p=m(t(849)),l=m(t(848)),u=m(t(847)),h=m(t(846));function m(n){return n&&n.__esModule?n:{default:n}}var d=e.meta={title:"ComplexSearch",toc:["Пример","Свойства  <ComplexSearch />","Свойства  <ServiceSearch />","Свойства  <SimpleSearch />","Свойства  <SuggestItem />"]},S=o.default.createElement(i.default,{code:c.default}),g=o.default.createElement(a.default,{code:p.default}),f=o.default.createElement(a.default,{code:l.default}),y=o.default.createElement(a.default,{code:u.default}),v=o.default.createElement(a.default,{code:h.default});e.default=function(n){var e=n.components,t=function(n,e){var t={};for(var o in n)e.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t}(n,["components"]);return o.default.createElement(s.MDXTag,{name:"wrapper",Layout:(0,r.default)(d)(function(n){return n.children}),layoutProps:t,components:e},o.default.createElement(s.MDXTag,{name:"h3",components:e},"Пример"),S,o.default.createElement(s.MDXTag,{name:"h3",components:e},"Свойства ",o.default.createElement(s.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<ComplexSearch />")),g,o.default.createElement(s.MDXTag,{name:"h3",components:e},"Свойства ",o.default.createElement(s.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<ServiceSearch />")),f,o.default.createElement(s.MDXTag,{name:"h3",components:e},"Свойства ",o.default.createElement(s.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<SimpleSearch />")),y,o.default.createElement(s.MDXTag,{name:"h3",components:e},"Свойства ",o.default.createElement(s.MDXTag,{name:"inlineCode",components:e,parentName:"h3"},"<SuggestItem />")),v)}},846:function(n,e){n.exports="import React from 'react'\nimport * as PropTypes from 'prop-types'\nimport EventEmitter from 'events'\nimport classnames from 'classnames'\nimport {injectSheet} from '../theme'\nimport uuid from '../utils/uuid'\nimport {COMPLEX_SEARCH_SUGGEST_ITEM_CONTEXT} from '../constants/context'\n\n@injectSheet(\n  theme => ({\n    isHighlighted: {},\n    root: {\n      height: theme.suggestItem.height,\n      padding: '0 15px',\n      cursor: 'pointer',\n      fontSize: theme.suggestItem.fontSize,\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n\n      '&$isHighlighted': {\n        backgroundColor: theme.suggestItem.highlighted.backgroundColor,\n        color: theme.search.color\n      }\n    },\n    string: {\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n      whiteSpace: 'nowrap'\n    },\n    removeButton: {\n      fontSize: theme.suggestItem.removeButton.fontSize,\n      color: theme.suggestItem.removeButton.color,\n      paddingLeft: 10\n    }\n  }),\n  {name: 'SuggestItem'}\n)\nclass SuggestItem extends React.Component {\n  static propTypes = {\n    /**\n     * Переопределение стандартных стилей компонента SuggestItem\n     */\n    style: PropTypes.object,\n    /**\n     * Дополнительный css-класс компонента\n     */\n    className: PropTypes.string,\n    /**\n     * Дополнительный css-класс компонента при его выделении\n     */\n    highlightedClassName: PropTypes.string,\n    /**\n     * Текст ссылки для удаления\n     */\n    removeButton: PropTypes.string,\n    /**\n     * Значение поиского запроса айтема, может быть  любым объектом\n     */\n    value: PropTypes.any.isRequired\n  }\n\n  static defaultProps = {\n    removeButton: ''\n  }\n\n  static contextTypes = {\n    [COMPLEX_SEARCH_SUGGEST_ITEM_CONTEXT]: PropTypes.shape({\n      /**\n       * Функция регистрации SuggestItem (при добавлении этого компонента в DOM)\n       */\n      registerSuggestItem: PropTypes.func,\n      /**\n       * Колбек удаления SuggestItem\n       */\n      onRemoveSuggestItemClick: PropTypes.func,\n      /**\n       * Колбек клика по SuggestItem\n       */\n      onSuggestItemClick: PropTypes.func,\n      /**\n       * Колбек наведения на SuggstItem\n       */\n      onSuggestItemHover: PropTypes.func,\n      /**\n       * Функция для подсветки SuggestItem\n       */\n      setHighlightedId: PropTypes.func,\n      /**\n       * Шина событий\n       */\n      events: PropTypes.instanceOf(EventEmitter)\n    })\n  }\n\n  constructor(props) {\n    super(props)\n    this.id = uuid()\n    this.state = {\n      isHighlighted: false\n    }\n  }\n\n  get ctx() {\n    return this.context[COMPLEX_SEARCH_SUGGEST_ITEM_CONTEXT]\n  }\n\n  componentDidMount() {\n    this.ctx.events.on('highlight', this.onHighlight)\n    this.ctx.registerSuggestItem(this.id, this)\n  }\n\n  componentWillUnmount() {\n    this.ctx.events.removeListener('highlight', this.onHighlight)\n    this.ctx.registerSuggestItem(this.id, null)\n  }\n\n  onHighlight = highlightedItemId => {\n    const isHighlighted = highlightedItemId === this.id\n    if (this.state.isHighlighted !== isHighlighted)\n      this.setState({isHighlighted})\n  }\n\n  onItemClick = () => {\n    this.ctx.setHighlightedId(this.id)\n    this.ctx.onSuggestItemClick(this.props.value)\n  }\n\n  onMouseEnter = () => {\n    this.ctx.setHighlightedId(this.id)\n    this.ctx.onSuggestItemHover(this.props.value)\n  }\n\n  onRemoveClick = () => {\n    this.ctx.onRemoveSuggestItemClick(this.props.value)\n  }\n\n  render() {\n    const {\n      classes,\n      className,\n      highlightedClassName,\n      removeButton,\n      value, // eslint-disable-line no-unused-vars\n      ...other\n    } = this.props\n\n    return (\n      <div\n        data-suggest-item-id={this.id}\n        className={classnames(classes.root, className, {\n          [classes.isHighlighted]: this.state.isHighlighted,\n          [highlightedClassName]: this.state.isHighlighted\n        })}\n        onClick={this.onItemClick}\n        onMouseEnter={this.onMouseEnter}\n        {...other}>\n        <span className={classes.string}>{this.props.children}</span>\n        {removeButton && (\n          <span className={classes.removeButton} onClick={this.onRemoveClick}>\n            {removeButton}\n          </span>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default SuggestItem\n"},847:function(n,e){n.exports="import React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {injectSheet} from '../theme'\nimport SearchIcon from './icons/SearchIcon'\nimport SourceButtons from './SourceButtons'\nimport {isolateMixin} from '../utils/mixins'\nimport provideSearch from './provideSearch'\n\n@provideSearch\n@injectSheet(\n  theme => ({\n    active: {},\n    withoutButton: {},\n    root: {\n      extend: isolateMixin,\n      fontFamily: theme.fontFamily,\n      fontSize: 13,\n      width: '100%',\n      maxWidth: theme.simpleSearch.maxWidth,\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    inputRow: {\n      position: 'relative',\n      width: '100%',\n      display: 'flex'\n    },\n    inputWrapper: {\n      borderColor: theme.simpleSearch.input.default.borderColor,\n      borderWidth: 2,\n      borderStyle: 'solid',\n      display: 'flex',\n      alignItems: 'center',\n      position: 'relative',\n      borderRadius: '1px',\n      width: '100%',\n      boxSizing: 'border-box',\n      backgroundColor: theme.search.input.backgroundColor,\n\n      '&$active': {\n        borderColor: theme.simpleSearch.input.hover.borderColor\n      }\n    },\n    bottomWrapper: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      padding: '15px 0',\n      fontSize: 12\n    },\n    input: {\n      extend: isolateMixin,\n      padding: '10px 12px',\n      border: 'none',\n      boxSizing: 'border-box',\n      display: 'block',\n      borderRadius: 0,\n      width: '100%',\n      fontWeight: 400,\n      fontSize: 13,\n      lineHeight: '25px',\n      appearance: 'none',\n      color: theme.simpleSearch.input.color,\n      height: '100%',\n      outline: 0,\n      boxShadow: 'none',\n\n      '&::-ms-reveal, &::-ms-clear': {\n        display: 'none'\n      },\n\n      '&::-webkit-input-placeholder': {\n        fontSize: theme.simpleSearch.input.placeholder.fontSize,\n        color: theme.simpleSearch.input.placeholder.color,\n        opacity: 1\n      },\n      '&::-moz-placeholder': {\n        fontSize: theme.simpleSearch.input.placeholder.fontSize,\n        color: theme.simpleSearch.input.placeholder.color,\n        opacity: 1\n      },\n      '&:-ms-input-placeholder': {\n        fontSize: theme.simpleSearch.input.placeholder.fontSize,\n        color: theme.simpleSearch.input.placeholder.color,\n        opacity: 1\n      }\n    },\n    searchButton: {\n      extend: isolateMixin,\n      display: 'inline-flex',\n      background: 'none',\n      borderRadius: '0 1px 1px 0',\n      textAlign: 'center',\n      paddingLeft: 13,\n      border: 'none',\n      flexShrink: 0,\n      cursor: 'pointer',\n      boxSizing: 'border-box',\n      color: theme.simpleSearch.button.color,\n      outline: 'none',\n\n      '&:active': {\n        color: theme.search.button.active.color\n      }\n    },\n    serviceIcons: {\n      display: 'flex',\n      flexShrink: 0,\n      padding: '0 13px',\n      alignItems: 'center'\n    },\n    overlay: {\n      width: '100%'\n    },\n    ...['small', 'medium'].reduce(\n      (result, size) => ({\n        ...result,\n        [`size-${size}`]: {\n          '& $inputWrapper': {\n            height: theme.simpleSearch.sizes[size].height\n          }\n        }\n      }),\n      {}\n    )\n  }),\n  {name: 'SimpleSearch'}\n)\nexport default class SimpleSearch extends React.Component {\n  static propTypes = {\n    /**\n     * Переопределение стандартных стилей компонента Search\n     */\n    style: PropTypes.object,\n    /**\n     * CSS-класс компонента\n     */\n    className: PropTypes.string,\n    /**\n     * CSS-класс для родителя инпута\n     */\n    inputWrapperClassName: PropTypes.string,\n    /**\n     * Текущий поисковый запрос\n     */\n    value: PropTypes.string,\n    /**\n     * Отображать или нет кнопку поиска\n     */\n    showSearchButton: PropTypes.bool,\n    /**\n     * Плейсхолдер поискового инпута\n     */\n    placeholder: PropTypes.string,\n    /**\n     * Коллбек на изменение поискового запроса `function (value: string, options: object) {}`,\n     * принимает первым аргументом значение поискового запроса\n     */\n    onSearch: PropTypes.func,\n    /**\n     * Коллбек на фокус поискового инпута\n     */\n    onFocus: PropTypes.func,\n    /**\n     * Коллбек на блур поискового инпута\n     */\n    onBlur: PropTypes.func,\n    /**\n     * Коллбек на нажатие на кнопку поиска `function (value: string, options: object) {}`,\n     * принимает первым аргументом значение поискового запроса\n     */\n    onSubmit: PropTypes.func,\n    /**\n     * Коллбек на нажатие на Enter `function (value: string, options: object) {}`,\n     * принимает первым аргументом значение поискового запроса\n     */\n    onPressEnter: PropTypes.func,\n    /**\n     * \tДополнительные аттрибуты для поискового инпута\n     */\n    inputProps: PropTypes.object,\n    /**\n     * \tДополнительные аттрибуты для кнопок переключения источника поиска\n     */\n    sourceButtonsProps: PropTypes.func,\n    /**\n     * \tДополнительные аттрибуты для кнопки\n     */\n    searchButtonProps: PropTypes.object,\n    /**\n     * Размер поискового блока\n     */\n    size: PropTypes.oneOf(['small', 'medium']),\n    /**\n     * Для отображения поиска по сервису/интернету\n     */\n    sourceType: PropTypes.bool,\n    /**\n     * \tТекст тултипа поиска по сервису\n     */\n    serviceTooltipLabel: PropTypes.string\n  }\n\n  static defaultProps = {\n    value: '',\n    placeholder: '',\n    showSearchButton: true,\n    inputProps: {},\n    searchButtonProps: {},\n    sourceButtonsProps: () => ({}),\n    sourceType: false,\n    size: 'medium',\n    onSearch() {},\n    onFocus() {},\n    onBlur() {},\n    onSubmit() {},\n    onPressEnter() {}\n  }\n\n  renderInputNode() {\n    const {\n      placeholder,\n      inputProps,\n      classes,\n      onKeyDown,\n      onFocusInput,\n      onBlurInput,\n      setNode,\n      value,\n      onSearch\n    } = this.props\n\n    return (\n      <input\n        type=\"text\"\n        onChange={onSearch}\n        onKeyDown={onKeyDown}\n        onFocus={onFocusInput}\n        onBlur={onBlurInput}\n        value={value}\n        className={classes.input}\n        placeholder={placeholder}\n        ref={setNode('input')}\n        {...inputProps}\n      />\n    )\n  }\n\n  renderInput() {\n    const {inputWrapperClassName, classes} = this.props\n\n    return (\n      <div className={classnames(classes.inputWrapper, inputWrapperClassName)}>\n        {this.renderInputNode()}\n        {this.renderServiceIcons()}\n      </div>\n    )\n  }\n\n  renderServiceIcons() {\n    const {\n      classes,\n      sourceType,\n      searchOptions,\n      showSearchButton,\n      sourceButtonsProps,\n      serviceTooltipLabel,\n      changeSourceType\n    } = this.props\n    return (\n      <div className={classes.serviceIcons}>\n        {sourceType && (\n          <SourceButtons\n            onSourceIconClick={changeSourceType}\n            sourceButtonsProps={sourceButtonsProps}\n            serviceTooltipLabel={serviceTooltipLabel}\n            activeType={searchOptions.sourceType}\n          />\n        )}\n        {showSearchButton && this.renderButton()}\n      </div>\n    )\n  }\n\n  renderButton() {\n    const {\n      classes,\n      searchButtonStyle,\n      searchButtonProps,\n      searchButtonClassName,\n      onSubmit\n    } = this.props\n\n    return (\n      <button\n        className={classnames(classes.searchButton, searchButtonClassName)}\n        onClick={onSubmit}\n        size=\"small\"\n        style={searchButtonStyle}\n        tabIndex={-1}\n        {...searchButtonProps}>\n        <SearchIcon\n          size={15}\n          className={this.props.classes.searchIcon}\n          color=\"currentColor\"\n        />\n      </button>\n    )\n  }\n\n  render() {\n    const {classes, style, className, size, showSearchButton} = this.props\n\n    return (\n      <div\n        className={classnames(\n          classes.root,\n          !showSearchButton && classes.withoutButton,\n          className,\n          classes[`size-${size}`]\n        )}\n        style={style}>\n        <div className={classes.inputRow}>{this.renderInput()}</div>\n      </div>\n    )\n  }\n}\n"},848:function(n,e){n.exports="import React, {cloneElement} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {injectSheet} from '../theme'\nimport ClearIcon from './icons/ClearIcon'\nimport ServiceSearchIcon from './icons/ServiceSearchIcon'\nimport {isolateMixin} from '../utils/mixins'\nimport provideSearch from './provideSearch'\nimport provideSearchDropdown from './provideSearchDropdown'\n\n@provideSearch\n@provideSearchDropdown\n@injectSheet(\n  theme => ({\n    small: {},\n    medium: {},\n    active: {},\n    root: {\n      extend: isolateMixin,\n      fontFamily: theme.fontFamily,\n      fontSize: theme.serviceSearch.fontSize,\n      width: '100%',\n      maxWidth: theme.serviceSearch.maxWidth,\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    inputRow: {\n      height: '100%',\n      position: 'relative',\n      width: '100%',\n      display: 'flex'\n    },\n    inputWrapper: {\n      borderStyle: 'solid',\n      display: 'flex',\n      alignItems: 'center',\n      position: 'relative',\n      paddingRight: 30,\n      borderRadius: 1,\n      width: '100%',\n      boxSizing: 'border-box',\n      borderColor: theme.serviceSearch.input.default.borderColor,\n      borderWidth: 1,\n      backgroundColor: theme.search.input.backgroundColor,\n\n      '&$active': {\n        borderColor: theme.serviceSearch.input.hover.borderColor\n      }\n    },\n    input: {\n      extend: isolateMixin,\n      padding: '10px 14px',\n      border: 'none',\n      boxSizing: 'border-box',\n      display: 'block',\n      borderRadius: 0,\n      width: '100%',\n      fontWeight: 400,\n      fontSize: theme.serviceSearch.fontSize,\n      lineHeight: '25px',\n      appearance: 'none',\n      color: theme.serviceSearch.input.color,\n      height: '100%',\n      outline: 0,\n      boxShadow: 'none',\n\n      '&::-ms-reveal, &::-ms-clear': {\n        display: 'none'\n      },\n      '&::-webkit-input-placeholder': {\n        fontSize: theme.serviceSearch.input.placeholder.fontSize,\n        color: theme.serviceSearch.input.placeholder.color,\n        opacity: 1\n      },\n      '&::-moz-placeholder': {\n        fontSize: theme.serviceSearch.input.placeholder.fontSize,\n        color: theme.serviceSearch.input.placeholder.color,\n        opacity: 1\n      },\n      '&:-ms-input-placeholder': {\n        fontSize: theme.serviceSearch.input.placeholder.fontSize,\n        color: theme.serviceSearch.input.placeholder.color,\n        opacity: 1\n      }\n    },\n    inputLeftIcon: {\n      marginLeft: 12\n    },\n    searchButton: {\n      extend: isolateMixin,\n      background: 'none',\n      outline: 'none',\n      border: 'none',\n      cursor: 'pointer',\n      position: 'absolute',\n      padding: 0,\n      width: 15,\n      height: 15,\n      right: 15,\n      top: '50%',\n      transform: 'translateY(-50%)'\n    },\n    searchIcon: {\n      color: theme.serviceSearch.input.default.icon,\n      outline: 'none'\n    },\n    clearIcon: {\n      position: 'absolute',\n      right: 15,\n      top: '50%',\n      transform: 'translateY(-50%)',\n      cursor: 'pointer',\n      color: theme.serviceSearch.clear.color\n    },\n    serviceIcons: {\n      display: 'flex',\n      position: 'absolute',\n      alignItems: 'center',\n      right: 15\n    },\n    ...['small', 'medium'].reduce(\n      (result, size) => ({\n        ...result,\n        [`size-${size}`]: {\n          '& $inputWrapper': {\n            height: theme.serviceSearch.sizes[size].height\n          }\n        }\n      }),\n      {}\n    )\n  }),\n  {name: 'ServiceSearch'}\n)\nexport default class ServiceSearch extends React.Component {\n  static propTypes = {\n    /**\n     * Переопределение стандартных стилей компонента Search\n     */\n    style: PropTypes.object,\n    /**\n     * CSS-класс компонента\n     */\n    className: PropTypes.string,\n    /**\n     * CSS-класс для родителя инпута\n     */\n    inputWrapperClassName: PropTypes.string,\n    /**\n     * Текущий поисковый запрос\n     */\n    value: PropTypes.string,\n    /**\n     * Иконка поиска, по дефолту подставляется иконка с лупой\n     */\n    searchIcon: PropTypes.node,\n    /**\n     * Объект для дополнительных стилей для дропдауна\n     */\n    dropdownStyle: PropTypes.object,\n    /**\n     * Дополнительный css-класс для дропдауна\n     */\n    dropdownClassName: PropTypes.string,\n    /**\n     * Плейсхолдер поискового инпута\n     */\n    placeholder: PropTypes.string,\n    /**\n     * Коллбек на изменение поискового запроса `function (value: string, options: object) {}`,\n     * принимает первым аргументом значение поискового запроса\n     */\n    onSearch: PropTypes.func,\n    /**\n     * Коллбек на фокус поискового инпута\n     */\n    onFocus: PropTypes.func,\n    /**\n     * Коллбек на блур поискового инпута\n     */\n    onBlur: PropTypes.func,\n    /**\n     * Коллбек на выбор поискового запроса через стрелки, первым аргументом получает props.value соответствующего SuggestItem\n     */\n    onSelectItem: PropTypes.func,\n    /**\n     * Коллбек на клик SuggestItem, первым аргументом получает props.value соответствующего SuggestItem\n     */\n    onClickItem: PropTypes.func,\n    /**\n     * Коллбек на удаление SuggestItem, первым аргументом получает props.value соответствующего SuggestItem\n     */\n    onRemoveItem: PropTypes.func,\n    /**\n     * Колбек ховера по SuggestItem, первым аргументом получает props.value соответствующего SuggestItem\n     */\n    onHoverItem: PropTypes.func,\n    /**\n     * Коллбек на нажатие на кнопку поиска `function (value: string, options: object) {}`,\n     * принимает первым аргументом значение поискового запроса\n     */\n    onSubmit: PropTypes.func,\n    /**\n     * Коллбек на нажатие на Enter `function (value: string, options: object) {}`,\n     * принимает первым аргументом значение поискового запроса\n     */\n    onPressEnter: PropTypes.func,\n    /**\n     * Вставлять ли dropdown внутри body\n     */\n    appendToBody: PropTypes.bool,\n    /**\n     * \tАвтоматическое позиционирование дропдауна по оси Y (если выходит за пределы экрана)\n     */\n    autoPositionY: PropTypes.bool,\n    /**\n     * \tДополнительные аттрибуты для поискового инпута\n     */\n    inputProps: PropTypes.object,\n    /**\n     * \tДополнительные аттрибуты для кнопок переключения источника поиска\n     */\n    sourceButtonsProps: PropTypes.func,\n    /**\n     * Размер поискового блока\n     */\n    size: PropTypes.oneOf(['small', 'medium']),\n    /**\n     * Иконка инпута слева\n     */\n    inputLeftIcon: PropTypes.node\n  }\n\n  static defaultProps = {\n    value: '',\n    placeholder: '',\n    appendToBody: true,\n    autoPositionY: false,\n    inputProps: {},\n    size: 'medium',\n    onSearch() {},\n    onFocus() {},\n    onBlur() {},\n    onSelectItem() {},\n    onClickItem() {},\n    onRemoveItem() {},\n    onHoverItem() {},\n    onSubmit() {},\n    onPressEnter() {}\n  }\n\n  /**\n   * Показывать ли крестик очищения input\n   * @return {Boolean}\n   */\n  get isClearVisible() {\n    return Boolean(this.props.value)\n  }\n\n  renderInputIcon() {\n    const {inputLeftIcon, theme, classes} = this.props\n    if (!inputLeftIcon) return\n    const {size, className, color} = inputLeftIcon.props\n    return cloneElement(inputLeftIcon, {\n      className: classnames(classes.inputLeftIcon, className),\n      size: size || 15,\n      color: color || theme.search.input.default.icon\n    })\n  }\n\n  renderInputNode() {\n    const {\n      placeholder,\n      inputProps,\n      classes,\n      onSearch,\n      onBlur,\n      onKeyDown,\n      setNode,\n      onFocus,\n      value\n    } = this.props\n\n    return (\n      <input\n        type=\"text\"\n        onChange={onSearch}\n        onKeyDown={onKeyDown}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        value={value}\n        className={classes.input}\n        placeholder={placeholder}\n        {...inputProps}\n        ref={setNode('input')}\n      />\n    )\n  }\n\n  renderButton() {\n    const {\n      classes,\n      searchButtonClassName,\n      searchButtonProps,\n      onSubmit\n    } = this.props\n\n    return (\n      <button\n        className={classnames(classes.searchButton, searchButtonClassName)}\n        onClick={onSubmit}\n        {...searchButtonProps}>\n        <ServiceSearchIcon\n          size={15}\n          className={classes.searchIcon}\n          tabIndex={-1}\n          color=\"currentColor\"\n        />\n      </button>\n    )\n  }\n\n  renderInput = () => {\n    const {inputWrapperClassName, classes, isDropdownOpened} = this.props\n\n    return (\n      <div\n        className={classnames(\n          classes.inputWrapper,\n          inputWrapperClassName,\n          isDropdownOpened && classes.active\n        )}>\n        {this.renderInputIcon()}\n        {this.renderInputNode()}\n        {!this.isClearVisible && this.renderButton()}\n        {this.isClearVisible && (\n          <ClearIcon\n            className={classes.clearIcon}\n            size={20}\n            color=\"currentColor\"\n            onClick={this.props.clearForm}\n          />\n        )}\n      </div>\n    )\n  }\n\n  renderDropdown() {\n    return this.props.renderDropdown(this.renderInput())\n  }\n\n  render() {\n    const {classes, style, className, size, setNode} = this.props\n\n    return (\n      <div\n        className={classnames(classes.root, className, classes[`size-${size}`])}\n        style={style}\n        ref={setNode('root')}>\n        <div className={classes.inputRow}>{this.renderDropdown()}</div>\n      </div>\n    )\n  }\n}\n"},849:function(n,e){n.exports="import React, {cloneElement} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {injectSheet} from '../theme'\nimport ClearIcon from './icons/ClearIcon'\nimport MediaSearchIcon from './icons/MediaSearchIcon'\nimport {isolateMixin} from '../utils/mixins'\nimport SourceButtons from './SourceButtons'\nimport provideSearch from './provideSearch'\nimport provideSearchDropdown from './provideSearchDropdown'\n\n@provideSearch\n@provideSearchDropdown\n@injectSheet(\n  theme => ({\n    active: {},\n    root: {\n      extend: isolateMixin,\n      fontFamily: theme.fontFamily,\n      fontSize: theme.search.fontSize,\n      width: '100%',\n      maxWidth: theme.search.maxWidth,\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    inputRow: {\n      position: 'relative',\n      width: '100%',\n      display: 'flex'\n    },\n    inputWrapper: {\n      borderColor: theme.search.input.default.borderColor,\n      borderWidth: 2,\n      borderStyle: 'solid',\n      borderRightWidth: 0,\n      display: 'flex',\n      alignItems: 'center',\n      position: 'relative',\n      borderRadius: '1px 0 0 1px',\n      width: '100%',\n      boxSizing: 'border-box',\n      backgroundColor: theme.search.input.backgroundColor,\n\n      '&$active': {\n        borderColor: theme.search.input.hover.borderColor\n      }\n    },\n    division: {\n      height: 30,\n      padding: '0 12px',\n      display: 'flex',\n      alignItems: 'center',\n      margin: '0 3px',\n      fontSize: 11,\n      textTransform: 'uppercase',\n      fontWeight: 500,\n      borderRadius: '1px',\n      backgroundColor: theme.search.division.color,\n      letterSpacing: 1.3,\n      cursor: 'pointer'\n    },\n    input: {\n      extend: isolateMixin,\n      padding: '10px 12px',\n      border: 'none',\n      boxSizing: 'border-box',\n      display: 'block',\n      borderRadius: 0,\n      height: '100%',\n      width: '100%',\n      fontWeight: 400,\n      fontSize: theme.search.fontSize,\n      lineHeight: '20px',\n      appearance: 'none',\n      color: theme.search.input.color,\n      outline: 0,\n      boxShadow: 'none',\n\n      '&::-ms-reveal, &::-ms-clear': {\n        display: 'none'\n      },\n\n      '&::-webkit-input-placeholder': {\n        fontSize: theme.search.input.placeholder.fontSize,\n        color: theme.search.input.placeholder.color,\n        opacity: 1\n      },\n      '&::-moz-placeholder': {\n        fontSize: theme.search.input.placeholder.fontSize,\n        color: theme.search.input.placeholder.color,\n        opacity: 1\n      },\n      '&:-ms-input-placeholder': {\n        fontSize: theme.search.input.placeholder.fontSize,\n        color: theme.search.input.placeholder.color,\n        opacity: 1\n      }\n    },\n    inputLeftIcon: {\n      marginLeft: 12\n    },\n    searchButton: {\n      extend: isolateMixin,\n      width: 125,\n      padding: '0 0 0 21px',\n      color: theme.search.button.color,\n      borderRadius: '0 1px 1px 0',\n      border: 'none',\n      flexShrink: 0,\n      display: 'inline-flex',\n      alignItems: 'center',\n      cursor: 'pointer',\n      boxSizing: 'border-box',\n      background: theme.search.button.default.background,\n      outline: 'none',\n      fontSize: theme.search.button.fontSize,\n      fontWeight: theme.search.button.fontWeight,\n      letterSpacing: theme.search.button.letterSpacing,\n      textTransform: theme.search.button.textTransform,\n\n      '&:hover': {\n        background: theme.search.button.hover.background\n      },\n\n      '&:active': {\n        background: theme.search.button.active.background\n      }\n    },\n    searchIcon: {\n      marginRight: 7,\n      verticalAlign: 'middle'\n    },\n    withoutButton: {\n      '& $inputWrapper': {\n        borderRadius: 1,\n        borderRightWidth: 2,\n        boxShadow: 'none'\n      }\n    },\n    clear: {\n      position: 'absolute',\n      right: 15,\n      top: '50%',\n      transform: 'translateY(-50%)',\n      cursor: 'pointer',\n      opacity: 0.6,\n\n      '&:hover': {\n        opacity: 1,\n        color: theme.search.clear.hover.color\n      },\n\n      '&:active': {\n        opacity: 1\n      }\n    },\n\n    serviceIcons: {\n      display: 'flex',\n      flexShrink: 0,\n      padding: '0 15px',\n      alignItems: 'center'\n    },\n\n    serviceIcon: {\n      opacity: 0.5,\n      transition: 'opacity 0.2s, color 0.2s',\n      color: theme.search.input.default.icon,\n      cursor: 'pointer',\n      marginRight: 10,\n\n      '&:last-child': {\n        marginRight: 0\n      },\n\n      '&:hover': {\n        opacity: 1,\n        color: theme.search.input.hover.icon\n      },\n\n      '&$active': {\n        opacity: 1\n      }\n    },\n    ...['small', 'medium'].reduce(\n      (result, size) => ({\n        ...result,\n        [`size-${size}`]: {\n          '& $inputWrapper': {\n            height: theme.search.sizes[size].height\n          }\n        }\n      }),\n      {}\n    )\n  }),\n  {name: 'ComplexSearch'}\n)\nexport default class ComplexSearch extends React.Component {\n  static propTypes = {\n    /**\n     * Переопределение стандартных стилей компонента Search\n     */\n    style: PropTypes.object,\n    /**\n     * CSS-класс компонента\n     */\n    className: PropTypes.string,\n    /**\n     * CSS-класс для родителя инпута\n     */\n    inputWrapperClassName: PropTypes.string,\n    /**\n     * Текущий поисковый запрос\n     */\n    value: PropTypes.string,\n    /**\n     * Кнопка поиска\n     */\n    searchButton: PropTypes.node,\n    /**\n     * Объект для дополнительных стилей для кнопки\n     */\n    searchButtonStyle: PropTypes.object,\n    /**\n     * Дополнительный css-класс для кнопки поиска\n     */\n    searchButtonClassName: PropTypes.string,\n    /**\n     * Иконка поиска, по дефолту подставляется иконка с лупой\n     */\n    searchIcon: PropTypes.node,\n    /**\n     * Иконка инпута слева\n     */\n    inputLeftIcon: PropTypes.node,\n    /**\n     * Объект для дополнительных стилей для дропдауна\n     */\n    dropdownStyle: PropTypes.object,\n    /**\n     * Дополнительный css-класс для дропдауна\n     */\n    dropdownClassName: PropTypes.string,\n    /**\n     * Имя раздела, по которому ищем\n     */\n    division: PropTypes.string,\n    /**\n     * Плейсхолдер поискового инпута\n     */\n    placeholder: PropTypes.string,\n    /**\n     * Коллбек на изменение поискового запроса `function (value: string, options: object) {}`,\n     * принимает первым аргументом значение поискового запроса\n     */\n    onSearch: PropTypes.func,\n    /**\n     * Коллбек на фокус поискового инпута\n     */\n    onFocus: PropTypes.func,\n    /**\n     * Коллбек на блур поискового инпута\n     */\n    onBlur: PropTypes.func,\n    /**\n     * Коллбек на выбор поискового запроса через стрелки, первым аргументом получает props.value соответствующего SuggestItem\n     */\n    onSelectItem: PropTypes.func,\n    /**\n     * Коллбек на клик SuggestItem, первым аргументом получает props.value соответствующего SuggestItem\n     */\n    onClickItem: PropTypes.func,\n    /**\n     * Коллбек на удаление SuggestItem, первым аргументом получает props.value соответствующего SuggestItem\n     */\n    onRemoveItem: PropTypes.func,\n    /**\n     * Колбек ховера по SuggestItem, первым аргументом получает props.value соответствующего SuggestItem\n     */\n    onHoverItem: PropTypes.func,\n    /**\n     * Коллбек на нажатие на кнопку поиска `function (value: string, options: object) {}`,\n     * принимает первым аргументом значение поискового запроса\n     */\n    onSubmit: PropTypes.func,\n    /**\n     * Коллбек на нажатие на Enter `function (value: string, options: object) {}`,\n     * принимает первым аргументом значение поискового запроса\n     */\n    onPressEnter: PropTypes.func,\n    /**\n     * Вставлять ли dropdown внутри body\n     */\n    appendToBody: PropTypes.bool,\n    /**\n     * \tАвтоматическое позиционирование дропдауна по оси Y (если выходит за пределы экрана)\n     */\n    autoPositionY: PropTypes.bool,\n    /**\n     * \tДополнительные аттрибуты для поискового инпута\n     */\n    inputProps: PropTypes.object,\n    /**\n     * \tДополнительные аттрибуты для кнопок переключения источника поиска\n     */\n    sourceButtonsProps: PropTypes.func,\n    /**\n     * \tТекст тултипа поиска по сервису\n     */\n    serviceTooltipLabel: PropTypes.string,\n    /**\n     * \tДополнительные аттрибуты для кнопки\n     */\n    searchButtonProps: PropTypes.object,\n    /**\n     * Для отображения поиска по сервису/интернету\n     */\n    sourceType: PropTypes.bool,\n    /**\n     * Размер поискового блока\n     */\n    size: PropTypes.oneOf(['small', 'medium'])\n  }\n\n  static defaultProps = {\n    value: '',\n    placeholder: '',\n    size: 'medium',\n    division: null,\n    appendToBody: true,\n    autoPositionY: false,\n    searchButton: null,\n    searchButtonStyle: {},\n    searchButtonClassName: '',\n    inputProps: {},\n    searchButtonProps: {},\n    sourceButtonsProps: () => ({}),\n    sourceType: false,\n    onSearch() {},\n    onFocus() {},\n    onBlur() {},\n    onSelectItem() {},\n    onClickItem() {},\n    onRemoveItem() {},\n    onHoverItem() {},\n    onSubmit() {},\n    onPressEnter() {}\n  }\n\n  /**\n   * Показывать ли крестик очищения input\n   * @return {Boolean}\n   */\n  get isClearVisible() {\n    return Boolean(this.props.value)\n  }\n\n  renderInputIcon() {\n    const {inputLeftIcon, theme, classes} = this.props\n    if (!inputLeftIcon) return\n    const {size, className, color} = inputLeftIcon.props\n    return cloneElement(inputLeftIcon, {\n      className: classnames(classes.inputLeftIcon, className),\n      size: size || 15,\n      color: color || theme.search.input.default.icon\n    })\n  }\n\n  renderInputNode() {\n    const {\n      placeholder,\n      inputProps,\n      classes,\n      setNode,\n      onKeyDown,\n      onFocus,\n      onBlur,\n      value,\n      onSearch\n    } = this.props\n\n    return (\n      <input\n        type=\"text\"\n        onChange={onSearch}\n        onKeyDown={onKeyDown}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        value={value}\n        className={classes.input}\n        placeholder={placeholder}\n        {...inputProps}\n        ref={setNode('input')}\n      />\n    )\n  }\n\n  renderInput = () => {\n    const {\n      division,\n      inputWrapperClassName,\n      classes,\n      isDropdownOpened\n    } = this.props\n\n    return (\n      <div\n        className={classnames(\n          classes.inputWrapper,\n          inputWrapperClassName,\n          isDropdownOpened && classes.active\n        )}>\n        {division && <div className={classes.division}>{division}</div>}\n        {this.renderInputIcon()}\n        {this.renderInputNode()}\n        {this.renderServiceIcons()}\n      </div>\n    )\n  }\n\n  renderServiceIcons() {\n    const {\n      classes,\n      sourceType,\n      searchOptions,\n      sourceButtonsProps,\n      serviceTooltipLabel,\n      changeSourceType\n    } = this.props\n    return (\n      <div className={classes.serviceIcons}>\n        {this.isClearVisible && (\n          <ClearIcon\n            className={classes.serviceIcon}\n            size={20}\n            color=\"currentColor\"\n            onClick={this.props.clearForm}\n          />\n        )}\n        {sourceType && (\n          <SourceButtons\n            serviceTooltipLabel={serviceTooltipLabel}\n            onSourceIconClick={changeSourceType}\n            sourceButtonsProps={sourceButtonsProps}\n            activeType={searchOptions.sourceType}\n          />\n        )}\n      </div>\n    )\n  }\n\n  renderButton() {\n    const {\n      classes,\n      searchButton,\n      searchButtonStyle,\n      searchButtonClassName,\n      searchButtonProps,\n      onSubmit\n    } = this.props\n\n    if (!searchButton) return null\n\n    // если передали ноду - ее отдаем на рендер\n    if (typeof searchButton === 'object') return searchButton\n\n    return (\n      <button\n        className={classnames(classes.searchButton, searchButtonClassName)}\n        onClick={onSubmit}\n        size=\"small\"\n        style={searchButtonStyle}\n        tabIndex={-1}\n        {...searchButtonProps}>\n        {this.renderSearchIcon()}\n        {searchButton}\n      </button>\n    )\n  }\n\n  renderSearchIcon() {\n    if (this.props.searchIcon === undefined)\n      return (\n        <MediaSearchIcon\n          size={20}\n          className={this.props.classes.searchIcon}\n          color={this.props.theme.search.button.color}\n        />\n      )\n    if (this.props.searchIcon) return this.props.searchIcon\n    return null\n  }\n\n  renderDropdown() {\n    return this.props.renderDropdown(this.renderInput())\n  }\n\n  render() {\n    const {classes, style, className, size, setNode} = this.props\n    const button = this.renderButton()\n\n    return (\n      <div\n        className={classnames(\n          classes.root,\n          !button && classes.withoutButton,\n          className,\n          classes[`size-${size}`]\n        )}\n        style={style}\n        ref={setNode('root')}>\n        <div className={classes.inputRow}>\n          {this.renderDropdown()}\n          {button}\n        </div>\n      </div>\n    )\n  }\n}\n"},850:function(n,e){n.exports="import {\n  ComplexSearch,\n  ServiceSearch,\n  SimpleSearch,\n  SuggestItem\n} from 'rambler-ui/ComplexSearch'\nimport React, {Component} from 'react'\nimport {ApplyTheme} from 'rambler-ui/theme'\nimport SearchIcon from 'rambler-ui/icons/forms/SearchIcon'\n\nconst mediaInputResults = {\n  global: [\n    ['base', 'это россия детка русские приколы 2015 выпуск 8', '10', ''],\n    [\n      'base',\n      'это рыночная форма в которой на рынке доминирует небольшое количество продавцов',\n      '8',\n      ''\n    ],\n    ['base', 'это россия детка её не победить', '7', ''],\n    ['base', 'это ретро', '6', ''],\n    ['base', 'это русская наследница с первой до последней серии', '5', ''],\n    ['base', 'это рукопашный бой', '4', ''],\n    [\n      'base',\n      'это расширение контролируется правилами и не может быть удалено или отключено',\n      '3',\n      ''\n    ],\n    ['base', 'это работает вк', '2', ''],\n    ['base', 'это россия детка ютуб', '1', '']\n  ],\n  service: [\n    ['base', 'кексы рецепты самые простые', '10', ''],\n    ['base', 'кекусин кан', '9', ''],\n    ['base', 'кекс', '8', ''],\n    ['base', 'кексы', '7', ''],\n    ['base', 'кекс фм', '6', ''],\n    ['base', 'кекс шоп 2', '5', ''],\n    ['base', 'кекс шоп 2 играть онлайн', '4', ''],\n    ['base', 'кекс на кефире', '3', ''],\n    ['base', 'кекс на сметане', '2', ''],\n    ['base', 'кекс шоп 3 играть', '1', '']\n  ]\n}\n\nconst serviceInputResults = [\n  ['base', 'это россия детка русские приколы 2015 выпуск 8', '10', ''],\n  [\n    'base',\n    'это рыночная форма в которой на рынке доминирует небольшое количество продавцов',\n    '8',\n    ''\n  ],\n  ['base', 'это россия детка её не победить', '7', ''],\n  ['base', 'это ретро', '6', ''],\n  ['base', 'это русская наследница с первой до последней серии', '5', ''],\n  ['base', 'это рукопашный бой', '4', ''],\n  [\n    'base',\n    'это расширение контролируется правилами и не может быть удалено или отключено',\n    '3',\n    ''\n  ],\n  ['base', 'это работает вк', '2', ''],\n  ['base', 'это россия детка ютуб', '1', '']\n]\n\nexport default class SearchExample extends Component {\n  state = {\n    mediaSearchItems: [],\n    serviceSearchItems: [],\n    query: '',\n    value: '',\n    serviceValue: ''\n  }\n\n  fetchQuery = (query, options = {}) => {\n    if (!query) {\n      this.setState({mediaSearchItems: []})\n      return false\n    }\n\n    if (options.sourceType === 'service')\n      this.setState({\n        mediaSearchItems: mediaInputResults.service,\n        query\n      })\n    else\n      this.setState({\n        mediaSearchItems: mediaInputResults.global,\n        query\n      })\n  }\n\n  fetchServiceQuery = query => {\n    if (!query) {\n      this.setState({serviceSearchItems: []})\n      return false\n    }\n\n    this.setState({\n      serviceSearchItems: serviceInputResults,\n      query\n    })\n  }\n\n  renderHint() {\n    return (\n      <div className=\"hint\">\n        Например, <a href>напримерыч напримеров</a>\n      </div>\n    )\n  }\n\n  renderBottomLinks() {\n    return (\n      <div className=\"bottomLink\">\n        <a href>Сделать поиск по умолчанию!</a>\n      </div>\n    )\n  }\n\n  onPressEnter = query => {\n    this.setState({value: query})\n    this.goToSearch(query)\n  }\n\n  onServiceEnter = query => {\n    this.setState({serviceValue: query})\n    this.goToSearch(query)\n  }\n\n  onSelectItem = query => {\n    this.setState({value: query, query})\n  }\n\n  onServiceSelectItem = query => {\n    this.setState({serviceValue: query, query})\n  }\n\n  onItemClick = query => {\n    this.goToSearch(query)\n  }\n\n  goToSearch = (query = '') => {\n    window.open(\n      `https://nova.rambler.ru/search?query=${encodeURIComponent(query)}`\n    )\n  }\n\n  renderItem(string) {\n    const query = this.state.query\n    if (string.indexOf(query) === 0)\n      return (\n        <span>\n          <b>{query}</b>\n          {string.replace(query, '')}\n        </span>\n      )\n\n    return string\n  }\n\n  render() {\n    return (\n      <ApplyTheme>\n        <div>\n          <style>\n            {`\n              .example-topline-search {\n                width: 300px;\n              }\n            `}\n          </style>\n          <h4>ComplexSearch</h4>\n          <ComplexSearch\n            value={this.state.value}\n            onSearch={this.fetchQuery.bind(this)}\n            onSubmit={this.goToSearch}\n            onSelectItem={this.onSelectItem}\n            onClickItem={this.onItemClick}\n            hint={this.renderHint()}\n            bottomLinks={this.renderBottomLinks()}\n            onPressEnter={this.onPressEnter}\n            placeholder=\"Напишите 'это...'\"\n            searchButton=\"НАЙТИ\"\n            searchButtonStyle={{minWidth: 125}}\n            autoPositionY={false}\n            inputProps={{'data-cerber-head': 'main::search'}}\n            sourceType\n            serviceTooltipLabel=\"Поиск по новостям\"\n            sourceButtonsProps={type => ({\n              'data-cerber-head': `main::${type}`\n            })}\n            searchButtonProps={{'data-cerber-head': 'main::button'}}>\n            {this.state.mediaSearchItems.map(item => (\n              <div key={item[0] + item[2]}>\n                <SuggestItem\n                  value={item[1]}\n                  data-cerber-head={`search::suggest:item-${item[2]}`}>\n                  {this.renderItem(item[1])}\n                </SuggestItem>\n              </div>\n            ))}\n          </ComplexSearch>\n          <br />\n          <ComplexSearch\n            inputLeftIcon={<SearchIcon />}\n            placeholder=\"Компонент без параметров\"\n          />\n          <br />\n          <h4>ServiceSearch</h4>\n          <ServiceSearch\n            placeholder=\"Сервисный инпут\"\n            value={this.state.serviceValue}\n            onSearch={this.fetchServiceQuery.bind(this)}\n            onSelectItem={this.onServiceSelectItem}\n            onClickItem={this.onItemClick}\n            hint={this.renderHint()}\n            bottomLinks={this.renderBottomLinks()}\n            onPressEnter={this.onServiceEnter}\n            placeholder=\"Напишите 'это...'\"\n            searchButton=\"Search\"\n            searchButtonStyle={{minWidth: 125}}\n            onSubmit={this.goToSearch}\n            inputLeftIcon={<SearchIcon />}>\n            {this.state.serviceSearchItems.map(item => (\n              <div\n                key={item[0] + item[2]}\n                style={{borderTop: '1px solid #eee'}}>\n                <SuggestItem value={item[1]}>\n                  {this.renderItem(item[1])}\n                </SuggestItem>\n              </div>\n            ))}\n          </ServiceSearch>\n          <br />\n          <ServiceSearch size=\"small\" placeholder=\"Сервисный инпут маленький\" />\n          <br />\n          <h4>SimpleSearch (topline search)</h4>\n          <SimpleSearch\n            placeholder=\"Поиск в топлайне\"\n            sourceType\n            serviceTooltipLabel=\"Поиск по новостям\"\n            className=\"example-topline-search\"\n            inputWrapperClassName=\"example-topline-search-wrapper\"\n          />\n        </div>\n      </ApplyTheme>\n    )\n  }\n}\n"}}]);