(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{225:function(e,n,o){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.meta=void 0;var t=u(o(2)),r=o(528),a=u(o(529)),i=u(o(531)),l=u(o(530)),s=u(o(843)),d=u(o(842));function u(e){return e&&e.__esModule?e:{default:e}}var p=n.meta={title:"FieldGroup",toc:["Пример","Свойства  <FieldGroup />"]},m=t.default.createElement(i.default,{code:s.default}),c=t.default.createElement(l.default,{code:d.default});n.default=function(e){var n=e.components,o=function(e,n){var o={};for(var t in e)n.indexOf(t)>=0||Object.prototype.hasOwnProperty.call(e,t)&&(o[t]=e[t]);return o}(e,["components"]);return t.default.createElement(r.MDXTag,{name:"wrapper",Layout:(0,a.default)(p)(function(e){return e.children}),layoutProps:o,components:n},t.default.createElement(r.MDXTag,{name:"h3",components:n},"Пример"),m,t.default.createElement(r.MDXTag,{name:"h3",components:n},"Свойства ",t.default.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"h3"},"<FieldGroup />")),c)}},842:function(e,n){e.exports="import React, {PureComponent, Children, cloneElement} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {injectSheet} from '../theme'\nimport {isolateMixin} from '../utils/mixins'\n\n@injectSheet(\n  theme => ({\n    root: {\n      extend: isolateMixin,\n      position: 'relative',\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'stretch',\n      '& > *': {\n        flex: 1,\n        flexBasis: 0\n      },\n      '& input': {\n        '&, &:disabled': {\n          backgroundColor: 'transparent'\n        },\n        '&, &:disabled, &:enabled:hover': {\n          borderColor: 'transparent'\n        }\n      },\n      '& > :nth-child(n+2)': {\n        marginLeft: -1\n      },\n      '&:before': {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        border: '0 solid',\n        borderColor: theme.field.colors.default.outline,\n        content: '\"\"',\n        transition: `all ${theme.field.animationDuration}ms ease`\n      },\n      '&:not($disabled):hover:before': {\n        borderColor: theme.field.colors.hover.outline\n      }\n    },\n    disabled: {\n      '&:before': {\n        borderColor: theme.field.colors.disabled.outline\n      }\n    },\n    regular: {\n      backgroundColor: theme.field.colors.default.background,\n      '&$disabled': {\n        backgroundColor: theme.field.colors.disabled.background\n      },\n      '&:before': {\n        borderRadius: theme.field.borderRadius,\n        borderWidth: 1\n      }\n    },\n    awesome: {\n      composes: ['$regular']\n    },\n    promo: {\n      '&:before': {\n        paddingTop: 1,\n        borderBottomWidth: 1\n      }\n    },\n    showDivider: {\n      '& > :not(:last-child) input': {\n        borderRightColor: theme.field.colors.default.outline\n      },\n      '&:hover > :not(:last-child) input': {\n        borderRightColor: theme.field.colors.hover.outline\n      }\n    }\n  }),\n  {name: 'FieldGroup'}\n)\nexport default class FieldGroup extends PureComponent {\n  static propTypes = {\n    /**\n     * Класс контейнера\n     */\n    className: PropTypes.string,\n    /**\n     * Переопределение стилей контейнера\n     */\n    style: PropTypes.object,\n    /**\n     * Размер инпутов группы\n     */\n    size: PropTypes.oneOf(['small', 'medium']),\n    /**\n     * Разновидность инпутов группы\n     */\n    variation: PropTypes.oneOf(['regular', 'awesome', 'promo']),\n    /**\n     * Статус валидации инпутов группы\n     */\n    status: PropTypes.oneOf(['error', 'warning', 'success', null]),\n    /**\n     * Доступность инпутов группы\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Разделитель между инпутами группы\n     */\n    showDivider: PropTypes.bool\n  }\n\n  static defaultProps = {\n    variation: 'awesome',\n    showDivider: false\n  }\n\n  render() {\n    const {\n      className,\n      style,\n      classes,\n      children,\n      disabled,\n      variation,\n      showDivider,\n      theme, // eslint-disable-line no-unused-vars\n      ...props\n    } = this.props\n\n    const count = Children.count(children)\n    let i = 1\n\n    return (\n      <div\n        style={style}\n        className={classnames(\n          className,\n          classes.root,\n          classes[variation],\n          disabled && classes.disabled,\n          showDivider && classes.showDivider\n        )}>\n        {Children.map(children, child => {\n          let groupPosition = 'middle'\n          if (i === 1) groupPosition = 'start'\n          else if (i === count) groupPosition = 'end'\n          i++\n          return cloneElement(child, {\n            ...props,\n            disabled,\n            variation,\n            groupPosition\n          })\n        })}\n      </div>\n    )\n  }\n}\n"},843:function(e,n){e.exports="import React, {Component} from 'react'\nimport Input from 'rambler-ui/Input'\nimport Select from 'rambler-ui/Select'\nimport {MenuItem} from 'rambler-ui/Menu'\nimport FieldGroup from 'rambler-ui/FieldGroup'\n\nexport default class FieldGroupExample extends Component {\n  state = {\n    value: ''\n  }\n\n  setValue = (e, value) => {\n    this.setState({value})\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <h3>Form groups</h3>\n          <div style={{display: 'flex'}}>\n            {['regular', 'awesome', 'promo'].map(variation => (\n              <div style={{width: 300, marginRight: 40}} key={variation}>\n                <h4>{`Variation: ${variation}`}</h4>\n                <FieldGroup variation={variation}>\n                  <Select placeholder=\"placeholder\" appendToBody={true}>\n                    <MenuItem value=\"foo\">Foo</MenuItem>\n                    <MenuItem value=\"bar\">Bar</MenuItem>\n                  </Select>\n                  <Input\n                    type=\"text\"\n                    placeholder=\"placeholder\"\n                    onChange={this.setValue}\n                    value={this.state.value}\n                  />\n                </FieldGroup>\n                <br />\n                <FieldGroup variation={variation} showDivider>\n                  <Select placeholder=\"placeholder\" appendToBody={true}>\n                    <MenuItem value=\"foo\">Foo</MenuItem>\n                    <MenuItem value=\"bar\">Bar</MenuItem>\n                  </Select>\n                  <Input\n                    type=\"text\"\n                    placeholder=\"placeholder\"\n                    onChange={this.setValue}\n                    value={this.state.value}\n                  />\n                </FieldGroup>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n"}}]);