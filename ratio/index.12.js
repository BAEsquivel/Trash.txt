(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{210:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.meta=void 0;var s=h(t(2)),c=t(528),r=h(t(529)),o=h(t(531)),i=h(t(530)),a=h(t(803)),l=h(t(802));function h(e){return e&&e.__esModule?e:{default:e}}var d=n.meta={title:"Switcher",toc:["Пример","Свойства  <Switcher />"]},m=s.default.createElement(o.default,{code:a.default}),p=s.default.createElement(i.default,{code:l.default});n.default=function(e){var n=e.components,t=function(e,n){var t={};for(var s in e)n.indexOf(s)>=0||Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t}(e,["components"]);return s.default.createElement(c.MDXTag,{name:"wrapper",Layout:(0,r.default)(d)(function(e){return e.children}),layoutProps:t,components:n},s.default.createElement(c.MDXTag,{name:"h3",components:n},"Пример"),m,s.default.createElement(c.MDXTag,{name:"h3",components:n},"Свойства ",s.default.createElement(c.MDXTag,{name:"inlineCode",components:n,parentName:"h3"},"<Switcher />")),p)}},802:function(e,n){e.exports="import React, {PureComponent} from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {injectSheet} from '../theme'\nimport {isolateMixin} from '../utils/mixins'\n\nconst setThemeForSelector = colors => ({\n  color: colors.text,\n  '& $switcher': {\n    backgroundColor: colors.background\n  },\n  '& $track': {\n    backgroundColor: colors.track\n  }\n})\n\n@injectSheet(\n  theme => ({\n    root: {\n      extend: isolateMixin,\n      fontFamily: theme.fontFamily,\n      fontSize: theme.switcher.fontSize,\n      position: 'relative',\n      display: 'inline-flex',\n      justifyContent: 'space-between',\n      alignItems: 'flex-start',\n      verticalAlign: 'top',\n      lineHeight: theme.switcher.height + 'px',\n      cursor: 'pointer',\n      ...setThemeForSelector(theme.switcher.colors.default.default),\n      '&:hover': setThemeForSelector(theme.switcher.colors.default.hover),\n      '&:active': setThemeForSelector(theme.switcher.colors.default.active),\n      '&$disabled': setThemeForSelector(theme.switcher.colors.default.disabled)\n    },\n    checked: {\n      ...setThemeForSelector(theme.switcher.colors.checked.default),\n      '&:hover': setThemeForSelector(theme.switcher.colors.checked.hover),\n      '&:active': setThemeForSelector(theme.switcher.colors.checked.active),\n      '&$disabled': setThemeForSelector(theme.switcher.colors.checked.disabled),\n      '& $track': {\n        left:\n          theme.switcher.width -\n          theme.switcher.height +\n          theme.switcher.trackMargin\n      }\n    },\n    disabled: {\n      pointerEvents: 'none'\n    },\n    left: {\n      flexDirection: 'row',\n      '& $label': {\n        marginLeft: theme.switcher.labelMargin\n      }\n    },\n    right: {\n      flexDirection: 'row-reverse',\n      '& $label': {\n        marginRight: theme.switcher.labelMargin\n      }\n    },\n    checkbox: {\n      position: 'absolute',\n      opacity: 0,\n      appearance: 'none',\n      pointerEvents: 'none'\n    },\n    switcher: {\n      position: 'relative',\n      flexShrink: 0,\n      borderRadius: 9999,\n      marginTop: 1,\n      width: theme.switcher.width,\n      height: theme.switcher.height,\n      transitionProperty: 'background',\n      transitionDuration: theme.switcher.animationDuration\n    },\n    track: {\n      position: 'absolute',\n      top: theme.switcher.trackMargin,\n      left: theme.switcher.trackMargin,\n      width: theme.switcher.height - 2 * theme.switcher.trackMargin,\n      height: theme.switcher.height - 2 * theme.switcher.trackMargin,\n      borderRadius: 9999,\n      transitionProperty: 'left, background',\n      transitionDuration: theme.switcher.animationDuration\n    },\n    label: {\n      cursor: 'pointer',\n      fontWeight: 'normal',\n      lineHeight: 1.43\n    }\n  }),\n  {name: 'Switcher'}\n)\nexport default class Switcher extends PureComponent {\n  static propTypes = {\n    /**\n     * Имя элемента\n     */\n    name: PropTypes.string,\n    /**\n     * Будет недоступен, если `true`\n     */\n    disabled: PropTypes.bool,\n    /**\n     * CSS-класс контейнера\n     */\n    className: PropTypes.string,\n    /**\n     * Стили контейнера\n     */\n    style: PropTypes.object,\n    /**\n     * CSS-класс переключателя\n     */\n    switcherClassName: PropTypes.string,\n    /**\n     * Стили переключателя\n     */\n    switcherStyle: PropTypes.object,\n    /**\n     * CSS-класс ползунка\n     */\n    trackClassName: PropTypes.string,\n    /**\n     * Стили ползунка\n     */\n    trackStyle: PropTypes.object,\n    /**\n     * CSS-класс подписи\n     */\n    labelClassName: PropTypes.string,\n    /**\n     * Стили подписи\n     */\n    labelStyle: PropTypes.object,\n    /**\n     * C какой стороны показывать переключатель\n     */\n    iconPosition: PropTypes.oneOf(['left', 'right']),\n    /**\n     * Будет включен, если `true`\n     */\n    checked: PropTypes.bool.isRequired,\n    /**\n     * Подпись переключателя\n     */\n    children: PropTypes.node,\n    /**\n     * Коллбек изменения состояния переключателя `onCheck(event, checked)`\n     */\n    onCheck: PropTypes.func.isRequired\n  }\n\n  static defaultProps = {\n    checked: false,\n    disabled: false,\n    iconPosition: 'left',\n    onCheck: () => {}\n  }\n\n  state = {\n    checked: false\n  }\n\n  componentWillMount() {\n    this.switch(this.props.checked)\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.switch(nextProps.checked)\n  }\n\n  switch(checked) {\n    if (this.checked !== checked) {\n      this.checked = checked\n\n      this.setState({\n        checked\n      })\n    }\n  }\n\n  onCheck = event => {\n    const checked = event.target.checked\n\n    this.switch(checked)\n    this.props.onCheck(event, checked)\n  }\n\n  render() {\n    const {checked} = this.state\n\n    const {\n      className,\n      style,\n      switcherClassName,\n      switcherStyle,\n      trackClassName,\n      trackStyle,\n      labelClassName,\n      labelStyle,\n      disabled,\n      children,\n      iconPosition,\n      classes,\n      checked: check, // eslint-disable-line no-unused-vars\n      theme, // eslint-disable-line no-unused-vars\n      onCheck, // eslint-disable-line no-unused-vars\n      ...other\n    } = this.props\n\n    const rootClassName = classnames(\n      classes.root,\n      classes[iconPosition],\n      {\n        [classes.checked]: checked,\n        [classes.disabled]: disabled\n      },\n      className\n    )\n\n    return (\n      <label style={style} className={rootClassName}>\n        <input\n          {...other}\n          className={classes.checkbox}\n          type=\"checkbox\"\n          checked={checked}\n          disabled={disabled}\n          onChange={this.onCheck}\n        />\n        <span\n          style={switcherStyle}\n          className={classnames(classes.switcher, switcherClassName)}>\n          <span\n            style={trackStyle}\n            className={classnames(classes.track, trackClassName)}\n          />\n        </span>\n        {children && (\n          <span\n            style={labelStyle}\n            className={classnames(classes.label, labelClassName)}>\n            {children}\n          </span>\n        )}\n      </label>\n    )\n  }\n}\n"},803:function(e,n){e.exports="import React, {Component} from 'react'\nimport Switcher from 'rambler-ui/Switcher'\n\nexport default class SwitcherExample extends Component {\n  state = {\n    checked: false\n  }\n\n  onCheck = (event, checked) => {\n    this.setState({\n      checked\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <Switcher checked={this.state.checked} onCheck={this.onCheck}>\n            Получать уведомления по почте\n          </Switcher>\n        </div>\n        <div style={{marginTop: 20}}>\n          <Switcher\n            iconPosition=\"right\"\n            checked={this.state.checked}\n            onCheck={this.onCheck}>\n            Получать уведомления по почте\n          </Switcher>\n        </div>\n        <div style={{marginTop: 20, maxWidth: 200}}>\n          <Switcher disabled checked={this.state.checked}>\n            На протяжении многих веков правители семи народов вели непрерывные\n            войны.\n          </Switcher>\n        </div>\n      </div>\n    )\n  }\n}\n"}}]);